
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000008f4  00000988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800128  00800128  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007176  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001248  00000000  00000000  00007e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001543  00000000  00000000  0000906e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  0000a5b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a09  00000000  00000000  0000ad0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d3a  00000000  00000000  0000c715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000f44f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_18>
  4c:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_19>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	41 02       	muls	r20, r17

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e4 ef       	ldi	r30, 0xF4	; 244
  ce:	f8 e0       	ldi	r31, 0x08	; 8
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a8 32       	cpi	r26, 0x28	; 40
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a8 e2       	ldi	r26, 0x28	; 40
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ae 3c       	cpi	r26, 0xCE	; 206
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
 106:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <setup>:


// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 116:	26 e0       	ldi	r18, 0x06	; 6
 118:	40 e8       	ldi	r20, 0x80	; 128
 11a:	55 e2       	ldi	r21, 0x25	; 37
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_ZN14HardwareSerial5beginEmh>

00000128 <loop>:
  Serial.begin(9600);
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	0e 94 1f 04 	call	0x83e	; 0x83e <digitalWrite>
  Serial.println("HIGH");
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	71 e0       	ldi	r23, 0x01	; 1
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN5Print7printlnEPKc>
  delay(1000);                       // wait for a second
 13c:	68 ee       	ldi	r22, 0xE8	; 232
 13e:	73 e0       	ldi	r23, 0x03	; 3
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 43 03 	call	0x686	; 0x686 <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8d e0       	ldi	r24, 0x0D	; 13
 14c:	0e 94 1f 04 	call	0x83e	; 0x83e <digitalWrite>
  Serial.println("LOW");
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN5Print7printlnEPKc>
  delay(1000);                       // wait for a second
 15c:	68 ee       	ldi	r22, 0xE8	; 232
 15e:	73 e0       	ldi	r23, 0x03	; 3
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0c 94 43 03 	jmp	0x686	; 0x686 <delay>

00000168 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 168:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 16a:	91 8d       	ldd	r25, Z+25	; 0x19
 16c:	22 8d       	ldd	r18, Z+26	; 0x1a
 16e:	89 2f       	mov	r24, r25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 5c       	subi	r24, 0xC0	; 192
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	82 1b       	sub	r24, r18
 178:	91 09       	sbc	r25, r1
}
 17a:	8f 73       	andi	r24, 0x3F	; 63
 17c:	99 27       	eor	r25, r25
 17e:	08 95       	ret

00000180 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 180:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 182:	91 8d       	ldd	r25, Z+25	; 0x19
 184:	82 8d       	ldd	r24, Z+26	; 0x1a
 186:	98 17       	cp	r25, r24
 188:	31 f0       	breq	.+12     	; 0x196 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 18a:	82 8d       	ldd	r24, Z+26	; 0x1a
 18c:	e8 0f       	add	r30, r24
 18e:	f1 1d       	adc	r31, r1
 190:	85 8d       	ldd	r24, Z+29	; 0x1d
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 19a:	08 95       	ret

0000019c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 19c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 19e:	91 8d       	ldd	r25, Z+25	; 0x19
 1a0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1a2:	98 17       	cp	r25, r24
 1a4:	61 f0       	breq	.+24     	; 0x1be <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1a6:	82 8d       	ldd	r24, Z+26	; 0x1a
 1a8:	df 01       	movw	r26, r30
 1aa:	a8 0f       	add	r26, r24
 1ac:	b1 1d       	adc	r27, r1
 1ae:	5d 96       	adiw	r26, 0x1d	; 29
 1b0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1b2:	92 8d       	ldd	r25, Z+26	; 0x1a
 1b4:	9f 5f       	subi	r25, 0xFF	; 255
 1b6:	9f 73       	andi	r25, 0x3F	; 63
 1b8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1c2:	08 95       	ret

000001c4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1c4:	87 e3       	ldi	r24, 0x37	; 55
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	89 2b       	or	r24, r25
 1ca:	49 f0       	breq	.+18     	; 0x1de <_Z14serialEventRunv+0x1a>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	89 2b       	or	r24, r25
 1d2:	29 f0       	breq	.+10     	; 0x1de <_Z14serialEventRunv+0x1a>
 1d4:	0e 94 37 02 	call	0x46e	; 0x46e <_Z17Serial0_availablev>
 1d8:	81 11       	cpse	r24, r1
 1da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 1de:	08 95       	ret

000001e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1e0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1e2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1e4:	df 01       	movw	r26, r30
 1e6:	a8 0f       	add	r26, r24
 1e8:	b1 1d       	adc	r27, r1
 1ea:	a3 5a       	subi	r26, 0xA3	; 163
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1f0:	84 8d       	ldd	r24, Z+28	; 0x1c
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	8f 73       	andi	r24, 0x3F	; 63
 1f8:	99 27       	eor	r25, r25
 1fa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1fc:	a6 89       	ldd	r26, Z+22	; 0x16
 1fe:	b7 89       	ldd	r27, Z+23	; 0x17
 200:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 202:	a0 89       	ldd	r26, Z+16	; 0x10
 204:	b1 89       	ldd	r27, Z+17	; 0x11
 206:	8c 91       	ld	r24, X
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 20c:	93 8d       	ldd	r25, Z+27	; 0x1b
 20e:	84 8d       	ldd	r24, Z+28	; 0x1c
 210:	98 13       	cpse	r25, r24
 212:	06 c0       	rjmp	.+12     	; 0x220 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 214:	02 88       	ldd	r0, Z+18	; 0x12
 216:	f3 89       	ldd	r31, Z+19	; 0x13
 218:	e0 2d       	mov	r30, r0
 21a:	80 81       	ld	r24, Z
 21c:	8f 7d       	andi	r24, 0xDF	; 223
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 228:	88 8d       	ldd	r24, Y+24	; 0x18
 22a:	88 23       	and	r24, r24
 22c:	c9 f0       	breq	.+50     	; 0x260 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 22e:	ea 89       	ldd	r30, Y+18	; 0x12
 230:	fb 89       	ldd	r31, Y+19	; 0x13
 232:	80 81       	ld	r24, Z
 234:	85 fd       	sbrc	r24, 5
 236:	05 c0       	rjmp	.+10     	; 0x242 <_ZN14HardwareSerial5flushEv+0x20>
 238:	a8 89       	ldd	r26, Y+16	; 0x10
 23a:	b9 89       	ldd	r27, Y+17	; 0x11
 23c:	8c 91       	ld	r24, X
 23e:	86 fd       	sbrc	r24, 6
 240:	0f c0       	rjmp	.+30     	; 0x260 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	07 fc       	sbrc	r0, 7
 246:	f5 cf       	rjmp	.-22     	; 0x232 <_ZN14HardwareSerial5flushEv+0x10>
 248:	80 81       	ld	r24, Z
 24a:	85 ff       	sbrs	r24, 5
 24c:	f2 cf       	rjmp	.-28     	; 0x232 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 24e:	a8 89       	ldd	r26, Y+16	; 0x10
 250:	b9 89       	ldd	r27, Y+17	; 0x11
 252:	8c 91       	ld	r24, X
 254:	85 ff       	sbrs	r24, 5
 256:	ed cf       	rjmp	.-38     	; 0x232 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 25e:	e7 cf       	rjmp	.-50     	; 0x22e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
  _written = true;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 278:	9b 8d       	ldd	r25, Y+27	; 0x1b
 27a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 27c:	98 13       	cpse	r25, r24
 27e:	05 c0       	rjmp	.+10     	; 0x28a <_ZN14HardwareSerial5writeEh+0x24>
 280:	e8 89       	ldd	r30, Y+16	; 0x10
 282:	f9 89       	ldd	r31, Y+17	; 0x11
 284:	80 81       	ld	r24, Z
 286:	85 fd       	sbrc	r24, 5
 288:	24 c0       	rjmp	.+72     	; 0x2d2 <_ZN14HardwareSerial5writeEh+0x6c>
 28a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 28c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	0f 73       	andi	r16, 0x3F	; 63
 296:	11 27       	eor	r17, r17
 298:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 29a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 29c:	e8 12       	cpse	r14, r24
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	07 fc       	sbrc	r0, 7
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2a6:	e8 89       	ldd	r30, Y+16	; 0x10
 2a8:	f9 89       	ldd	r31, Y+17	; 0x11
 2aa:	80 81       	ld	r24, Z
 2ac:	85 ff       	sbrs	r24, 5
 2ae:	f5 cf       	rjmp	.-22     	; 0x29a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2b0:	ce 01       	movw	r24, r28
 2b2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2b6:	f1 cf       	rjmp	.-30     	; 0x29a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ba:	fe 01       	movw	r30, r28
 2bc:	e8 0f       	add	r30, r24
 2be:	f1 1d       	adc	r31, r1
 2c0:	e3 5a       	subi	r30, 0xA3	; 163
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 2c6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 2c8:	ea 89       	ldd	r30, Y+18	; 0x12
 2ca:	fb 89       	ldd	r31, Y+19	; 0x13
 2cc:	80 81       	ld	r24, Z
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 2d2:	ee 89       	ldd	r30, Y+22	; 0x16
 2d4:	ff 89       	ldd	r31, Y+23	; 0x17
 2d6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 2d8:	e8 89       	ldd	r30, Y+16	; 0x10
 2da:	f9 89       	ldd	r31, Y+17	; 0x11
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	6a 01       	movw	r12, r20
 306:	7b 01       	movw	r14, r22
 308:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 30a:	e8 89       	ldd	r30, Y+16	; 0x10
 30c:	f9 89       	ldd	r31, Y+17	; 0x11
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 312:	41 15       	cp	r20, r1
 314:	51 4e       	sbci	r21, 0xE1	; 225
 316:	61 05       	cpc	r22, r1
 318:	71 05       	cpc	r23, r1
 31a:	b1 f0       	breq	.+44     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	79 e0       	ldi	r23, 0x09	; 9
 320:	8d e3       	ldi	r24, 0x3D	; 61
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	a7 01       	movw	r20, r14
 326:	96 01       	movw	r18, r12
 328:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__udivmodsi4>
 32c:	da 01       	movw	r26, r20
 32e:	c9 01       	movw	r24, r18
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	a1 09       	sbc	r26, r1
 334:	b1 09       	sbc	r27, r1
 336:	b6 95       	lsr	r27
 338:	a7 95       	ror	r26
 33a:	97 95       	ror	r25
 33c:	87 95       	ror	r24
 33e:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 340:	41 15       	cp	r20, r1
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	58 07       	cpc	r21, r24
 346:	a8 f0       	brcs	.+42     	; 0x372 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 348:	e8 89       	ldd	r30, Y+16	; 0x10
 34a:	f9 89       	ldd	r31, Y+17	; 0x11
 34c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 34e:	60 e8       	ldi	r22, 0x80	; 128
 350:	74 e8       	ldi	r23, 0x84	; 132
 352:	8e e1       	ldi	r24, 0x1E	; 30
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__udivmodsi4>
 35e:	ba 01       	movw	r22, r20
 360:	a9 01       	movw	r20, r18
 362:	41 50       	subi	r20, 0x01	; 1
 364:	51 09       	sbc	r21, r1
 366:	61 09       	sbc	r22, r1
 368:	71 09       	sbc	r23, r1
 36a:	76 95       	lsr	r23
 36c:	67 95       	ror	r22
 36e:	57 95       	ror	r21
 370:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 372:	ec 85       	ldd	r30, Y+12	; 0x0c
 374:	fd 85       	ldd	r31, Y+13	; 0x0d
 376:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 378:	ee 85       	ldd	r30, Y+14	; 0x0e
 37a:	ff 85       	ldd	r31, Y+15	; 0x0f
 37c:	40 83       	st	Z, r20

  _written = false;
 37e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 380:	ec 89       	ldd	r30, Y+20	; 0x14
 382:	fd 89       	ldd	r31, Y+21	; 0x15
 384:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 386:	ea 89       	ldd	r30, Y+18	; 0x12
 388:	fb 89       	ldd	r31, Y+19	; 0x13
 38a:	80 81       	ld	r24, Z
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 390:	ea 89       	ldd	r30, Y+18	; 0x12
 392:	fb 89       	ldd	r31, Y+19	; 0x13
 394:	80 81       	ld	r24, Z
 396:	88 60       	ori	r24, 0x08	; 8
 398:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 39a:	ea 89       	ldd	r30, Y+18	; 0x12
 39c:	fb 89       	ldd	r31, Y+19	; 0x13
 39e:	80 81       	ld	r24, Z
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3a4:	ea 89       	ldd	r30, Y+18	; 0x12
 3a6:	fb 89       	ldd	r31, Y+19	; 0x13
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	80 83       	st	Z, r24
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3d2:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__data_end+0x10>
 3d6:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__data_end+0x11>
 3da:	80 81       	ld	r24, Z
 3dc:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end+0x16>
 3e0:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__data_end+0x17>
 3e4:	82 fd       	sbrc	r24, 2
 3e6:	12 c0       	rjmp	.+36     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3e8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3ea:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__data_end+0x19>
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3f2:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end+0x1a>
 3f6:	82 17       	cp	r24, r18
 3f8:	51 f0       	breq	.+20     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
      _rx_buffer[_rx_buffer_head] = c;
 3fa:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <__data_end+0x19>
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	e8 5d       	subi	r30, 0xD8	; 216
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 406:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__data_end+0x19>
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 40c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 46e:	88 e2       	ldi	r24, 0x28	; 40
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN14HardwareSerial9availableEv>
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	89 2b       	or	r24, r25
 47a:	09 f4       	brne	.+2      	; 0x47e <_Z17Serial0_availablev+0x10>
 47c:	20 e0       	ldi	r18, 0x00	; 0
}
 47e:	82 2f       	mov	r24, r18
 480:	08 95       	ret

00000482 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 482:	e8 e2       	ldi	r30, 0x28	; 40
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	13 82       	std	Z+3, r1	; 0x03
 488:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 48a:	88 ee       	ldi	r24, 0xE8	; 232
 48c:	93 e0       	ldi	r25, 0x03	; 3
 48e:	a0 e0       	ldi	r26, 0x00	; 0
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	84 83       	std	Z+4, r24	; 0x04
 494:	95 83       	std	Z+5, r25	; 0x05
 496:	a6 83       	std	Z+6, r26	; 0x06
 498:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	91 83       	std	Z+1, r25	; 0x01
 4a0:	80 83       	st	Z, r24
 4a2:	85 ec       	ldi	r24, 0xC5	; 197
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	95 87       	std	Z+13, r25	; 0x0d
 4a8:	84 87       	std	Z+12, r24	; 0x0c
 4aa:	84 ec       	ldi	r24, 0xC4	; 196
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	97 87       	std	Z+15, r25	; 0x0f
 4b0:	86 87       	std	Z+14, r24	; 0x0e
 4b2:	80 ec       	ldi	r24, 0xC0	; 192
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	91 8b       	std	Z+17, r25	; 0x11
 4b8:	80 8b       	std	Z+16, r24	; 0x10
 4ba:	81 ec       	ldi	r24, 0xC1	; 193
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	93 8b       	std	Z+19, r25	; 0x13
 4c0:	82 8b       	std	Z+18, r24	; 0x12
 4c2:	82 ec       	ldi	r24, 0xC2	; 194
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	95 8b       	std	Z+21, r25	; 0x15
 4c8:	84 8b       	std	Z+20, r24	; 0x14
 4ca:	86 ec       	ldi	r24, 0xC6	; 198
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	97 8b       	std	Z+23, r25	; 0x17
 4d0:	86 8b       	std	Z+22, r24	; 0x16
 4d2:	11 8e       	std	Z+25, r1	; 0x19
 4d4:	12 8e       	std	Z+26, r1	; 0x1a
 4d6:	13 8e       	std	Z+27, r1	; 0x1b
 4d8:	14 8e       	std	Z+28, r1	; 0x1c
 4da:	08 95       	ret

000004dc <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 4dc:	08 95       	ret

000004de <main>:

int main(void)
{
	init();
 4de:	0e 94 7f 03 	call	0x6fe	; 0x6fe <init>

	initVariant();
 4e2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4e6:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4ea:	c2 ee       	ldi	r28, 0xE2	; 226
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4ee:	0e 94 94 00 	call	0x128	; 0x128 <loop>
		if (serialEventRun) serialEventRun();
 4f2:	20 97       	sbiw	r28, 0x00	; 0
 4f4:	e1 f3       	breq	.-8      	; 0x4ee <main+0x10>
 4f6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z14serialEventRunv>
 4fa:	f9 cf       	rjmp	.-14     	; 0x4ee <main+0x10>

000004fc <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 4fc:	cf 92       	push	r12
 4fe:	df 92       	push	r13
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	6c 01       	movw	r12, r24
 50e:	7a 01       	movw	r14, r20
 510:	8b 01       	movw	r16, r22
 512:	c0 e0       	ldi	r28, 0x00	; 0
 514:	d0 e0       	ldi	r29, 0x00	; 0
 516:	ce 15       	cp	r28, r14
 518:	df 05       	cpc	r29, r15
 51a:	89 f0       	breq	.+34     	; 0x53e <_ZN5Print5writeEPKhj+0x42>
 51c:	d8 01       	movw	r26, r16
 51e:	6d 91       	ld	r22, X+
 520:	8d 01       	movw	r16, r26
 522:	d6 01       	movw	r26, r12
 524:	ed 91       	ld	r30, X+
 526:	fc 91       	ld	r31, X
 528:	01 90       	ld	r0, Z+
 52a:	f0 81       	ld	r31, Z
 52c:	e0 2d       	mov	r30, r0
 52e:	c6 01       	movw	r24, r12
 530:	09 95       	icall
 532:	89 2b       	or	r24, r25
 534:	11 f4       	brne	.+4      	; 0x53a <_ZN5Print5writeEPKhj+0x3e>
 536:	7e 01       	movw	r14, r28
 538:	02 c0       	rjmp	.+4      	; 0x53e <_ZN5Print5writeEPKhj+0x42>
 53a:	21 96       	adiw	r28, 0x01	; 1
 53c:	ec cf       	rjmp	.-40     	; 0x516 <_ZN5Print5writeEPKhj+0x1a>
 53e:	c7 01       	movw	r24, r14
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <_ZN5Print5writeEPKc>:
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	79 f0       	breq	.+30     	; 0x576 <_ZN5Print5writeEPKc+0x24>
 558:	fb 01       	movw	r30, r22
 55a:	01 90       	ld	r0, Z+
 55c:	00 20       	and	r0, r0
 55e:	e9 f7       	brne	.-6      	; 0x55a <_ZN5Print5writeEPKc+0x8>
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	af 01       	movw	r20, r30
 564:	46 1b       	sub	r20, r22
 566:	57 0b       	sbc	r21, r23
 568:	dc 01       	movw	r26, r24
 56a:	ed 91       	ld	r30, X+
 56c:	fc 91       	ld	r31, X
 56e:	02 80       	ldd	r0, Z+2	; 0x02
 570:	f3 81       	ldd	r31, Z+3	; 0x03
 572:	e0 2d       	mov	r30, r0
 574:	09 94       	ijmp
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret

0000057c <_ZN5Print7printlnEv>:
 57c:	69 e1       	ldi	r22, 0x19	; 25
 57e:	71 e0       	ldi	r23, 0x01	; 1
 580:	0c 94 a9 02 	jmp	0x552	; 0x552 <_ZN5Print5writeEPKc>

00000584 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 58e:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN5Print5writeEPKc>
 592:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 594:	ce 01       	movw	r24, r28
 596:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5Print7printlnEv>
  return n;
}
 59a:	80 0f       	add	r24, r16
 59c:	91 1f       	adc	r25, r17
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	2f 93       	push	r18
 5b4:	3f 93       	push	r19
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <timer0_millis>
 5c2:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <timer0_millis+0x1>
 5c6:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <timer0_millis+0x2>
 5ca:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <timer0_millis+0x3>
 5ce:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <timer0_fract>
 5d2:	23 e0       	ldi	r18, 0x03	; 3
 5d4:	23 0f       	add	r18, r19
 5d6:	2d 37       	cpi	r18, 0x7D	; 125
 5d8:	20 f4       	brcc	.+8      	; 0x5e2 <__vector_16+0x3a>
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	a1 1d       	adc	r26, r1
 5de:	b1 1d       	adc	r27, r1
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <__vector_16+0x44>
 5e2:	26 e8       	ldi	r18, 0x86	; 134
 5e4:	23 0f       	add	r18, r19
 5e6:	02 96       	adiw	r24, 0x02	; 2
 5e8:	a1 1d       	adc	r26, r1
 5ea:	b1 1d       	adc	r27, r1
 5ec:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <timer0_fract>
 5f0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <timer0_millis>
 5f4:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <timer0_millis+0x1>
 5f8:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <timer0_millis+0x2>
 5fc:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <timer0_millis+0x3>
 600:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <timer0_overflow_count>
 604:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <timer0_overflow_count+0x1>
 608:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <timer0_overflow_count+0x2>
 60c:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <timer0_overflow_count+0x3>
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	a1 1d       	adc	r26, r1
 614:	b1 1d       	adc	r27, r1
 616:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <timer0_overflow_count>
 61a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <timer0_overflow_count+0x1>
 61e:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <timer0_overflow_count+0x2>
 622:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <timer0_overflow_count+0x3>
 626:	bf 91       	pop	r27
 628:	af 91       	pop	r26
 62a:	9f 91       	pop	r25
 62c:	8f 91       	pop	r24
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <micros>:
 63c:	3f b7       	in	r19, 0x3f	; 63
 63e:	f8 94       	cli
 640:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <timer0_overflow_count>
 644:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <timer0_overflow_count+0x1>
 648:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <timer0_overflow_count+0x2>
 64c:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <timer0_overflow_count+0x3>
 650:	26 b5       	in	r18, 0x26	; 38
 652:	a8 9b       	sbis	0x15, 0	; 21
 654:	05 c0       	rjmp	.+10     	; 0x660 <micros+0x24>
 656:	2f 3f       	cpi	r18, 0xFF	; 255
 658:	19 f0       	breq	.+6      	; 0x660 <micros+0x24>
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	a1 1d       	adc	r26, r1
 65e:	b1 1d       	adc	r27, r1
 660:	3f bf       	out	0x3f, r19	; 63
 662:	ba 2f       	mov	r27, r26
 664:	a9 2f       	mov	r26, r25
 666:	98 2f       	mov	r25, r24
 668:	88 27       	eor	r24, r24
 66a:	82 0f       	add	r24, r18
 66c:	91 1d       	adc	r25, r1
 66e:	a1 1d       	adc	r26, r1
 670:	b1 1d       	adc	r27, r1
 672:	bc 01       	movw	r22, r24
 674:	cd 01       	movw	r24, r26
 676:	42 e0       	ldi	r20, 0x02	; 2
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	4a 95       	dec	r20
 682:	d1 f7       	brne	.-12     	; 0x678 <micros+0x3c>
 684:	08 95       	ret

00000686 <delay>:
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	6b 01       	movw	r12, r22
 698:	7c 01       	movw	r14, r24
 69a:	0e 94 1e 03 	call	0x63c	; 0x63c <micros>
 69e:	4b 01       	movw	r8, r22
 6a0:	5c 01       	movw	r10, r24
 6a2:	c1 14       	cp	r12, r1
 6a4:	d1 04       	cpc	r13, r1
 6a6:	e1 04       	cpc	r14, r1
 6a8:	f1 04       	cpc	r15, r1
 6aa:	01 f1       	breq	.+64     	; 0x6ec <delay+0x66>
 6ac:	0e 94 4f 04 	call	0x89e	; 0x89e <yield>
 6b0:	0e 94 1e 03 	call	0x63c	; 0x63c <micros>
 6b4:	dc 01       	movw	r26, r24
 6b6:	cb 01       	movw	r24, r22
 6b8:	88 19       	sub	r24, r8
 6ba:	99 09       	sbc	r25, r9
 6bc:	aa 09       	sbc	r26, r10
 6be:	bb 09       	sbc	r27, r11
 6c0:	88 3e       	cpi	r24, 0xE8	; 232
 6c2:	93 40       	sbci	r25, 0x03	; 3
 6c4:	a1 05       	cpc	r26, r1
 6c6:	b1 05       	cpc	r27, r1
 6c8:	60 f3       	brcs	.-40     	; 0x6a2 <delay+0x1c>
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	c2 1a       	sub	r12, r18
 6ce:	d1 08       	sbc	r13, r1
 6d0:	e1 08       	sbc	r14, r1
 6d2:	f1 08       	sbc	r15, r1
 6d4:	88 ee       	ldi	r24, 0xE8	; 232
 6d6:	88 0e       	add	r8, r24
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	98 1e       	adc	r9, r24
 6dc:	a1 1c       	adc	r10, r1
 6de:	b1 1c       	adc	r11, r1
 6e0:	c1 14       	cp	r12, r1
 6e2:	d1 04       	cpc	r13, r1
 6e4:	e1 04       	cpc	r14, r1
 6e6:	f1 04       	cpc	r15, r1
 6e8:	19 f7       	brne	.-58     	; 0x6b0 <delay+0x2a>
 6ea:	db cf       	rjmp	.-74     	; 0x6a2 <delay+0x1c>
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	9f 90       	pop	r9
 6fa:	8f 90       	pop	r8
 6fc:	08 95       	ret

000006fe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6fe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 700:	84 b5       	in	r24, 0x24	; 36
 702:	82 60       	ori	r24, 0x02	; 2
 704:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 706:	84 b5       	in	r24, 0x24	; 36
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 70c:	85 b5       	in	r24, 0x25	; 37
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 712:	85 b5       	in	r24, 0x25	; 37
 714:	81 60       	ori	r24, 0x01	; 1
 716:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 718:	ee e6       	ldi	r30, 0x6E	; 110
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 722:	e1 e8       	ldi	r30, 0x81	; 129
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 728:	80 81       	ld	r24, Z
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 72e:	80 81       	ld	r24, Z
 730:	81 60       	ori	r24, 0x01	; 1
 732:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 734:	e0 e8       	ldi	r30, 0x80	; 128
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	81 60       	ori	r24, 0x01	; 1
 73c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 73e:	e1 eb       	ldi	r30, 0xB1	; 177
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	84 60       	ori	r24, 0x04	; 4
 746:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 748:	e0 eb       	ldi	r30, 0xB0	; 176
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	81 60       	ori	r24, 0x01	; 1
 750:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 752:	ea e7       	ldi	r30, 0x7A	; 122
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	84 60       	ori	r24, 0x04	; 4
 75a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 75c:	80 81       	ld	r24, Z
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 762:	80 81       	ld	r24, Z
 764:	81 60       	ori	r24, 0x01	; 1
 766:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 768:	80 81       	ld	r24, Z
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 76e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 772:	08 95       	ret

00000774 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 774:	83 30       	cpi	r24, 0x03	; 3
 776:	81 f0       	breq	.+32     	; 0x798 <turnOffPWM+0x24>
 778:	28 f4       	brcc	.+10     	; 0x784 <turnOffPWM+0x10>
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	99 f0       	breq	.+38     	; 0x7a4 <turnOffPWM+0x30>
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	a1 f0       	breq	.+40     	; 0x7aa <turnOffPWM+0x36>
 782:	08 95       	ret
 784:	87 30       	cpi	r24, 0x07	; 7
 786:	a9 f0       	breq	.+42     	; 0x7b2 <turnOffPWM+0x3e>
 788:	88 30       	cpi	r24, 0x08	; 8
 78a:	b9 f0       	breq	.+46     	; 0x7ba <turnOffPWM+0x46>
 78c:	84 30       	cpi	r24, 0x04	; 4
 78e:	d1 f4       	brne	.+52     	; 0x7c4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 790:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 794:	8f 7d       	andi	r24, 0xDF	; 223
 796:	03 c0       	rjmp	.+6      	; 0x79e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 798:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 79c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 79e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 7a2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 7a4:	84 b5       	in	r24, 0x24	; 36
 7a6:	8f 77       	andi	r24, 0x7F	; 127
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 7aa:	84 b5       	in	r24, 0x24	; 36
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	84 bd       	out	0x24, r24	; 36
 7b0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 7b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7b6:	8f 77       	andi	r24, 0x7F	; 127
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 7ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7be:	8f 7d       	andi	r24, 0xDF	; 223
 7c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7c4:	08 95       	ret

000007c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	fc 01       	movw	r30, r24
 7ce:	e4 58       	subi	r30, 0x84	; 132
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 7d4:	fc 01       	movw	r30, r24
 7d6:	e0 57       	subi	r30, 0x70	; 112
 7d8:	ff 4f       	sbci	r31, 0xFF	; 255
 7da:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 7dc:	88 23       	and	r24, r24
 7de:	61 f1       	breq	.+88     	; 0x838 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	fc 01       	movw	r30, r24
 7e8:	e2 55       	subi	r30, 0x52	; 82
 7ea:	ff 4f       	sbci	r31, 0xFF	; 255
 7ec:	c5 91       	lpm	r28, Z+
 7ee:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 7f0:	fc 01       	movw	r30, r24
 7f2:	ec 55       	subi	r30, 0x5C	; 92
 7f4:	ff 4f       	sbci	r31, 0xFF	; 255
 7f6:	a5 91       	lpm	r26, Z+
 7f8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 7fa:	61 11       	cpse	r22, r1
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 7fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
 800:	f8 94       	cli
		*reg &= ~bit;
 802:	88 81       	ld	r24, Y
 804:	20 95       	com	r18
 806:	82 23       	and	r24, r18
 808:	88 83       	st	Y, r24
		*out &= ~bit;
 80a:	ec 91       	ld	r30, X
 80c:	2e 23       	and	r18, r30
 80e:	0b c0       	rjmp	.+22     	; 0x826 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 810:	62 30       	cpi	r22, 0x02	; 2
 812:	61 f4       	brne	.+24     	; 0x82c <pinMode+0x66>
		uint8_t oldSREG = SREG;
 814:	9f b7       	in	r25, 0x3f	; 63
                cli();
 816:	f8 94       	cli
		*reg &= ~bit;
 818:	38 81       	ld	r19, Y
 81a:	82 2f       	mov	r24, r18
 81c:	80 95       	com	r24
 81e:	83 23       	and	r24, r19
 820:	88 83       	st	Y, r24
		*out |= bit;
 822:	ec 91       	ld	r30, X
 824:	2e 2b       	or	r18, r30
 826:	2c 93       	st	X, r18
		SREG = oldSREG;
 828:	9f bf       	out	0x3f, r25	; 63
 82a:	06 c0       	rjmp	.+12     	; 0x838 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 82c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 82e:	f8 94       	cli
		*reg |= bit;
 830:	e8 81       	ld	r30, Y
 832:	2e 2b       	or	r18, r30
 834:	28 83       	st	Y, r18
		SREG = oldSREG;
 836:	8f bf       	out	0x3f, r24	; 63
	}
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 844:	28 2f       	mov	r18, r24
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	e8 59       	subi	r30, 0x98	; 152
 84c:	ff 4f       	sbci	r31, 0xFF	; 255
 84e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 850:	f9 01       	movw	r30, r18
 852:	e4 58       	subi	r30, 0x84	; 132
 854:	ff 4f       	sbci	r31, 0xFF	; 255
 856:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 858:	f9 01       	movw	r30, r18
 85a:	e0 57       	subi	r30, 0x70	; 112
 85c:	ff 4f       	sbci	r31, 0xFF	; 255
 85e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 860:	cc 23       	and	r28, r28
 862:	c9 f0       	breq	.+50     	; 0x896 <digitalWrite+0x58>
 864:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 866:	81 11       	cpse	r24, r1
 868:	0e 94 ba 03 	call	0x774	; 0x774 <turnOffPWM>

	out = portOutputRegister(port);
 86c:	ec 2f       	mov	r30, r28
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	ee 0f       	add	r30, r30
 872:	ff 1f       	adc	r31, r31
 874:	ec 55       	subi	r30, 0x5C	; 92
 876:	ff 4f       	sbci	r31, 0xFF	; 255
 878:	a5 91       	lpm	r26, Z+
 87a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 87c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 87e:	f8 94       	cli

	if (val == LOW) {
 880:	11 11       	cpse	r17, r1
 882:	05 c0       	rjmp	.+10     	; 0x88e <digitalWrite+0x50>
		*out &= ~bit;
 884:	9c 91       	ld	r25, X
 886:	ed 2f       	mov	r30, r29
 888:	e0 95       	com	r30
 88a:	e9 23       	and	r30, r25
 88c:	02 c0       	rjmp	.+4      	; 0x892 <digitalWrite+0x54>
	} else {
		*out |= bit;
 88e:	ec 91       	ld	r30, X
 890:	ed 2b       	or	r30, r29
 892:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 894:	8f bf       	out	0x3f, r24	; 63
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	08 95       	ret

0000089e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 89e:	08 95       	ret

000008a0 <__udivmodsi4>:
 8a0:	a1 e2       	ldi	r26, 0x21	; 33
 8a2:	1a 2e       	mov	r1, r26
 8a4:	aa 1b       	sub	r26, r26
 8a6:	bb 1b       	sub	r27, r27
 8a8:	fd 01       	movw	r30, r26
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__udivmodsi4_ep>

000008ac <__udivmodsi4_loop>:
 8ac:	aa 1f       	adc	r26, r26
 8ae:	bb 1f       	adc	r27, r27
 8b0:	ee 1f       	adc	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	a2 17       	cp	r26, r18
 8b6:	b3 07       	cpc	r27, r19
 8b8:	e4 07       	cpc	r30, r20
 8ba:	f5 07       	cpc	r31, r21
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__udivmodsi4_ep>
 8be:	a2 1b       	sub	r26, r18
 8c0:	b3 0b       	sbc	r27, r19
 8c2:	e4 0b       	sbc	r30, r20
 8c4:	f5 0b       	sbc	r31, r21

000008c6 <__udivmodsi4_ep>:
 8c6:	66 1f       	adc	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	1a 94       	dec	r1
 8d0:	69 f7       	brne	.-38     	; 0x8ac <__udivmodsi4_loop>
 8d2:	60 95       	com	r22
 8d4:	70 95       	com	r23
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	9b 01       	movw	r18, r22
 8dc:	ac 01       	movw	r20, r24
 8de:	bd 01       	movw	r22, r26
 8e0:	cf 01       	movw	r24, r30
 8e2:	08 95       	ret

000008e4 <__tablejump2__>:
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	05 90       	lpm	r0, Z+
 8ea:	f4 91       	lpm	r31, Z
 8ec:	e0 2d       	mov	r30, r0
 8ee:	09 94       	ijmp

000008f0 <_exit>:
 8f0:	f8 94       	cli

000008f2 <__stop_program>:
 8f2:	ff cf       	rjmp	.-2      	; 0x8f2 <__stop_program>
