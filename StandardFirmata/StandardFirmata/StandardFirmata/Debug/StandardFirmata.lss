
StandardFirmata.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002fbc  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  008001ca  008001ca  0000311a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010f1d  00000000  00000000  0000382c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bbe  00000000  00000000  00014749  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c11  00000000  00000000  00017307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013f8  00000000  00000000  0001af18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030f2  00000000  00000000  0001c310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007861  00000000  00000000  0001f402  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a0  00000000  00000000  00026c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_11>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__vector_18>
      4c:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_19>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__vector_24>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	ee 02       	muls	r30, r30
      6a:	19 03       	fmul	r17, r17
      6c:	e2 02       	muls	r30, r18
      6e:	2d 03       	fmul	r18, r21
      70:	43 03       	mulsu	r20, r19
      72:	65 03       	mulsu	r22, r21
      74:	5f 03       	fmul	r21, r23
      76:	65 03       	mulsu	r22, r21
      78:	65 03       	mulsu	r22, r21
      7a:	65 03       	mulsu	r22, r21
      7c:	83 03       	fmuls	r16, r19
      7e:	00 03       	mulsu	r16, r16
      80:	8b 07       	cpc	r24, r27
      82:	a7 07       	cpc	r26, r23
      84:	b1 06       	cpc	r11, r17
      86:	a7 07       	cpc	r26, r23
      88:	24 07       	cpc	r18, r20
      8a:	a7 07       	cpc	r26, r23
      8c:	8f 06       	cpc	r8, r31
      8e:	41 06       	cpc	r4, r17
      90:	a7 07       	cpc	r26, r23
      92:	a7 07       	cpc	r26, r23
      94:	a7 07       	cpc	r26, r23
      96:	a7 07       	cpc	r26, r23
      98:	a7 07       	cpc	r26, r23
      9a:	46 05       	cpc	r20, r6
      9c:	a7 07       	cpc	r26, r23
      9e:	27 06       	cpc	r2, r23
      a0:	a7 07       	cpc	r26, r23
      a2:	7b 06       	cpc	r7, r27

000000a4 <__trampolines_end>:
      a4:	00 00       	nop
      a6:	00 08       	sbc	r0, r0
      a8:	00 02       	muls	r16, r16
      aa:	01 00       	.word	0x0001	; ????
      ac:	00 03       	mulsu	r16, r16
      ae:	04 07       	cpc	r16, r20
	...

000000b8 <digital_pin_to_bit_mask_PGM>:
      b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c8:	04 08 10 20                                         ... 

000000cc <digital_pin_to_port_PGM>:
      cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      dc:	03 03 03 03                                         ....

000000e0 <port_to_output_PGM>:
      e0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ea <port_to_mode_PGM>:
      ea:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f4 <__ctors_start>:
      f4:	a5 04       	cpc	r10, r5
      f6:	6e 0e       	add	r6, r30
      f8:	b2 11       	cpse	r27, r2
      fa:	43 13       	cpse	r20, r19

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d8 e0       	ldi	r29, 0x08	; 8
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	ec eb       	ldi	r30, 0xBC	; 188
     110:	ff e2       	ldi	r31, 0x2F	; 47
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	aa 3c       	cpi	r26, 0xCA	; 202
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	24 e0       	ldi	r18, 0x04	; 4
     120:	aa ec       	ldi	r26, 0xCA	; 202
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a9 3b       	cpi	r26, 0xB9	; 185
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	ce e7       	ldi	r28, 0x7E	; 126
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__tablejump2__>
     13e:	ca 37       	cpi	r28, 0x7A	; 122
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 49 08 	call	0x1092	; 0x1092 <main>
     148:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_Z19setPinValueCallbackhi>:
 * are not tracking the digital port state.
 * Can only be used on pins configured as OUTPUT.
 * Cannot be used to enable pull-ups on Digital INPUT pins.
 */
void setPinValueCallback(byte pin, int value)
{
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
  if (pin < TOTAL_PINS && IS_PIN_DIGITAL(pin)) {
     15e:	9e ef       	ldi	r25, 0xFE	; 254
     160:	98 0f       	add	r25, r24
     162:	92 31       	cpi	r25, 0x12	; 18
     164:	d0 f4       	brcc	.+52     	; 0x19a <_Z19setPinValueCallbackhi+0x4a>
     166:	06 2f       	mov	r16, r22
     168:	18 2f       	mov	r17, r24
    if (Firmata.getPinMode(pin) == OUTPUT) {
     16a:	68 2f       	mov	r22, r24
     16c:	88 e9       	ldi	r24, 0x98	; 152
     16e:	92 e0       	ldi	r25, 0x02	; 2
     170:	79 83       	std	Y+1, r23	; 0x01
     172:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     176:	59 81       	ldd	r21, Y+1	; 0x01
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	79 f4       	brne	.+30     	; 0x19a <_Z19setPinValueCallbackhi+0x4a>
      Firmata.setPinState(pin, value);
     17c:	40 2f       	mov	r20, r16
     17e:	61 2f       	mov	r22, r17
     180:	88 e9       	ldi	r24, 0x98	; 152
     182:	92 e0       	ldi	r25, 0x02	; 2
     184:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN12FirmataClass11setPinStateEhi>
      digitalWrite(PIN_TO_DIGITAL(pin), value);
     188:	60 2f       	mov	r22, r16
     18a:	81 2f       	mov	r24, r17
    }
  }
}
     18c:	0f 90       	pop	r0
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
void setPinValueCallback(byte pin, int value)
{
  if (pin < TOTAL_PINS && IS_PIN_DIGITAL(pin)) {
    if (Firmata.getPinMode(pin) == OUTPUT) {
      Firmata.setPinState(pin, value);
      digitalWrite(PIN_TO_DIGITAL(pin), value);
     196:	0c 94 36 0a 	jmp	0x146c	; 0x146c <digitalWrite>
    }
  }
}
     19a:	0f 90       	pop	r0
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret

000001a6 <_Z19analogWriteCallbackhi>:

void analogWriteCallback(byte pin, int value)
{
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
  if (pin < TOTAL_PINS) {
     1ac:	84 31       	cpi	r24, 0x14	; 20
     1ae:	b8 f5       	brcc	.+110    	; 0x21e <_Z19analogWriteCallbackhi+0x78>
     1b0:	8b 01       	movw	r16, r22
     1b2:	c8 2f       	mov	r28, r24
    switch (Firmata.getPinMode(pin)) {
     1b4:	68 2f       	mov	r22, r24
     1b6:	88 e9       	ldi	r24, 0x98	; 152
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     1be:	83 30       	cpi	r24, 0x03	; 3
     1c0:	f9 f0       	breq	.+62     	; 0x200 <_Z19analogWriteCallbackhi+0x5a>
     1c2:	84 30       	cpi	r24, 0x04	; 4
     1c4:	61 f5       	brne	.+88     	; 0x21e <_Z19analogWriteCallbackhi+0x78>
      case PIN_MODE_SERVO:
        if (IS_PIN_DIGITAL(pin))
     1c6:	8e ef       	ldi	r24, 0xFE	; 254
     1c8:	8c 0f       	add	r24, r28
     1ca:	82 31       	cpi	r24, 0x12	; 18
     1cc:	80 f4       	brcc	.+32     	; 0x1ee <_Z19analogWriteCallbackhi+0x48>
          servos[servoPinMap[pin]].write(value);
     1ce:	ec 2f       	mov	r30, r28
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	e7 52       	subi	r30, 0x27	; 39
     1d4:	fe 4f       	sbci	r31, 0xFE	; 254
     1d6:	80 81       	ld	r24, Z
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	9c 01       	movw	r18, r24
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	82 0f       	add	r24, r18
     1e2:	93 1f       	adc	r25, r19
     1e4:	b8 01       	movw	r22, r16
     1e6:	83 51       	subi	r24, 0x13	; 19
     1e8:	9e 4f       	sbci	r25, 0xFE	; 254
     1ea:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN5Servo5writeEi>
        Firmata.setPinState(pin, value);
     1ee:	a8 01       	movw	r20, r16
     1f0:	6c 2f       	mov	r22, r28
     1f2:	88 e9       	ldi	r24, 0x98	; 152
     1f4:	92 e0       	ldi	r25, 0x02	; 2
          analogWrite(PIN_TO_PWM(pin), value);
        Firmata.setPinState(pin, value);
        break;
    }
  }
}
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
  if (pin < TOTAL_PINS) {
    switch (Firmata.getPinMode(pin)) {
      case PIN_MODE_SERVO:
        if (IS_PIN_DIGITAL(pin))
          servos[servoPinMap[pin]].write(value);
        Firmata.setPinState(pin, value);
     1fc:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_ZN12FirmataClass11setPinStateEhi>
        break;
      case PIN_MODE_PWM:
        if (IS_PIN_PWM(pin))
     200:	c3 30       	cpi	r28, 0x03	; 3
     202:	41 f0       	breq	.+16     	; 0x214 <_Z19analogWriteCallbackhi+0x6e>
     204:	8b ef       	ldi	r24, 0xFB	; 251
     206:	8c 0f       	add	r24, r28
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	20 f0       	brcs	.+8      	; 0x214 <_Z19analogWriteCallbackhi+0x6e>
     20c:	87 ef       	ldi	r24, 0xF7	; 247
     20e:	8c 0f       	add	r24, r28
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	68 f7       	brcc	.-38     	; 0x1ee <_Z19analogWriteCallbackhi+0x48>
          analogWrite(PIN_TO_PWM(pin), value);
     214:	b8 01       	movw	r22, r16
     216:	8c 2f       	mov	r24, r28
     218:	0e 94 72 09 	call	0x12e4	; 0x12e4 <analogWrite>
     21c:	e8 cf       	rjmp	.-48     	; 0x1ee <_Z19analogWriteCallbackhi+0x48>
        Firmata.setPinState(pin, value);
        break;
    }
  }
}
     21e:	cf 91       	pop	r28
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	08 95       	ret

00000226 <_Z20digitalWriteCallbackhi>:

void digitalWriteCallback(byte port, int value)
{
     226:	df 92       	push	r13
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
  byte pin, lastPin, pinValue, mask = 1, pinWriteMask = 0;

  if (port < TOTAL_PORTS) {
     234:	83 30       	cpi	r24, 0x03	; 3
     236:	08 f0       	brcs	.+2      	; 0x23a <_Z20digitalWriteCallbackhi+0x14>
     238:	8f c0       	rjmp	.+286    	; 0x358 <_Z20digitalWriteCallbackhi+0x132>
    // create a mask of the pins on this port that are writable.
    lastPin = port * 8 + 8;
     23a:	98 2f       	mov	r25, r24
     23c:	99 0f       	add	r25, r25
     23e:	99 0f       	add	r25, r25
     240:	99 0f       	add	r25, r25
     242:	28 e0       	ldi	r18, 0x08	; 8
     244:	e2 2e       	mov	r14, r18
     246:	e9 0e       	add	r14, r25
     248:	94 e1       	ldi	r25, 0x14	; 20
     24a:	9e 15       	cp	r25, r14
     24c:	10 f4       	brcc	.+4      	; 0x252 <_Z20digitalWriteCallbackhi+0x2c>
     24e:	94 e1       	ldi	r25, 0x14	; 20
     250:	e9 2e       	mov	r14, r25
     252:	16 2f       	mov	r17, r22
     254:	08 2f       	mov	r16, r24
    if (lastPin > TOTAL_PINS) lastPin = TOTAL_PINS;
    for (pin = port * 8; pin < lastPin; pin++) {
     256:	d8 2f       	mov	r29, r24
     258:	dd 0f       	add	r29, r29
     25a:	dd 0f       	add	r29, r29
     25c:	dd 0f       	add	r29, r29
  }
}

void digitalWriteCallback(byte port, int value)
{
  byte pin, lastPin, pinValue, mask = 1, pinWriteMask = 0;
     25e:	c0 e0       	ldi	r28, 0x00	; 0
     260:	dd 24       	eor	r13, r13
     262:	d3 94       	inc	r13

  if (port < TOTAL_PORTS) {
    // create a mask of the pins on this port that are writable.
    lastPin = port * 8 + 8;
    if (lastPin > TOTAL_PINS) lastPin = TOTAL_PINS;
    for (pin = port * 8; pin < lastPin; pin++) {
     264:	de 15       	cp	r29, r14
     266:	58 f5       	brcc	.+86     	; 0x2be <_Z20digitalWriteCallbackhi+0x98>
     268:	8e ef       	ldi	r24, 0xFE	; 254
     26a:	8d 0f       	add	r24, r29
      // do not disturb non-digital pins (eg, Rx & Tx)
      if (IS_PIN_DIGITAL(pin)) {
     26c:	82 31       	cpi	r24, 0x12	; 18
     26e:	20 f5       	brcc	.+72     	; 0x2b8 <_Z20digitalWriteCallbackhi+0x92>
        // do not touch pins in PWM, ANALOG, SERVO or other modes
        if (Firmata.getPinMode(pin) == OUTPUT || Firmata.getPinMode(pin) == INPUT) {
     270:	6d 2f       	mov	r22, r29
     272:	88 e9       	ldi	r24, 0x98	; 152
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	39 f0       	breq	.+14     	; 0x28c <_Z20digitalWriteCallbackhi+0x66>
     27e:	6d 2f       	mov	r22, r29
     280:	88 e9       	ldi	r24, 0x98	; 152
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     288:	81 11       	cpse	r24, r1
     28a:	16 c0       	rjmp	.+44     	; 0x2b8 <_Z20digitalWriteCallbackhi+0x92>
          pinValue = ((byte)value & mask) ? 1 : 0;
     28c:	ff 24       	eor	r15, r15
     28e:	f3 94       	inc	r15
     290:	8d 2d       	mov	r24, r13
     292:	81 23       	and	r24, r17
     294:	09 f4       	brne	.+2      	; 0x298 <_Z20digitalWriteCallbackhi+0x72>
     296:	f1 2c       	mov	r15, r1
          if (Firmata.getPinMode(pin) == OUTPUT) {
     298:	6d 2f       	mov	r22, r29
     29a:	88 e9       	ldi	r24, 0x98	; 152
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <_Z20digitalWriteCallbackhi+0x82>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z20digitalWriteCallbackhi+0x104>
            pinWriteMask |= mask;
     2a8:	cd 29       	or	r28, r13
#else
            // only write to the INPUT pin to enable pullups if Arduino v1.0.0 or earlier
            pinWriteMask |= mask;
#endif
          }
          Firmata.setPinState(pin, pinValue);
     2aa:	4f 2d       	mov	r20, r15
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	6d 2f       	mov	r22, r29
     2b0:	88 e9       	ldi	r24, 0x98	; 152
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN12FirmataClass11setPinStateEhi>
        }
      }
      mask = mask << 1;
     2b8:	dd 0c       	add	r13, r13

  if (port < TOTAL_PORTS) {
    // create a mask of the pins on this port that are writable.
    lastPin = port * 8 + 8;
    if (lastPin > TOTAL_PINS) lastPin = TOTAL_PINS;
    for (pin = port * 8; pin < lastPin; pin++) {
     2ba:	df 5f       	subi	r29, 0xFF	; 255
     2bc:	d3 cf       	rjmp	.-90     	; 0x264 <_Z20digitalWriteCallbackhi+0x3e>

static inline unsigned char writePort(byte, byte, byte) __attribute__((always_inline, unused));
static inline unsigned char writePort(byte port, byte value, byte bitmask)
{
#if defined(ARDUINO_PINOUT_OPTIMIZE)
  if (port == 0) {
     2be:	01 11       	cpse	r16, r1
     2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <_Z20digitalWriteCallbackhi+0xb0>
    bitmask = bitmask & 0xFC;  // do not touch Tx & Rx pins
     2c2:	cc 7f       	andi	r28, 0xFC	; 252
    byte valD = value & bitmask;
    byte maskD = ~bitmask;
    cli();
     2c4:	f8 94       	cli
    PORTD = (PORTD & maskD) | valD;
     2c6:	8b b1       	in	r24, 0x0b	; 11
{
#if defined(ARDUINO_PINOUT_OPTIMIZE)
  if (port == 0) {
    bitmask = bitmask & 0xFC;  // do not touch Tx & Rx pins
    byte valD = value & bitmask;
    byte maskD = ~bitmask;
     2c8:	6c 2f       	mov	r22, r28
     2ca:	60 95       	com	r22
    cli();
    PORTD = (PORTD & maskD) | valD;
     2cc:	68 23       	and	r22, r24
static inline unsigned char writePort(byte port, byte value, byte bitmask)
{
#if defined(ARDUINO_PINOUT_OPTIMIZE)
  if (port == 0) {
    bitmask = bitmask & 0xFC;  // do not touch Tx & Rx pins
    byte valD = value & bitmask;
     2ce:	c1 23       	and	r28, r17
    byte maskD = ~bitmask;
    cli();
    PORTD = (PORTD & maskD) | valD;
     2d0:	c6 2b       	or	r28, r22
     2d2:	cb b9       	out	0x0b, r28	; 11
     2d4:	28 c0       	rjmp	.+80     	; 0x326 <_Z20digitalWriteCallbackhi+0x100>
    sei();
  } else if (port == 1) {
     2d6:	01 30       	cpi	r16, 0x01	; 1
     2d8:	c9 f4       	brne	.+50     	; 0x30c <_Z20digitalWriteCallbackhi+0xe6>
    byte valB = (value & bitmask) & 0x3F;
     2da:	1c 23       	and	r17, r28
    byte valC = (value & bitmask) >> 6;
    byte maskB = ~(bitmask & 0x3F);
    byte maskC = ~((bitmask & 0xC0) >> 6);
    cli();
     2dc:	f8 94       	cli
    PORTB = (PORTB & maskB) | valB;
     2de:	95 b1       	in	r25, 0x05	; 5
    PORTD = (PORTD & maskD) | valD;
    sei();
  } else if (port == 1) {
    byte valB = (value & bitmask) & 0x3F;
    byte valC = (value & bitmask) >> 6;
    byte maskB = ~(bitmask & 0x3F);
     2e0:	8c 2f       	mov	r24, r28
     2e2:	8f 73       	andi	r24, 0x3F	; 63
     2e4:	80 95       	com	r24
    byte maskC = ~((bitmask & 0xC0) >> 6);
    cli();
    PORTB = (PORTB & maskB) | valB;
     2e6:	89 23       	and	r24, r25
    byte maskD = ~bitmask;
    cli();
    PORTD = (PORTD & maskD) | valD;
    sei();
  } else if (port == 1) {
    byte valB = (value & bitmask) & 0x3F;
     2e8:	91 2f       	mov	r25, r17
     2ea:	9f 73       	andi	r25, 0x3F	; 63
    byte valC = (value & bitmask) >> 6;
    byte maskB = ~(bitmask & 0x3F);
    byte maskC = ~((bitmask & 0xC0) >> 6);
    cli();
    PORTB = (PORTB & maskB) | valB;
     2ec:	89 2b       	or	r24, r25
     2ee:	85 b9       	out	0x05, r24	; 5
    PORTC = (PORTC & maskC) | valC;
     2f0:	88 b1       	in	r24, 0x08	; 8
    cli();
    PORTD = (PORTD & maskD) | valD;
    sei();
  } else if (port == 1) {
    byte valB = (value & bitmask) & 0x3F;
    byte valC = (value & bitmask) >> 6;
     2f2:	12 95       	swap	r17
     2f4:	16 95       	lsr	r17
     2f6:	16 95       	lsr	r17
     2f8:	13 70       	andi	r17, 0x03	; 3
    byte maskB = ~(bitmask & 0x3F);
    byte maskC = ~((bitmask & 0xC0) >> 6);
     2fa:	c2 95       	swap	r28
     2fc:	c6 95       	lsr	r28
     2fe:	c6 95       	lsr	r28
     300:	c3 70       	andi	r28, 0x03	; 3
     302:	c0 95       	com	r28
    cli();
    PORTB = (PORTB & maskB) | valB;
    PORTC = (PORTC & maskC) | valC;
     304:	c8 23       	and	r28, r24
     306:	1c 2b       	or	r17, r28
     308:	18 b9       	out	0x08, r17	; 8
     30a:	0d c0       	rjmp	.+26     	; 0x326 <_Z20digitalWriteCallbackhi+0x100>
    sei();
  } else if (port == 2) {
    bitmask = bitmask & 0x0F;
     30c:	cf 70       	andi	r28, 0x0F	; 15
    byte valC = (value & bitmask) << 2;
    byte maskC = ~(bitmask << 2);
    cli();
     30e:	f8 94       	cli
    PORTC = (PORTC & maskC) | valC;
     310:	88 b1       	in	r24, 0x08	; 8
    PORTC = (PORTC & maskC) | valC;
    sei();
  } else if (port == 2) {
    bitmask = bitmask & 0x0F;
    byte valC = (value & bitmask) << 2;
    byte maskC = ~(bitmask << 2);
     312:	6c 2f       	mov	r22, r28
     314:	66 0f       	add	r22, r22
     316:	66 0f       	add	r22, r22
     318:	60 95       	com	r22
    cli();
    PORTC = (PORTC & maskC) | valC;
     31a:	68 23       	and	r22, r24
    PORTB = (PORTB & maskB) | valB;
    PORTC = (PORTC & maskC) | valC;
    sei();
  } else if (port == 2) {
    bitmask = bitmask & 0x0F;
    byte valC = (value & bitmask) << 2;
     31c:	c1 23       	and	r28, r17
     31e:	cc 0f       	add	r28, r28
     320:	cc 0f       	add	r28, r28
    byte maskC = ~(bitmask << 2);
    cli();
    PORTC = (PORTC & maskC) | valC;
     322:	c6 2b       	or	r28, r22
     324:	c8 b9       	out	0x08, r28	; 8
    sei();
     326:	78 94       	sei
     328:	17 c0       	rjmp	.+46     	; 0x358 <_Z20digitalWriteCallbackhi+0x132>
        // do not touch pins in PWM, ANALOG, SERVO or other modes
        if (Firmata.getPinMode(pin) == OUTPUT || Firmata.getPinMode(pin) == INPUT) {
          pinValue = ((byte)value & mask) ? 1 : 0;
          if (Firmata.getPinMode(pin) == OUTPUT) {
            pinWriteMask |= mask;
          } else if (Firmata.getPinMode(pin) == INPUT && pinValue == 1 && Firmata.getPinState(pin) != 1) {
     32a:	6d 2f       	mov	r22, r29
     32c:	88 e9       	ldi	r24, 0x98	; 152
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     334:	81 11       	cpse	r24, r1
     336:	b9 cf       	rjmp	.-142    	; 0x2aa <_Z20digitalWriteCallbackhi+0x84>
     338:	ff 20       	and	r15, r15
     33a:	09 f4       	brne	.+2      	; 0x33e <_Z20digitalWriteCallbackhi+0x118>
     33c:	b6 cf       	rjmp	.-148    	; 0x2aa <_Z20digitalWriteCallbackhi+0x84>
     33e:	6d 2f       	mov	r22, r29
     340:	88 e9       	ldi	r24, 0x98	; 152
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	09 f4       	brne	.+2      	; 0x34e <_Z20digitalWriteCallbackhi+0x128>
     34c:	ae cf       	rjmp	.-164    	; 0x2aa <_Z20digitalWriteCallbackhi+0x84>
            // only handle INPUT here for backwards compatibility
#if ARDUINO > 100
            pinMode(pin, INPUT_PULLUP);
     34e:	62 e0       	ldi	r22, 0x02	; 2
     350:	8d 2f       	mov	r24, r29
     352:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
     356:	a9 cf       	rjmp	.-174    	; 0x2aa <_Z20digitalWriteCallbackhi+0x84>
      }
      mask = mask << 1;
    }
    writePort(port, (byte)value, pinWriteMask);
  }
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	08 95       	ret

00000368 <_Z20reportAnalogCallbackhi>:
/* sets bits in a bit array (int) to toggle the reporting of the analogIns
 */
//void FirmataClass::setAnalogPinReporting(byte pin, byte state) {
//}
void reportAnalogCallback(byte analogPin, int value)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	1f 92       	push	r1
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
  if (analogPin < TOTAL_ANALOG_PINS) {
     372:	86 30       	cpi	r24, 0x06	; 6
     374:	a8 f5       	brcc	.+106    	; 0x3e0 <_Z20reportAnalogCallbackhi+0x78>
     376:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <analogInputsToReport>
     37a:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <analogInputsToReport+0x1>
    if (value == 0) {
      analogInputsToReport = analogInputsToReport & ~ (1 << analogPin);
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
//void FirmataClass::setAnalogPinReporting(byte pin, byte state) {
//}
void reportAnalogCallback(byte analogPin, int value)
{
  if (analogPin < TOTAL_ANALOG_PINS) {
    if (value == 0) {
     382:	67 2b       	or	r22, r23
     384:	81 f4       	brne	.+32     	; 0x3a6 <_Z20reportAnalogCallbackhi+0x3e>
      analogInputsToReport = analogInputsToReport & ~ (1 << analogPin);
     386:	b9 01       	movw	r22, r18
     388:	02 c0       	rjmp	.+4      	; 0x38e <_Z20reportAnalogCallbackhi+0x26>
     38a:	66 0f       	add	r22, r22
     38c:	77 1f       	adc	r23, r23
     38e:	8a 95       	dec	r24
     390:	e2 f7       	brpl	.-8      	; 0x38a <_Z20reportAnalogCallbackhi+0x22>
     392:	cb 01       	movw	r24, r22
     394:	80 95       	com	r24
     396:	90 95       	com	r25
     398:	84 23       	and	r24, r20
     39a:	95 23       	and	r25, r21
     39c:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <analogInputsToReport+0x1>
     3a0:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <analogInputsToReport>
     3a4:	1d c0       	rjmp	.+58     	; 0x3e0 <_Z20reportAnalogCallbackhi+0x78>
    } else {
      analogInputsToReport = analogInputsToReport | (1 << analogPin);
     3a6:	08 2e       	mov	r0, r24
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_Z20reportAnalogCallbackhi+0x46>
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <_Z20reportAnalogCallbackhi+0x42>
     3b2:	24 2b       	or	r18, r20
     3b4:	35 2b       	or	r19, r21
     3b6:	30 93 8e 02 	sts	0x028E, r19	; 0x80028e <analogInputsToReport+0x1>
     3ba:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <analogInputsToReport>
      // prevent during system reset or all analog pin values will be reported
      // which may report noise for unconnected analog pins
      if (!isResetting) {
     3be:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__data_end>
     3c2:	91 11       	cpse	r25, r1
     3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <_Z20reportAnalogCallbackhi+0x78>
     3c6:	68 2f       	mov	r22, r24
        // Send pin value immediately. This is helpful when connected via
        // ethernet, wi-fi or bluetooth so pin states can be known upon
        // reconnecting.
        Firmata.sendAnalog(analogPin, analogRead(analogPin));
     3c8:	69 83       	std	Y+1, r22	; 0x01
     3ca:	0e 94 55 09 	call	0x12aa	; 0x12aa <analogRead>
     3ce:	ac 01       	movw	r20, r24
     3d0:	69 81       	ldd	r22, Y+1	; 0x01
     3d2:	88 e9       	ldi	r24, 0x98	; 152
     3d4:	92 e0       	ldi	r25, 0x02	; 2
      }
    }
  }
  // TODO: save status to EEPROM here, if changed
}
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
      // which may report noise for unconnected analog pins
      if (!isResetting) {
        // Send pin value immediately. This is helpful when connected via
        // ethernet, wi-fi or bluetooth so pin states can be known upon
        // reconnecting.
        Firmata.sendAnalog(analogPin, analogRead(analogPin));
     3dc:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <_ZN12FirmataClass10sendAnalogEhi>
      }
    }
  }
  // TODO: save status to EEPROM here, if changed
}
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <_Z11attachServohii>:
/*==============================================================================
 * FUNCTIONS
 *============================================================================*/

void attachServo(byte pin, int minPulse, int maxPulse)
{
     3e8:	db 01       	movw	r26, r22
  if (servoCount < MAX_SERVOS) {
     3ea:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <servoCount>
     3ee:	9c 30       	cpi	r25, 0x0C	; 12
     3f0:	a0 f5       	brcc	.+104    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
    // reuse indexes of detached servos until all have been reallocated
    if (detachedServoCount > 0) {
     3f2:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <detachedServoCount>
     3f6:	68 2f       	mov	r22, r24
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	33 23       	and	r19, r19
     3fc:	69 f0       	breq	.+26     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
      servoPinMap[pin] = detachedServos[detachedServoCount - 1];
     3fe:	e3 2f       	mov	r30, r19
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	e4 53       	subi	r30, 0x34	; 52
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	80 81       	ld	r24, Z
     408:	fb 01       	movw	r30, r22
     40a:	e7 52       	subi	r30, 0x27	; 39
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	80 83       	st	Z, r24
      if (detachedServoCount > 0) detachedServoCount--;
     410:	31 50       	subi	r19, 0x01	; 1
     412:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <detachedServoCount>
     416:	07 c0       	rjmp	.+14     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
    } else {
      servoPinMap[pin] = servoCount;
     418:	fb 01       	movw	r30, r22
     41a:	e7 52       	subi	r30, 0x27	; 39
     41c:	fe 4f       	sbci	r31, 0xFE	; 254
     41e:	90 83       	st	Z, r25
      servoCount++;
     420:	9f 5f       	subi	r25, 0xFF	; 255
     422:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <servoCount>
    }
    if (minPulse > 0 && maxPulse > 0) {
      servos[servoPinMap[pin]].attach(PIN_TO_DIGITAL(pin), minPulse, maxPulse);
     426:	fb 01       	movw	r30, r22
     428:	e7 52       	subi	r30, 0x27	; 39
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	80 81       	ld	r24, Z
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9c 01       	movw	r18, r24
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
      if (detachedServoCount > 0) detachedServoCount--;
    } else {
      servoPinMap[pin] = servoCount;
      servoCount++;
    }
    if (minPulse > 0 && maxPulse > 0) {
     43a:	1a 16       	cp	r1, r26
     43c:	1b 06       	cpc	r1, r27
     43e:	4c f4       	brge	.+18     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     440:	14 16       	cp	r1, r20
     442:	15 06       	cpc	r1, r21
     444:	34 f4       	brge	.+12     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
      servos[servoPinMap[pin]].attach(PIN_TO_DIGITAL(pin), minPulse, maxPulse);
     446:	9a 01       	movw	r18, r20
     448:	ad 01       	movw	r20, r26
     44a:	83 51       	subi	r24, 0x13	; 19
     44c:	9e 4f       	sbci	r25, 0xFE	; 254
     44e:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN5Servo6attachEiii>
    } else {
      servos[servoPinMap[pin]].attach(PIN_TO_DIGITAL(pin));
     452:	83 51       	subi	r24, 0x13	; 19
     454:	9e 4f       	sbci	r25, 0xFE	; 254
     456:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <_ZN5Servo6attachEi>
    }
  } else {
    Firmata.sendString("Max servos attached");
     45a:	6a e0       	ldi	r22, 0x0A	; 10
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	88 e9       	ldi	r24, 0x98	; 152
     460:	92 e0       	ldi	r25, 0x02	; 2
     462:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_ZN12FirmataClass10sendStringEPKc>

00000466 <_Z11detachServoh>:
  }
}

void detachServo(byte pin)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
  servos[servoPinMap[pin]].detach();
     46a:	c8 2f       	mov	r28, r24
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	c7 52       	subi	r28, 0x27	; 39
     470:	de 4f       	sbci	r29, 0xFE	; 254
     472:	88 81       	ld	r24, Y
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9c 01       	movw	r18, r24
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	82 0f       	add	r24, r18
     47e:	93 1f       	adc	r25, r19
     480:	83 51       	subi	r24, 0x13	; 19
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN5Servo6detachEv>
  // if we're detaching the last servo, decrement the count
  // otherwise store the index of the detached servo
  if (servoPinMap[pin] == servoCount && servoCount > 0) {
     488:	88 81       	ld	r24, Y
     48a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <servoCount>
     48e:	89 13       	cpse	r24, r25
     490:	06 c0       	rjmp	.+12     	; 0x49e <_Z11detachServoh+0x38>
     492:	88 23       	and	r24, r24
     494:	79 f0       	breq	.+30     	; 0x4b4 <_Z11detachServoh+0x4e>
    servoCount--;
     496:	81 50       	subi	r24, 0x01	; 1
     498:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <servoCount>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_Z11detachServoh+0x4e>
  } else if (servoCount > 0) {
     49e:	99 23       	and	r25, r25
     4a0:	49 f0       	breq	.+18     	; 0x4b4 <_Z11detachServoh+0x4e>
    // keep track of detached servos because we want to reuse their indexes
    // before incrementing the count of attached servos
    detachedServoCount++;
     4a2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <detachedServoCount>
     4a6:	ef 5f       	subi	r30, 0xFF	; 255
     4a8:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <detachedServoCount>
    detachedServos[detachedServoCount - 1] = servoPinMap[pin];
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e4 53       	subi	r30, 0x34	; 52
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	80 83       	st	Z, r24
  }

  servoPinMap[pin] = 255;
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	88 83       	st	Y, r24
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <_Z14disableI2CPinsv>:
  Wire.begin();
}

/* disable the i2c pins so they can be used for other functions */
void disableI2CPins() {
  isI2CEnabled = false;
     4be:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <isI2CEnabled>
  // disable read continuous mode for all devices
  queryIndex = -1;
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <queryIndex>
     4c8:	08 95       	ret

000004ca <_Z18setPinModeCallbackhi>:
// -----------------------------------------------------------------------------
/* sets the pin mode to the correct state and sets the relevant bits in the
 * two bit-arrays that track Digital I/O and PWM status
 */
void setPinModeCallback(byte pin, int mode)
{
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	c8 2f       	mov	r28, r24
     4d6:	8b 01       	movw	r16, r22
  if (Firmata.getPinMode(pin) == PIN_MODE_IGNORE)
     4d8:	68 2f       	mov	r22, r24
     4da:	88 e9       	ldi	r24, 0x98	; 152
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     4e2:	8f 37       	cpi	r24, 0x7F	; 127
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <_Z18setPinModeCallbackhi+0x1e>
     4e6:	0f c1       	rjmp	.+542    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
    return;

  if (Firmata.getPinMode(pin) == PIN_MODE_I2C && isI2CEnabled && mode != PIN_MODE_I2C) {
     4e8:	6c 2f       	mov	r22, r28
     4ea:	88 e9       	ldi	r24, 0x98	; 152
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     4f2:	86 30       	cpi	r24, 0x06	; 6
     4f4:	41 f4       	brne	.+16     	; 0x506 <_Z18setPinModeCallbackhi+0x3c>
     4f6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <isI2CEnabled>
     4fa:	88 23       	and	r24, r24
     4fc:	21 f0       	breq	.+8      	; 0x506 <_Z18setPinModeCallbackhi+0x3c>
     4fe:	06 30       	cpi	r16, 0x06	; 6
     500:	11 05       	cpc	r17, r1
     502:	09 f0       	breq	.+2      	; 0x506 <_Z18setPinModeCallbackhi+0x3c>
     504:	ed c0       	rjmp	.+474    	; 0x6e0 <_Z18setPinModeCallbackhi+0x216>
    // disable i2c so pins can be used for other functions
    // the following if statements should reconfigure the pins properly
    disableI2CPins();
  }
  if (IS_PIN_DIGITAL(pin) && mode != PIN_MODE_SERVO) {
     506:	de ef       	ldi	r29, 0xFE	; 254
     508:	dc 0f       	add	r29, r28
     50a:	d2 31       	cpi	r29, 0x12	; 18
     50c:	b0 f4       	brcc	.+44     	; 0x53a <_Z18setPinModeCallbackhi+0x70>
     50e:	04 30       	cpi	r16, 0x04	; 4
     510:	11 05       	cpc	r17, r1
     512:	99 f0       	breq	.+38     	; 0x53a <_Z18setPinModeCallbackhi+0x70>
    if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
     514:	ec 2f       	mov	r30, r28
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	e7 52       	subi	r30, 0x27	; 39
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	80 81       	ld	r24, Z
     51e:	8c 30       	cpi	r24, 0x0C	; 12
     520:	60 f4       	brcc	.+24     	; 0x53a <_Z18setPinModeCallbackhi+0x70>
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9c 01       	movw	r18, r24
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	82 0f       	add	r24, r18
     52c:	93 1f       	adc	r25, r19
     52e:	83 51       	subi	r24, 0x13	; 19
     530:	9e 4f       	sbci	r25, 0xFE	; 254
     532:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Servo8attachedEv>
     536:	81 11       	cpse	r24, r1
     538:	d6 c0       	rjmp	.+428    	; 0x6e6 <_Z18setPinModeCallbackhi+0x21c>
      detachServo(pin);
    }
  }
  if (IS_PIN_ANALOG(pin)) {
     53a:	52 ef       	ldi	r21, 0xF2	; 242
     53c:	f5 2e       	mov	r15, r21
     53e:	fc 0e       	add	r15, r28
     540:	85 e0       	ldi	r24, 0x05	; 5
     542:	8f 15       	cp	r24, r15
     544:	50 f0       	brcs	.+20     	; 0x55a <_Z18setPinModeCallbackhi+0x90>
    reportAnalogCallback(PIN_TO_ANALOG(pin), mode == PIN_MODE_ANALOG ? 1 : 0); // turn on/off reporting
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	02 30       	cpi	r16, 0x02	; 2
     54c:	11 05       	cpc	r17, r1
     54e:	11 f0       	breq	.+4      	; 0x554 <_Z18setPinModeCallbackhi+0x8a>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	8f 2d       	mov	r24, r15
     556:	0e 94 b4 01 	call	0x368	; 0x368 <_Z20reportAnalogCallbackhi>
  }
  if (IS_PIN_DIGITAL(pin)) {
     55a:	d2 31       	cpi	r29, 0x12	; 18
     55c:	18 f5       	brcc	.+70     	; 0x5a4 <_Z18setPinModeCallbackhi+0xda>
     55e:	ac 2f       	mov	r26, r28
     560:	a6 95       	lsr	r26
     562:	a6 95       	lsr	r26
     564:	a6 95       	lsr	r26
     566:	4c 2f       	mov	r20, r28
     568:	47 70       	andi	r20, 0x07	; 7
    if (mode == INPUT || mode == PIN_MODE_PULLUP) {
      portConfigInputs[pin / 8] |= (1 << (pin & 7));
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	ac 57       	subi	r26, 0x7C	; 124
     56e:	bd 4f       	sbci	r27, 0xFD	; 253
  }
  if (IS_PIN_ANALOG(pin)) {
    reportAnalogCallback(PIN_TO_ANALOG(pin), mode == PIN_MODE_ANALOG ? 1 : 0); // turn on/off reporting
  }
  if (IS_PIN_DIGITAL(pin)) {
    if (mode == INPUT || mode == PIN_MODE_PULLUP) {
     570:	01 15       	cp	r16, r1
     572:	11 05       	cpc	r17, r1
     574:	19 f0       	breq	.+6      	; 0x57c <_Z18setPinModeCallbackhi+0xb2>
     576:	0b 30       	cpi	r16, 0x0B	; 11
     578:	11 05       	cpc	r17, r1
     57a:	51 f4       	brne	.+20     	; 0x590 <_Z18setPinModeCallbackhi+0xc6>
      portConfigInputs[pin / 8] |= (1 << (pin & 7));
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	01 c0       	rjmp	.+2      	; 0x584 <_Z18setPinModeCallbackhi+0xba>
     582:	88 0f       	add	r24, r24
     584:	4a 95       	dec	r20
     586:	ea f7       	brpl	.-6      	; 0x582 <_Z18setPinModeCallbackhi+0xb8>
     588:	9c 91       	ld	r25, X
     58a:	89 2b       	or	r24, r25
     58c:	8c 93       	st	X, r24
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <_Z18setPinModeCallbackhi+0xda>
    } else {
      portConfigInputs[pin / 8] &= ~(1 << (pin & 7));
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	01 c0       	rjmp	.+2      	; 0x598 <_Z18setPinModeCallbackhi+0xce>
     596:	22 0f       	add	r18, r18
     598:	4a 95       	dec	r20
     59a:	ea f7       	brpl	.-6      	; 0x596 <_Z18setPinModeCallbackhi+0xcc>
     59c:	20 95       	com	r18
     59e:	8c 91       	ld	r24, X
     5a0:	28 23       	and	r18, r24
     5a2:	2c 93       	st	X, r18
    }
  }
  Firmata.setPinState(pin, 0);
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	6c 2f       	mov	r22, r28
     5aa:	88 e9       	ldi	r24, 0x98	; 152
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN12FirmataClass11setPinStateEhi>
  switch (mode) {
     5b2:	0c 30       	cpi	r16, 0x0C	; 12
     5b4:	11 05       	cpc	r17, r1
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <_Z18setPinModeCallbackhi+0xf0>
     5b8:	88 c0       	rjmp	.+272    	; 0x6ca <_Z18setPinModeCallbackhi+0x200>
     5ba:	f8 01       	movw	r30, r16
     5bc:	ec 5c       	subi	r30, 0xCC	; 204
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__tablejump2__>
    case PIN_MODE_ANALOG:
      if (IS_PIN_ANALOG(pin)) {
     5c4:	85 e0       	ldi	r24, 0x05	; 5
     5c6:	8f 15       	cp	r24, r15
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <_Z18setPinModeCallbackhi+0x102>
     5ca:	9d c0       	rjmp	.+314    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        if (IS_PIN_DIGITAL(pin)) {
     5cc:	d2 31       	cpi	r29, 0x12	; 18
     5ce:	20 f4       	brcc	.+8      	; 0x5d8 <_Z18setPinModeCallbackhi+0x10e>
          pinMode(PIN_TO_DIGITAL(pin), INPUT);    // disable output driver
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	8c 2f       	mov	r24, r28
     5d4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
#if ARDUINO <= 100
          // deprecated since Arduino 1.0.1 - TODO: drop support in Firmata 2.6
          digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable internal pull-ups
#endif
        }
        Firmata.setPinMode(pin, PIN_MODE_ANALOG);
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <_Z18setPinModeCallbackhi+0x122>
      }
      break;
    case INPUT:
      if (IS_PIN_DIGITAL(pin)) {
     5dc:	d2 31       	cpi	r29, 0x12	; 18
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <_Z18setPinModeCallbackhi+0x118>
     5e0:	92 c0       	rjmp	.+292    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        pinMode(PIN_TO_DIGITAL(pin), INPUT);    // disable output driver
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	8c 2f       	mov	r24, r28
     5e6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
#if ARDUINO <= 100
        // deprecated since Arduino 1.0.1 - TODO: drop support in Firmata 2.6
        digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable internal pull-ups
#endif
        Firmata.setPinMode(pin, INPUT);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	6c 2f       	mov	r22, r28
     5ee:	88 e9       	ldi	r24, 0x98	; 152
     5f0:	92 e0       	ldi	r25, 0x02	; 2
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
  }
  // TODO: save status to EEPROM here, if changed
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
        pinMode(PIN_TO_DIGITAL(pin), INPUT);    // disable output driver
#if ARDUINO <= 100
        // deprecated since Arduino 1.0.1 - TODO: drop support in Firmata 2.6
        digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable internal pull-ups
#endif
        Firmata.setPinMode(pin, INPUT);
     5fc:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <_ZN12FirmataClass10setPinModeEhh>
      }
      break;
    case PIN_MODE_PULLUP:
      if (IS_PIN_DIGITAL(pin)) {
     600:	d2 31       	cpi	r29, 0x12	; 18
     602:	08 f0       	brcs	.+2      	; 0x606 <_Z18setPinModeCallbackhi+0x13c>
     604:	80 c0       	rjmp	.+256    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        pinMode(PIN_TO_DIGITAL(pin), INPUT_PULLUP);
     606:	62 e0       	ldi	r22, 0x02	; 2
     608:	8c 2f       	mov	r24, r28
     60a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
        Firmata.setPinMode(pin, PIN_MODE_PULLUP);
     60e:	4b e0       	ldi	r20, 0x0B	; 11
     610:	6c 2f       	mov	r22, r28
     612:	88 e9       	ldi	r24, 0x98	; 152
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN12FirmataClass10setPinModeEhh>
        Firmata.setPinState(pin, 1);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	6c 2f       	mov	r22, r28
     620:	88 e9       	ldi	r24, 0x98	; 152
     622:	92 e0       	ldi	r25, 0x02	; 2
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
  }
  // TODO: save status to EEPROM here, if changed
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
      break;
    case PIN_MODE_PULLUP:
      if (IS_PIN_DIGITAL(pin)) {
        pinMode(PIN_TO_DIGITAL(pin), INPUT_PULLUP);
        Firmata.setPinMode(pin, PIN_MODE_PULLUP);
        Firmata.setPinState(pin, 1);
     62e:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_ZN12FirmataClass11setPinStateEhi>
      }
      break;
    case OUTPUT:
      if (IS_PIN_DIGITAL(pin)) {
     632:	d2 31       	cpi	r29, 0x12	; 18
     634:	08 f0       	brcs	.+2      	; 0x638 <_Z18setPinModeCallbackhi+0x16e>
     636:	67 c0       	rjmp	.+206    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        if (Firmata.getPinMode(pin) == PIN_MODE_PWM) {
     638:	6c 2f       	mov	r22, r28
     63a:	88 e9       	ldi	r24, 0x98	; 152
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	21 f4       	brne	.+8      	; 0x64e <_Z18setPinModeCallbackhi+0x184>
          // Disable PWM if pin mode was previously set to PWM.
          digitalWrite(PIN_TO_DIGITAL(pin), LOW);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	8c 2f       	mov	r24, r28
     64a:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
        }
        pinMode(PIN_TO_DIGITAL(pin), OUTPUT);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	8c 2f       	mov	r24, r28
     652:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
        Firmata.setPinMode(pin, OUTPUT);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	c9 cf       	rjmp	.-110    	; 0x5ec <_Z18setPinModeCallbackhi+0x122>
      }
      break;
    case PIN_MODE_PWM:
      if (IS_PIN_PWM(pin)) {
     65a:	c3 30       	cpi	r28, 0x03	; 3
     65c:	49 f0       	breq	.+18     	; 0x670 <_Z18setPinModeCallbackhi+0x1a6>
     65e:	8b ef       	ldi	r24, 0xFB	; 251
     660:	8c 0f       	add	r24, r28
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	28 f0       	brcs	.+10     	; 0x670 <_Z18setPinModeCallbackhi+0x1a6>
     666:	87 ef       	ldi	r24, 0xF7	; 247
     668:	8c 0f       	add	r24, r28
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	08 f0       	brcs	.+2      	; 0x670 <_Z18setPinModeCallbackhi+0x1a6>
     66e:	4b c0       	rjmp	.+150    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        pinMode(PIN_TO_PWM(pin), OUTPUT);
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	8c 2f       	mov	r24, r28
     674:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
        analogWrite(PIN_TO_PWM(pin), 0);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <analogWrite>
        Firmata.setPinMode(pin, PIN_MODE_PWM);
     682:	43 e0       	ldi	r20, 0x03	; 3
     684:	b3 cf       	rjmp	.-154    	; 0x5ec <_Z18setPinModeCallbackhi+0x122>
      }
      break;
    case PIN_MODE_SERVO:
      if (IS_PIN_DIGITAL(pin)) {
     686:	d2 31       	cpi	r29, 0x12	; 18
     688:	f0 f5       	brcc	.+124    	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        Firmata.setPinMode(pin, PIN_MODE_SERVO);
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	6c 2f       	mov	r22, r28
     68e:	88 e9       	ldi	r24, 0x98	; 152
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN12FirmataClass10setPinModeEhh>
        if (servoPinMap[pin] == 255 || !servos[servoPinMap[pin]].attached()) {
     696:	ec 2f       	mov	r30, r28
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e7 52       	subi	r30, 0x27	; 39
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	80 81       	ld	r24, Z
     6a0:	8f 3f       	cpi	r24, 0xFF	; 255
     6a2:	29 f1       	breq	.+74     	; 0x6ee <_Z18setPinModeCallbackhi+0x224>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9c 01       	movw	r18, r24
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	83 51       	subi	r24, 0x13	; 19
     6b2:	9e 4f       	sbci	r25, 0xFE	; 254
     6b4:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Servo8attachedEv>
     6b8:	81 11       	cpse	r24, r1
     6ba:	25 c0       	rjmp	.+74     	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
     6bc:	18 c0       	rjmp	.+48     	; 0x6ee <_Z18setPinModeCallbackhi+0x224>
          attachServo(pin, -1, -1);
        }
      }
      break;
    case PIN_MODE_I2C:
      if (IS_PIN_I2C(pin)) {
     6be:	8e ee       	ldi	r24, 0xEE	; 238
     6c0:	8c 0f       	add	r24, r28
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	00 f5       	brcc	.+64     	; 0x706 <_Z18setPinModeCallbackhi+0x23c>
        // mark the pin as i2c
        // the user must call I2C_CONFIG to enable I2C for a device
        Firmata.setPinMode(pin, PIN_MODE_I2C);
     6c6:	46 e0       	ldi	r20, 0x06	; 6
     6c8:	91 cf       	rjmp	.-222    	; 0x5ec <_Z18setPinModeCallbackhi+0x122>
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handlePinMode(pin, PIN_MODE_SERIAL);
#endif
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
     6ca:	6e e1       	ldi	r22, 0x1E	; 30
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	88 e9       	ldi	r24, 0x98	; 152
     6d0:	92 e0       	ldi	r25, 0x02	; 2
  }
  // TODO: save status to EEPROM here, if changed
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handlePinMode(pin, PIN_MODE_SERIAL);
#endif
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
     6dc:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_ZN12FirmataClass10sendStringEPKc>
    return;

  if (Firmata.getPinMode(pin) == PIN_MODE_I2C && isI2CEnabled && mode != PIN_MODE_I2C) {
    // disable i2c so pins can be used for other functions
    // the following if statements should reconfigure the pins properly
    disableI2CPins();
     6e0:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z14disableI2CPinsv>
     6e4:	10 cf       	rjmp	.-480    	; 0x506 <_Z18setPinModeCallbackhi+0x3c>
  }
  if (IS_PIN_DIGITAL(pin) && mode != PIN_MODE_SERVO) {
    if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
      detachServo(pin);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	0e 94 33 02 	call	0x466	; 0x466 <_Z11detachServoh>
     6ec:	26 cf       	rjmp	.-436    	; 0x53a <_Z18setPinModeCallbackhi+0x70>
      if (IS_PIN_DIGITAL(pin)) {
        Firmata.setPinMode(pin, PIN_MODE_SERVO);
        if (servoPinMap[pin] == 255 || !servos[servoPinMap[pin]].attached()) {
          // pass -1 for min and max pulse values to use default values set
          // by Servo library
          attachServo(pin, -1, -1);
     6ee:	4f ef       	ldi	r20, 0xFF	; 255
     6f0:	5f ef       	ldi	r21, 0xFF	; 255
     6f2:	6f ef       	ldi	r22, 0xFF	; 255
     6f4:	7f ef       	ldi	r23, 0xFF	; 255
     6f6:	8c 2f       	mov	r24, r28
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
  }
  // TODO: save status to EEPROM here, if changed
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
      if (IS_PIN_DIGITAL(pin)) {
        Firmata.setPinMode(pin, PIN_MODE_SERVO);
        if (servoPinMap[pin] == 255 || !servos[servoPinMap[pin]].attached()) {
          // pass -1 for min and max pulse values to use default values set
          // by Servo library
          attachServo(pin, -1, -1);
     702:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_Z11attachServohii>
      break;
    default:
      Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
  }
  // TODO: save status to EEPROM here, if changed
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	08 95       	ret

00000712 <_Z13enableI2CPinsv>:

  servoPinMap[pin] = 255;
}

void enableI2CPins()
{
     712:	cf 93       	push	r28
  byte i;
  // is there a faster way to do this? would probaby require importing
  // Arduino.h to get SCL and SDA pins
  for (i = 0; i < TOTAL_PINS; i++) {
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	8e ee       	ldi	r24, 0xEE	; 238
     718:	8c 0f       	add	r24, r28
    if (IS_PIN_I2C(i)) {
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	28 f4       	brcc	.+10     	; 0x728 <_Z13enableI2CPinsv+0x16>
      // mark pins as i2c so they are ignore in non i2c data requests
      setPinModeCallback(i, PIN_MODE_I2C);
     71e:	66 e0       	ldi	r22, 0x06	; 6
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	8c 2f       	mov	r24, r28
     724:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z18setPinModeCallbackhi>
void enableI2CPins()
{
  byte i;
  // is there a faster way to do this? would probaby require importing
  // Arduino.h to get SCL and SDA pins
  for (i = 0; i < TOTAL_PINS; i++) {
     728:	cf 5f       	subi	r28, 0xFF	; 255
     72a:	c4 31       	cpi	r28, 0x14	; 20
     72c:	a1 f7       	brne	.-24     	; 0x716 <_Z13enableI2CPinsv+0x4>
      // mark pins as i2c so they are ignore in non i2c data requests
      setPinModeCallback(i, PIN_MODE_I2C);
    }
  }

  isI2CEnabled = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <isI2CEnabled>

  Wire.begin();
     734:	88 e5       	ldi	r24, 0x58	; 88
     736:	93 e0       	ldi	r25, 0x03	; 3
}
     738:	cf 91       	pop	r28
    }
  }

  isI2CEnabled = true;

  Wire.begin();
     73a:	0c 94 21 11 	jmp	0x2242	; 0x2242 <_ZN7TwoWire5beginEv>

0000073e <_Z19systemResetCallbackv>:
/*==============================================================================
 * SETUP()
 *============================================================================*/

void systemResetCallback()
{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
  isResetting = true;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>

#ifdef FIRMATA_SERIAL_FEATURE
  serialFeature.reset();
#endif

  if (isI2CEnabled) {
     74c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <isI2CEnabled>
     750:	81 11       	cpse	r24, r1
    disableI2CPins();
     752:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z14disableI2CPinsv>
  }

  for (byte i = 0; i < TOTAL_PORTS; i++) {
    reportPINs[i] = false;    // by default, reporting off
     756:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <reportPINs>
    portConfigInputs[i] = 0;  // until activated
     75a:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <portConfigInputs>
    previousPINs[i] = 0;
     75e:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <previousPINs>
  if (isI2CEnabled) {
    disableI2CPins();
  }

  for (byte i = 0; i < TOTAL_PORTS; i++) {
    reportPINs[i] = false;    // by default, reporting off
     762:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <reportPINs+0x1>
    portConfigInputs[i] = 0;  // until activated
     766:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <portConfigInputs+0x1>
    previousPINs[i] = 0;
     76a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <previousPINs+0x1>
  if (isI2CEnabled) {
    disableI2CPins();
  }

  for (byte i = 0; i < TOTAL_PORTS; i++) {
    reportPINs[i] = false;    // by default, reporting off
     76e:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <reportPINs+0x2>
    portConfigInputs[i] = 0;  // until activated
     772:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <portConfigInputs+0x2>
    previousPINs[i] = 0;
     776:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <previousPINs+0x2>
     77a:	09 ed       	ldi	r16, 0xD9	; 217
     77c:	11 e0       	ldi	r17, 0x01	; 1
     77e:	c0 e0       	ldi	r28, 0x00	; 0
    } else if (IS_PIN_DIGITAL(i)) {
      // sets the output to 0, configures portConfigInputs
      setPinModeCallback(i, OUTPUT);
    }

    servoPinMap[i] = 255;
     780:	df ef       	ldi	r29, 0xFF	; 255
     782:	82 ef       	ldi	r24, 0xF2	; 242
     784:	8c 0f       	add	r24, r28
  }

  for (byte i = 0; i < TOTAL_PINS; i++) {
    // pins with analog capability default to analog input
    // otherwise, pins default to digital output
    if (IS_PIN_ANALOG(i)) {
     786:	86 30       	cpi	r24, 0x06	; 6
     788:	18 f4       	brcc	.+6      	; 0x790 <_Z19systemResetCallbackv+0x52>
      // turns off pullup, configures everything
      setPinModeCallback(i, PIN_MODE_ANALOG);
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	06 c0       	rjmp	.+12     	; 0x79c <_Z19systemResetCallbackv+0x5e>
     790:	8e ef       	ldi	r24, 0xFE	; 254
     792:	8c 0f       	add	r24, r28
    } else if (IS_PIN_DIGITAL(i)) {
     794:	82 31       	cpi	r24, 0x12	; 18
     796:	28 f4       	brcc	.+10     	; 0x7a2 <_Z19systemResetCallbackv+0x64>
      // sets the output to 0, configures portConfigInputs
      setPinModeCallback(i, OUTPUT);
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	8c 2f       	mov	r24, r28
     79e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z18setPinModeCallbackhi>
    }

    servoPinMap[i] = 255;
     7a2:	f8 01       	movw	r30, r16
     7a4:	d1 93       	st	Z+, r29
     7a6:	8f 01       	movw	r16, r30
    reportPINs[i] = false;    // by default, reporting off
    portConfigInputs[i] = 0;  // until activated
    previousPINs[i] = 0;
  }

  for (byte i = 0; i < TOTAL_PINS; i++) {
     7a8:	cf 5f       	subi	r28, 0xFF	; 255
     7aa:	c4 31       	cpi	r28, 0x14	; 20
     7ac:	51 f7       	brne	.-44     	; 0x782 <_Z19systemResetCallbackv+0x44>
    }

    servoPinMap[i] = 255;
  }
  // by default, do not report any analog inputs
  analogInputsToReport = 0;
     7ae:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <analogInputsToReport+0x1>
     7b2:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <analogInputsToReport>

  detachedServoCount = 0;
     7b6:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <detachedServoCount>
  servoCount = 0;
     7ba:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <servoCount>
        but it will be needed when/if we support EEPROM stored config
  for (byte i=0; i < TOTAL_PORTS; i++) {
    outputPort(i, readPort(i, portConfigInputs[i]), true);
  }
  */
  isResetting = false;
     7be:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <_Z10outputPorthhh>:
  // send slave address, register and received bytes
  Firmata.sendSysex(SYSEX_I2C_REPLY, numBytes + 2, i2cRxData);
}

void outputPort(byte portNumber, byte portValue, byte forceSend)
{
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
  // pins not configured as INPUT are cleared to zeros
  portValue = portValue & portConfigInputs[portNumber];
     7d2:	c8 2f       	mov	r28, r24
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	fe 01       	movw	r30, r28
     7d8:	ec 57       	subi	r30, 0x7C	; 124
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	90 81       	ld	r25, Z
     7de:	16 2f       	mov	r17, r22
     7e0:	19 23       	and	r17, r25
     7e2:	c9 57       	subi	r28, 0x79	; 121
     7e4:	dd 4f       	sbci	r29, 0xFD	; 253
  // only send if the value is different than previously sent
  if (forceSend || previousPINs[portNumber] != portValue) {
     7e6:	41 11       	cpse	r20, r1
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <_Z10outputPorthhh+0x24>
     7ea:	98 81       	ld	r25, Y
     7ec:	91 17       	cp	r25, r17
     7ee:	41 f0       	breq	.+16     	; 0x800 <_Z10outputPorthhh+0x34>
     7f0:	68 2f       	mov	r22, r24
    Firmata.sendDigitalPort(portNumber, portValue);
     7f2:	41 2f       	mov	r20, r17
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	88 e9       	ldi	r24, 0x98	; 152
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN12FirmataClass15sendDigitalPortEhi>
    previousPINs[portNumber] = portValue;
     7fe:	18 83       	st	Y, r17
  }
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	08 95       	ret

00000808 <_Z21reportDigitalCallbackhi>:
  // TODO: save status to EEPROM here, if changed
}

void reportDigitalCallback(byte port, int value)
{
  if (port < TOTAL_PORTS) {
     808:	83 30       	cpi	r24, 0x03	; 3
     80a:	20 f5       	brcc	.+72     	; 0x854 <_Z21reportDigitalCallbackhi+0x4c>
    reportPINs[port] = (byte)value;
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	e6 57       	subi	r30, 0x76	; 118
     814:	fd 4f       	sbci	r31, 0xFD	; 253
     816:	60 83       	st	Z, r22
    // Send port value immediately. This is helpful when connected via
    // ethernet, wi-fi or bluetooth so pin states can be known upon
    // reconnecting.
    if (value) outputPort(port, readPort(port, portConfigInputs[port]), true);
     818:	67 2b       	or	r22, r23
     81a:	e1 f0       	breq	.+56     	; 0x854 <_Z21reportDigitalCallbackhi+0x4c>
     81c:	f9 01       	movw	r30, r18
     81e:	ec 57       	subi	r30, 0x7C	; 124
     820:	fd 4f       	sbci	r31, 0xFD	; 253
     822:	90 81       	ld	r25, Z

static inline unsigned char readPort(byte, byte) __attribute__((always_inline, unused));
static inline unsigned char readPort(byte port, byte bitmask)
{
#if defined(ARDUINO_PINOUT_OPTIMIZE)
  if (port == 0) return (PIND & 0xFC) & bitmask; // ignore Rx/Tx 0/1
     824:	81 11       	cpse	r24, r1
     826:	03 c0       	rjmp	.+6      	; 0x82e <_Z21reportDigitalCallbackhi+0x26>
     828:	69 b1       	in	r22, 0x09	; 9
     82a:	6c 7f       	andi	r22, 0xFC	; 252
     82c:	0f c0       	rjmp	.+30     	; 0x84c <_Z21reportDigitalCallbackhi+0x44>
  if (port == 1) return ((PINB & 0x3F) | ((PINC & 0x03) << 6)) & bitmask;
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	49 f4       	brne	.+18     	; 0x844 <_Z21reportDigitalCallbackhi+0x3c>
     832:	63 b1       	in	r22, 0x03	; 3
     834:	36 b1       	in	r19, 0x06	; 6
     836:	40 e4       	ldi	r20, 0x40	; 64
     838:	34 9f       	mul	r19, r20
     83a:	90 01       	movw	r18, r0
     83c:	11 24       	eor	r1, r1
     83e:	6f 73       	andi	r22, 0x3F	; 63
     840:	62 2b       	or	r22, r18
     842:	04 c0       	rjmp	.+8      	; 0x84c <_Z21reportDigitalCallbackhi+0x44>
  if (port == 2) return ((PINC & 0x3C) >> 2) & bitmask;
     844:	66 b1       	in	r22, 0x06	; 6
     846:	6c 73       	andi	r22, 0x3C	; 60
     848:	66 95       	lsr	r22
     84a:	66 95       	lsr	r22
     84c:	69 23       	and	r22, r25
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_Z10outputPorthhh>
     854:	08 95       	ret

00000856 <_Z18checkDigitalInputsv>:
void checkDigitalInputs(void)
{
  /* Using non-looping code allows constants to be given to readPort().
   * The compiler will apply substantial optimizations if the inputs
   * to readPort() are compile-time constants. */
  if (TOTAL_PORTS > 0 && reportPINs[0]) outputPort(0, readPort(0, portConfigInputs[0]), false);
     856:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <reportPINs>
     85a:	88 23       	and	r24, r24
     85c:	49 f0       	breq	.+18     	; 0x870 <_Z18checkDigitalInputsv+0x1a>

static inline unsigned char readPort(byte, byte) __attribute__((always_inline, unused));
static inline unsigned char readPort(byte port, byte bitmask)
{
#if defined(ARDUINO_PINOUT_OPTIMIZE)
  if (port == 0) return (PIND & 0xFC) & bitmask; // ignore Rx/Tx 0/1
     85e:	69 b1       	in	r22, 0x09	; 9
     860:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <portConfigInputs>
     864:	68 23       	and	r22, r24
     866:	6c 7f       	andi	r22, 0xFC	; 252
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z10outputPorthhh>
  if (TOTAL_PORTS > 1 && reportPINs[1]) outputPort(1, readPort(1, portConfigInputs[1]), false);
     870:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <reportPINs+0x1>
     874:	88 23       	and	r24, r24
     876:	79 f0       	breq	.+30     	; 0x896 <_Z18checkDigitalInputsv+0x40>
  if (port == 1) return ((PINB & 0x3F) | ((PINC & 0x03) << 6)) & bitmask;
     878:	63 b1       	in	r22, 0x03	; 3
     87a:	96 b1       	in	r25, 0x06	; 6
     87c:	20 e4       	ldi	r18, 0x40	; 64
     87e:	92 9f       	mul	r25, r18
     880:	c0 01       	movw	r24, r0
     882:	11 24       	eor	r1, r1
     884:	6f 73       	andi	r22, 0x3F	; 63
     886:	86 2b       	or	r24, r22
     888:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <portConfigInputs+0x1>
     88c:	68 23       	and	r22, r24
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z10outputPorthhh>
  if (TOTAL_PORTS > 2 && reportPINs[2]) outputPort(2, readPort(2, portConfigInputs[2]), false);
     896:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <reportPINs+0x2>
     89a:	88 23       	and	r24, r24
     89c:	59 f0       	breq	.+22     	; 0x8b4 <_Z18checkDigitalInputsv+0x5e>
  if (port == 2) return ((PINC & 0x3C) >> 2) & bitmask;
     89e:	66 b1       	in	r22, 0x06	; 6
     8a0:	6c 73       	andi	r22, 0x3C	; 60
     8a2:	66 95       	lsr	r22
     8a4:	66 95       	lsr	r22
     8a6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <portConfigInputs+0x2>
     8aa:	68 23       	and	r22, r24
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_Z10outputPorthhh>
     8b4:	08 95       	ret

000008b6 <setup>:
  isResetting = false;
}

void setup()
{
  Firmata.setFirmwareVersion(FIRMATA_FIRMWARE_MAJOR_VERSION, FIRMATA_FIRMWARE_MINOR_VERSION);
     8b6:	25 e0       	ldi	r18, 0x05	; 5
     8b8:	42 e0       	ldi	r20, 0x02	; 2
     8ba:	6f e2       	ldi	r22, 0x2F	; 47
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	88 e9       	ldi	r24, 0x98	; 152
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh>

  Firmata.attach(ANALOG_MESSAGE, analogWriteCallback);
     8c6:	43 ed       	ldi	r20, 0xD3	; 211
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 ee       	ldi	r22, 0xE0	; 224
     8cc:	88 e9       	ldi	r24, 0x98	; 152
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(DIGITAL_MESSAGE, digitalWriteCallback);
     8d4:	43 e1       	ldi	r20, 0x13	; 19
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	60 e9       	ldi	r22, 0x90	; 144
     8da:	88 e9       	ldi	r24, 0x98	; 152
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(REPORT_ANALOG, reportAnalogCallback);
     8e2:	44 eb       	ldi	r20, 0xB4	; 180
     8e4:	51 e0       	ldi	r21, 0x01	; 1
     8e6:	60 ec       	ldi	r22, 0xC0	; 192
     8e8:	88 e9       	ldi	r24, 0x98	; 152
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(REPORT_DIGITAL, reportDigitalCallback);
     8f0:	44 e0       	ldi	r20, 0x04	; 4
     8f2:	54 e0       	ldi	r21, 0x04	; 4
     8f4:	60 ed       	ldi	r22, 0xD0	; 208
     8f6:	88 e9       	ldi	r24, 0x98	; 152
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(SET_PIN_MODE, setPinModeCallback);
     8fe:	45 e6       	ldi	r20, 0x65	; 101
     900:	52 e0       	ldi	r21, 0x02	; 2
     902:	64 ef       	ldi	r22, 0xF4	; 244
     904:	88 e9       	ldi	r24, 0x98	; 152
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(SET_DIGITAL_PIN_VALUE, setPinValueCallback);
     90c:	48 ea       	ldi	r20, 0xA8	; 168
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	65 ef       	ldi	r22, 0xF5	; 245
     912:	88 e9       	ldi	r24, 0x98	; 152
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN12FirmataClass6attachEhPFvhiE>
  Firmata.attach(START_SYSEX, sysexCallback);
     91a:	42 e3       	ldi	r20, 0x32	; 50
     91c:	55 e0       	ldi	r21, 0x05	; 5
     91e:	60 ef       	ldi	r22, 0xF0	; 240
     920:	88 e9       	ldi	r24, 0x98	; 152
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN12FirmataClass6attachEhPFvhhPhE>
  Firmata.attach(SYSTEM_RESET, systemResetCallback);
     928:	4f e9       	ldi	r20, 0x9F	; 159
     92a:	53 e0       	ldi	r21, 0x03	; 3
     92c:	6f ef       	ldi	r22, 0xFF	; 255
     92e:	88 e9       	ldi	r24, 0x98	; 152
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN12FirmataClass6attachEhPFvvE>
  // Call begin(baud) on the alternate serial port and pass it to Firmata to begin like this:
  // Serial1.begin(57600);
  // Firmata.begin(Serial1);
  // However do not do this if you are using SERIAL_MESSAGE

  Firmata.begin(57600);
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	51 ee       	ldi	r21, 0xE1	; 225
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	88 e9       	ldi	r24, 0x98	; 152
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN12FirmataClass5beginEl>
  while (!Serial) {
    ; // wait for serial port to connect. Needed for ATmega32u4-based boards and Arduino 101
  }

  systemResetCallback();  // reset to default config
     946:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_Z19systemResetCallbackv>

0000094a <_GLOBAL__sub_I_analogInputsToReport>:
  }

#ifdef FIRMATA_SERIAL_FEATURE
  serialFeature.update();
#endif
}
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd ee       	ldi	r28, 0xED	; 237
     950:	d1 e0       	ldi	r29, 0x01	; 1
boolean isI2CEnabled = false;
signed char queryIndex = -1;
// default delay time between i2c read request and Wire.requestFrom()
unsigned int i2cReadDelayTime = 0;

Servo servos[MAX_SERVOS];
     952:	ce 01       	movw	r24, r28
     954:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN5ServoC1Ev>
     958:	23 96       	adiw	r28, 0x03	; 3
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	c1 31       	cpi	r28, 0x11	; 17
     95e:	d8 07       	cpc	r29, r24
     960:	c1 f7       	brne	.-16     	; 0x952 <_GLOBAL__sub_I_analogInputsToReport+0x8>
  }

#ifdef FIRMATA_SERIAL_FEATURE
  serialFeature.update();
#endif
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <_Z9wireWriteh>:

/* utility functions */
void wireWrite(byte data)
{
#if ARDUINO >= 100
  Wire.write((byte)data);
     968:	68 2f       	mov	r22, r24
     96a:	88 e5       	ldi	r24, 0x58	; 88
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <_ZN7TwoWire5writeEh>

00000972 <_Z8wireReadv>:
}

byte wireRead(void)
{
#if ARDUINO >= 100
  return Wire.read();
     972:	88 e5       	ldi	r24, 0x58	; 88
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZN7TwoWire4readEv>
#else
  return Wire.receive();
#endif
}
     97a:	08 95       	ret

0000097c <_Z17readAndReportDatahihh>:
  isI2CEnabled = false;
  // disable read continuous mode for all devices
  queryIndex = -1;
}

void readAndReportData(byte address, int theRegister, byte numBytes, byte stopTX) {
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	d8 2e       	mov	r13, r24
     994:	8b 01       	movw	r16, r22
     996:	c4 2e       	mov	r12, r20
  // allow I2C requests that don't require a register read
  // for example, some devices using an interrupt pin to signify new data available
  // do not always require the register read so upon interrupt you call Wire.requestFrom()
  if (theRegister != I2C_REGISTER_NOT_SPECIFIED) {
     998:	6f 3f       	cpi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	c1 f0       	breq	.+48     	; 0x9ce <_Z17readAndReportDatahihh+0x52>
    Wire.beginTransmission(address);
     99e:	6d 2d       	mov	r22, r13
     9a0:	88 e5       	ldi	r24, 0x58	; 88
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	29 83       	std	Y+1, r18	; 0x01
     9a6:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN7TwoWire17beginTransmissionEh>
    wireWrite((byte)theRegister);
     9aa:	80 2f       	mov	r24, r16
     9ac:	0e 94 b4 04 	call	0x968	; 0x968 <_Z9wireWriteh>
    Wire.endTransmission(stopTX); // default = true
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	62 2f       	mov	r22, r18
     9b4:	88 e5       	ldi	r24, 0x58	; 88
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN7TwoWire15endTransmissionEh>
    // do not set a value of 0
    if (i2cReadDelayTime > 0) {
     9bc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <i2cReadDelayTime>
     9c0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <i2cReadDelayTime+0x1>
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <_Z17readAndReportDatahihh+0x56>
      // delay is necessary for some devices such as WiiNunchuck
      delayMicroseconds(i2cReadDelayTime);
     9c8:	0e 94 0f 09 	call	0x121e	; 0x121e <delayMicroseconds>
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <_Z17readAndReportDatahihh+0x56>
    }
  } else {
    theRegister = 0;  // fill the register with a dummy value
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	10 e0       	ldi	r17, 0x00	; 0
  }

  Wire.requestFrom(address, numBytes);  // all bytes are returned in requestFrom
     9d2:	4c 2d       	mov	r20, r12
     9d4:	6d 2d       	mov	r22, r13
     9d6:	88 e5       	ldi	r24, 0x58	; 88
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN7TwoWire11requestFromEhh>

  // check to be sure correct number of bytes were returned by slave
  if (numBytes < Wire.available()) {
     9de:	ec 2c       	mov	r14, r12
     9e0:	f1 2c       	mov	r15, r1
     9e2:	88 e5       	ldi	r24, 0x58	; 88
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN7TwoWire9availableEv>
     9ea:	e8 16       	cp	r14, r24
     9ec:	f9 06       	cpc	r15, r25
     9ee:	1c f4       	brge	.+6      	; 0x9f6 <_Z17readAndReportDatahihh+0x7a>
    Firmata.sendString("I2C: Too many bytes received");
     9f0:	6f e3       	ldi	r22, 0x3F	; 63
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <_Z17readAndReportDatahihh+0x8c>
  } else if (numBytes > Wire.available()) {
     9f6:	88 e5       	ldi	r24, 0x58	; 88
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN7TwoWire9availableEv>
     9fe:	8e 15       	cp	r24, r14
     a00:	9f 05       	cpc	r25, r15
     a02:	34 f4       	brge	.+12     	; 0xa10 <_Z17readAndReportDatahihh+0x94>
    Firmata.sendString("I2C: Too few bytes received");
     a04:	6c e5       	ldi	r22, 0x5C	; 92
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	88 e9       	ldi	r24, 0x98	; 152
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN12FirmataClass10sendStringEPKc>
  }

  i2cRxData[0] = address;
     a10:	d0 92 14 02 	sts	0x0214, r13	; 0x800214 <i2cRxData>
  i2cRxData[1] = theRegister;
     a14:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <i2cRxData+0x1>

  for (int i = 0; i < numBytes && Wire.available(); i++) {
     a18:	00 e0       	ldi	r16, 0x00	; 0
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	0e 15       	cp	r16, r14
     a1e:	1f 05       	cpc	r17, r15
     a20:	94 f0       	brlt	.+36     	; 0xa46 <_Z17readAndReportDatahihh+0xca>
    i2cRxData[2 + i] = wireRead();
  }

  // send slave address, register and received bytes
  Firmata.sendSysex(SYSEX_I2C_REPLY, numBytes + 2, i2cRxData);
     a22:	42 e0       	ldi	r20, 0x02	; 2
     a24:	4c 0d       	add	r20, r12
     a26:	24 e1       	ldi	r18, 0x14	; 20
     a28:	32 e0       	ldi	r19, 0x02	; 2
     a2a:	67 e7       	ldi	r22, 0x77	; 119
     a2c:	88 e9       	ldi	r24, 0x98	; 152
     a2e:	92 e0       	ldi	r25, 0x02	; 2
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
  for (int i = 0; i < numBytes && Wire.available(); i++) {
    i2cRxData[2 + i] = wireRead();
  }

  // send slave address, register and received bytes
  Firmata.sendSysex(SYSEX_I2C_REPLY, numBytes + 2, i2cRxData);
     a42:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_ZN12FirmataClass9sendSysexEhhPh>
  }

  i2cRxData[0] = address;
  i2cRxData[1] = theRegister;

  for (int i = 0; i < numBytes && Wire.available(); i++) {
     a46:	88 e5       	ldi	r24, 0x58	; 88
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN7TwoWire9availableEv>
     a4e:	89 2b       	or	r24, r25
     a50:	41 f3       	breq	.-48     	; 0xa22 <_Z17readAndReportDatahihh+0xa6>
    i2cRxData[2 + i] = wireRead();
     a52:	0e 94 b9 04 	call	0x972	; 0x972 <_Z8wireReadv>
     a56:	f8 01       	movw	r30, r16
     a58:	ec 5e       	subi	r30, 0xEC	; 236
     a5a:	fd 4f       	sbci	r31, 0xFD	; 253
     a5c:	82 83       	std	Z+2, r24	; 0x02
  }

  i2cRxData[0] = address;
  i2cRxData[1] = theRegister;

  for (int i = 0; i < numBytes && Wire.available(); i++) {
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	dc cf       	rjmp	.-72     	; 0xa1c <_Z17readAndReportDatahihh+0xa0>

00000a64 <_Z13sysexCallbackhhPh>:
/*==============================================================================
 * SYSEX-BASED commands
 *============================================================================*/

void sysexCallback(byte command, byte argc, byte *argv)
{
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
  byte slaveAddress;
  byte data;
  int slaveRegister;
  unsigned int delayTime;

  switch (command) {
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fc 01       	movw	r30, r24
     a74:	e9 56       	subi	r30, 0x69	; 105
     a76:	f1 09       	sbc	r31, r1
     a78:	e2 31       	cpi	r30, 0x12	; 18
     a7a:	f1 05       	cpc	r31, r1
     a7c:	08 f0       	brcs	.+2      	; 0xa80 <_Z13sysexCallbackhhPh+0x1c>
     a7e:	67 c2       	rjmp	.+1230   	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
     a80:	ea 01       	movw	r28, r20
     a82:	16 2f       	mov	r17, r22
     a84:	e0 5c       	subi	r30, 0xC0	; 192
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__tablejump2__>
    case I2C_REQUEST:
      mode = argv[1] & I2C_READ_WRITE_MODE_MASK;
     a8c:	29 81       	ldd	r18, Y+1	; 0x01
     a8e:	92 2f       	mov	r25, r18
     a90:	98 71       	andi	r25, 0x18	; 24
      if (argv[1] & I2C_10BIT_ADDRESS_MODE_MASK) {
     a92:	25 ff       	sbrs	r18, 5
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <_Z13sysexCallbackhhPh+0x38>
        Firmata.sendString("10-bit addressing not supported");
     a96:	68 e7       	ldi	r22, 0x78	; 120
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	5c c0       	rjmp	.+184    	; 0xb54 <_Z13sysexCallbackhhPh+0xf0>
        return;
      }
      else {
        slaveAddress = argv[0];
     a9c:	88 81       	ld	r24, Y
      }

      // need to invert the logic here since 0 will be default for client
      // libraries that have not updated to add support for restart tx
      if (argv[1] & I2C_END_TX_MASK) {
     a9e:	26 fb       	bst	r18, 6
     aa0:	22 27       	eor	r18, r18
     aa2:	20 f9       	bld	r18, 0
     aa4:	31 e0       	ldi	r19, 0x01	; 1
     aa6:	23 27       	eor	r18, r19
      }
      else {
        stopTX = I2C_STOP_TX; // default
      }

      switch (mode) {
     aa8:	98 30       	cpi	r25, 0x08	; 8
     aaa:	71 f1       	breq	.+92     	; 0xb08 <_Z13sysexCallbackhhPh+0xa4>
     aac:	48 f4       	brcc	.+18     	; 0xac0 <_Z13sysexCallbackhhPh+0x5c>
     aae:	91 11       	cpse	r25, r1
     ab0:	4e c2       	rjmp	.+1180   	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        case I2C_WRITE:
          Wire.beginTransmission(slaveAddress);
     ab2:	68 2f       	mov	r22, r24
     ab4:	88 e5       	ldi	r24, 0x58	; 88
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN7TwoWire17beginTransmissionEh>
          for (byte i = 2; i < argc; i += 2) {
     abc:	02 e0       	ldi	r16, 0x02	; 2
     abe:	07 c0       	rjmp	.+14     	; 0xace <_Z13sysexCallbackhhPh+0x6a>
      }
      else {
        stopTX = I2C_STOP_TX; // default
      }

      switch (mode) {
     ac0:	90 31       	cpi	r25, 0x10	; 16
     ac2:	09 f4       	brne	.+2      	; 0xac6 <_Z13sysexCallbackhhPh+0x62>
     ac4:	41 c0       	rjmp	.+130    	; 0xb48 <_Z13sysexCallbackhhPh+0xe4>
     ac6:	98 31       	cpi	r25, 0x18	; 24
     ac8:	09 f4       	brne	.+2      	; 0xacc <_Z13sysexCallbackhhPh+0x68>
     aca:	73 c0       	rjmp	.+230    	; 0xbb2 <_Z13sysexCallbackhhPh+0x14e>
     acc:	40 c2       	rjmp	.+1152   	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        case I2C_WRITE:
          Wire.beginTransmission(slaveAddress);
          for (byte i = 2; i < argc; i += 2) {
     ace:	01 17       	cp	r16, r17
     ad0:	68 f4       	brcc	.+26     	; 0xaec <_Z13sysexCallbackhhPh+0x88>
            data = argv[i] + (argv[i + 1] << 7);
     ad2:	fe 01       	movw	r30, r28
     ad4:	e0 0f       	add	r30, r16
     ad6:	f1 1d       	adc	r31, r1
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	80 81       	ld	r24, Z
            wireWrite(data);
     adc:	20 e8       	ldi	r18, 0x80	; 128
     ade:	92 9f       	mul	r25, r18
     ae0:	80 19       	sub	r24, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	0e 94 b4 04 	call	0x968	; 0x968 <_Z9wireWriteh>
      }

      switch (mode) {
        case I2C_WRITE:
          Wire.beginTransmission(slaveAddress);
          for (byte i = 2; i < argc; i += 2) {
     ae8:	0e 5f       	subi	r16, 0xFE	; 254
     aea:	f1 cf       	rjmp	.-30     	; 0xace <_Z13sysexCallbackhhPh+0x6a>
            data = argv[i] + (argv[i + 1] << 7);
            wireWrite(data);
          }
          Wire.endTransmission();
     aec:	88 e5       	ldi	r24, 0x58	; 88
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	0e 94 af 11 	call	0x235e	; 0x235e <_ZN7TwoWire15endTransmissionEv>
          delayMicroseconds(70);
     af4:	86 e4       	ldi	r24, 0x46	; 70
     af6:	90 e0       	ldi	r25, 0x00	; 0
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
          for (byte i = 2; i < argc; i += 2) {
            data = argv[i] + (argv[i + 1] << 7);
            wireWrite(data);
          }
          Wire.endTransmission();
          delayMicroseconds(70);
     b04:	0c 94 0f 09 	jmp	0x121e	; 0x121e <delayMicroseconds>
     b08:	4a 81       	ldd	r20, Y+2	; 0x02
     b0a:	6b 81       	ldd	r22, Y+3	; 0x03
          break;
        case I2C_READ:
          if (argc == 6) {
     b0c:	16 30       	cpi	r17, 0x06	; 6
     b0e:	71 f4       	brne	.+28     	; 0xb2c <_Z13sysexCallbackhhPh+0xc8>
            // a slave register is specified
            slaveRegister = argv[2] + (argv[3] << 7);
     b10:	30 e8       	ldi	r19, 0x80	; 128
     b12:	63 9f       	mul	r22, r19
     b14:	f0 01       	movw	r30, r0
     b16:	11 24       	eor	r1, r1
     b18:	bf 01       	movw	r22, r30
     b1a:	64 0f       	add	r22, r20
     b1c:	71 1d       	adc	r23, r1
            data = argv[4] + (argv[5] << 7);  // bytes to read
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	4c 81       	ldd	r20, Y+4	; 0x04
     b22:	30 e8       	ldi	r19, 0x80	; 128
     b24:	93 9f       	mul	r25, r19
     b26:	40 19       	sub	r20, r0
     b28:	11 24       	eor	r1, r1
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <_Z13sysexCallbackhhPh+0xd4>
          }
          else {
            // a slave register is NOT specified
            slaveRegister = I2C_REGISTER_NOT_SPECIFIED;
            data = argv[2] + (argv[3] << 7);  // bytes to read
     b2c:	90 e8       	ldi	r25, 0x80	; 128
     b2e:	69 9f       	mul	r22, r25
     b30:	40 19       	sub	r20, r0
     b32:	11 24       	eor	r1, r1
            slaveRegister = argv[2] + (argv[3] << 7);
            data = argv[4] + (argv[5] << 7);  // bytes to read
          }
          else {
            // a slave register is NOT specified
            slaveRegister = I2C_REGISTER_NOT_SPECIFIED;
     b34:	6f ef       	ldi	r22, 0xFF	; 255
     b36:	7f ef       	ldi	r23, 0xFF	; 255
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
          else {
            // a slave register is NOT specified
            slaveRegister = I2C_REGISTER_NOT_SPECIFIED;
            data = argv[2] + (argv[3] << 7);  // bytes to read
          }
          readAndReportData(slaveAddress, (int)slaveRegister, data, stopTX);
     b44:	0c 94 be 04 	jmp	0x97c	; 0x97c <_Z17readAndReportDatahihh>
          break;
        case I2C_READ_CONTINUOUSLY:
          if ((queryIndex + 1) >= I2C_MAX_QUERIES) {
     b48:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <queryIndex>
     b4c:	e7 30       	cpi	r30, 0x07	; 7
     b4e:	64 f0       	brlt	.+24     	; 0xb68 <_Z13sysexCallbackhhPh+0x104>
            // too many queries, just ignore
            Firmata.sendString("too many queries");
     b50:	68 e9       	ldi	r22, 0x98	; 152
     b52:	71 e0       	ldi	r23, 0x01	; 1
     b54:	88 e9       	ldi	r24, 0x98	; 152
     b56:	92 e0       	ldi	r25, 0x02	; 2
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
          readAndReportData(slaveAddress, (int)slaveRegister, data, stopTX);
          break;
        case I2C_READ_CONTINUOUSLY:
          if ((queryIndex + 1) >= I2C_MAX_QUERIES) {
            // too many queries, just ignore
            Firmata.sendString("too many queries");
     b64:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_ZN12FirmataClass10sendStringEPKc>
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	4b 81       	ldd	r20, Y+3	; 0x03
            break;
          }
          if (argc == 6) {
            // a slave register is specified
            slaveRegister = argv[2] + (argv[3] << 7);
     b6c:	30 e8       	ldi	r19, 0x80	; 128
          if ((queryIndex + 1) >= I2C_MAX_QUERIES) {
            // too many queries, just ignore
            Firmata.sendString("too many queries");
            break;
          }
          if (argc == 6) {
     b6e:	66 30       	cpi	r22, 0x06	; 6
     b70:	61 f4       	brne	.+24     	; 0xb8a <_Z13sysexCallbackhhPh+0x126>
            // a slave register is specified
            slaveRegister = argv[2] + (argv[3] << 7);
     b72:	43 9f       	mul	r20, r19
     b74:	a0 01       	movw	r20, r0
     b76:	11 24       	eor	r1, r1
     b78:	49 0f       	add	r20, r25
     b7a:	51 1d       	adc	r21, r1
            data = argv[4] + (argv[5] << 7);  // bytes to read
     b7c:	3d 81       	ldd	r19, Y+5	; 0x05
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	60 e8       	ldi	r22, 0x80	; 128
     b82:	36 9f       	mul	r19, r22
     b84:	90 19       	sub	r25, r0
     b86:	11 24       	eor	r1, r1
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <_Z13sysexCallbackhhPh+0x130>
          }
          else {
            // a slave register is NOT specified
            slaveRegister = (int)I2C_REGISTER_NOT_SPECIFIED;
            data = argv[2] + (argv[3] << 7);  // bytes to read
     b8a:	43 9f       	mul	r20, r19
     b8c:	90 19       	sub	r25, r0
     b8e:	11 24       	eor	r1, r1
            slaveRegister = argv[2] + (argv[3] << 7);
            data = argv[4] + (argv[5] << 7);  // bytes to read
          }
          else {
            // a slave register is NOT specified
            slaveRegister = (int)I2C_REGISTER_NOT_SPECIFIED;
     b90:	4f ef       	ldi	r20, 0xFF	; 255
     b92:	5f ef       	ldi	r21, 0xFF	; 255
            data = argv[2] + (argv[3] << 7);  // bytes to read
          }
          queryIndex++;
     b94:	ef 5f       	subi	r30, 0xFF	; 255
     b96:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <queryIndex>
          query[queryIndex].addr = slaveAddress;
     b9a:	65 e0       	ldi	r22, 0x05	; 5
     b9c:	e6 02       	muls	r30, r22
     b9e:	f0 01       	movw	r30, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	ec 5a       	subi	r30, 0xAC	; 172
     ba4:	fd 4f       	sbci	r31, 0xFD	; 253
     ba6:	80 83       	st	Z, r24
          query[queryIndex].reg = slaveRegister;
     ba8:	52 83       	std	Z+2, r21	; 0x02
     baa:	41 83       	std	Z+1, r20	; 0x01
          query[queryIndex].bytes = data;
     bac:	93 83       	std	Z+3, r25	; 0x03
          query[queryIndex].stopTX = stopTX;
     bae:	24 83       	std	Z+4, r18	; 0x04
          break;
     bb0:	ce c1       	rjmp	.+924    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        case I2C_STOP_READING:
          byte queryIndexToSkip;
          // if read continuous mode is enabled for only 1 i2c device, disable
          // read continuous reporting for that device
          if (queryIndex <= 0) {
     bb2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <queryIndex>
     bb6:	12 16       	cp	r1, r18
     bb8:	24 f0       	brlt	.+8      	; 0xbc2 <_Z13sysexCallbackhhPh+0x15e>
            queryIndex = -1;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <queryIndex>
     bc0:	c6 c1       	rjmp	.+908    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
     bc2:	90 e0       	ldi	r25, 0x00	; 0
          } else {
            queryIndexToSkip = 0;
            // if read continuous mode is enabled for multiple devices,
            // determine which device to stop reading and remove it's data from
            // the array, shifiting other array data to fill the space
            for (byte i = 0; i < queryIndex + 1; i++) {
     bc4:	62 2f       	mov	r22, r18
     bc6:	02 2e       	mov	r0, r18
     bc8:	00 0c       	add	r0, r0
     bca:	77 0b       	sbc	r23, r23
              if (query[i].addr == slaveAddress) {
     bcc:	35 e0       	ldi	r19, 0x05	; 5
          } else {
            queryIndexToSkip = 0;
            // if read continuous mode is enabled for multiple devices,
            // determine which device to stop reading and remove it's data from
            // the array, shifiting other array data to fill the space
            for (byte i = 0; i < queryIndex + 1; i++) {
     bce:	49 2f       	mov	r20, r25
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	64 17       	cp	r22, r20
     bd4:	75 07       	cpc	r23, r21
     bd6:	74 f0       	brlt	.+28     	; 0xbf4 <_Z13sysexCallbackhhPh+0x190>
              if (query[i].addr == slaveAddress) {
     bd8:	34 9f       	mul	r19, r20
     bda:	f0 01       	movw	r30, r0
     bdc:	35 9f       	mul	r19, r21
     bde:	f0 0d       	add	r31, r0
     be0:	11 24       	eor	r1, r1
     be2:	ec 5a       	subi	r30, 0xAC	; 172
     be4:	fd 4f       	sbci	r31, 0xFD	; 253
     be6:	40 81       	ld	r20, Z
     be8:	48 13       	cpse	r20, r24
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <_Z13sysexCallbackhhPh+0x18c>
              }
            }

            for (byte i = queryIndexToSkip; i < queryIndex + 1; i++) {
              if (i < I2C_MAX_QUERIES) {
                query[i].addr = query[i + 1].addr;
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	26 c0       	rjmp	.+76     	; 0xc3c <_Z13sysexCallbackhhPh+0x1d8>
          } else {
            queryIndexToSkip = 0;
            // if read continuous mode is enabled for multiple devices,
            // determine which device to stop reading and remove it's data from
            // the array, shifiting other array data to fill the space
            for (byte i = 0; i < queryIndex + 1; i++) {
     bf0:	9f 5f       	subi	r25, 0xFF	; 255
     bf2:	ed cf       	rjmp	.-38     	; 0xbce <_Z13sysexCallbackhhPh+0x16a>
          // if read continuous mode is enabled for only 1 i2c device, disable
          // read continuous reporting for that device
          if (queryIndex <= 0) {
            queryIndex = -1;
          } else {
            queryIndexToSkip = 0;
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fa cf       	rjmp	.-12     	; 0xbec <_Z13sysexCallbackhhPh+0x188>
                break;
              }
            }

            for (byte i = queryIndexToSkip; i < queryIndex + 1; i++) {
              if (i < I2C_MAX_QUERIES) {
     bf8:	98 30       	cpi	r25, 0x08	; 8
     bfa:	f8 f4       	brcc	.+62     	; 0xc3a <_Z13sysexCallbackhhPh+0x1d6>
                query[i].addr = query[i + 1].addr;
     bfc:	fa 01       	movw	r30, r20
     bfe:	31 96       	adiw	r30, 0x01	; 1
     c00:	8e 9f       	mul	r24, r30
     c02:	d0 01       	movw	r26, r0
     c04:	8f 9f       	mul	r24, r31
     c06:	b0 0d       	add	r27, r0
     c08:	11 24       	eor	r1, r1
     c0a:	ac 5a       	subi	r26, 0xAC	; 172
     c0c:	bd 4f       	sbci	r27, 0xFD	; 253
     c0e:	3c 91       	ld	r19, X
     c10:	84 9f       	mul	r24, r20
     c12:	f0 01       	movw	r30, r0
     c14:	85 9f       	mul	r24, r21
     c16:	f0 0d       	add	r31, r0
     c18:	11 24       	eor	r1, r1
     c1a:	ec 5a       	subi	r30, 0xAC	; 172
     c1c:	fd 4f       	sbci	r31, 0xFD	; 253
     c1e:	30 83       	st	Z, r19
                query[i].reg = query[i + 1].reg;
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	4d 91       	ld	r20, X+
     c24:	5c 91       	ld	r21, X
     c26:	12 97       	sbiw	r26, 0x02	; 2
     c28:	52 83       	std	Z+2, r21	; 0x02
     c2a:	41 83       	std	Z+1, r20	; 0x01
                query[i].bytes = query[i + 1].bytes;
     c2c:	13 96       	adiw	r26, 0x03	; 3
     c2e:	3c 91       	ld	r19, X
     c30:	13 97       	sbiw	r26, 0x03	; 3
     c32:	33 83       	std	Z+3, r19	; 0x03
                query[i].stopTX = query[i + 1].stopTX;
     c34:	14 96       	adiw	r26, 0x04	; 4
     c36:	3c 91       	ld	r19, X
     c38:	34 83       	std	Z+4, r19	; 0x04
                queryIndexToSkip = i;
                break;
              }
            }

            for (byte i = queryIndexToSkip; i < queryIndex + 1; i++) {
     c3a:	9f 5f       	subi	r25, 0xFF	; 255
     c3c:	49 2f       	mov	r20, r25
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	64 17       	cp	r22, r20
     c42:	75 07       	cpc	r23, r21
     c44:	cc f6       	brge	.-78     	; 0xbf8 <_Z13sysexCallbackhhPh+0x194>
                query[i].reg = query[i + 1].reg;
                query[i].bytes = query[i + 1].bytes;
                query[i].stopTX = query[i + 1].stopTX;
              }
            }
            queryIndex--;
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <queryIndex>
     c4c:	80 c1       	rjmp	.+768    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        default:
          break;
      }
      break;
    case I2C_CONFIG:
      delayTime = (argv[0] + (argv[1] << 7));
     c4e:	28 81       	ld	r18, Y
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	30 e8       	ldi	r19, 0x80	; 128
     c54:	83 9f       	mul	r24, r19
     c56:	c0 01       	movw	r24, r0
     c58:	11 24       	eor	r1, r1
     c5a:	82 0f       	add	r24, r18
     c5c:	91 1d       	adc	r25, r1

      if (delayTime > 0) {
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	21 f0       	breq	.+8      	; 0xc6a <_Z13sysexCallbackhhPh+0x206>
        i2cReadDelayTime = delayTime;
     c62:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <i2cReadDelayTime+0x1>
     c66:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <i2cReadDelayTime>
      }

      if (!isI2CEnabled) {
     c6a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <isI2CEnabled>
     c6e:	81 11       	cpse	r24, r1
     c70:	6e c1       	rjmp	.+732    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
      if (delayTime > 0) {
        i2cReadDelayTime = delayTime;
      }

      if (!isI2CEnabled) {
        enableI2CPins();
     c7e:	0c 94 89 03 	jmp	0x712	; 0x712 <_Z13enableI2CPinsv>
      }

      break;
    case SERVO_CONFIG:
      if (argc > 4) {
     c82:	65 30       	cpi	r22, 0x05	; 5
     c84:	08 f4       	brcc	.+2      	; 0xc88 <_Z13sysexCallbackhhPh+0x224>
     c86:	63 c1       	rjmp	.+710    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        // these vars are here for clarity, they'll optimized away by the compiler
        byte pin = argv[0];
     c88:	18 81       	ld	r17, Y
        int minPulse = argv[1] + (argv[2] << 7);
     c8a:	f9 80       	ldd	r15, Y+1	; 0x01
     c8c:	0a 81       	ldd	r16, Y+2	; 0x02
        int maxPulse = argv[3] + (argv[4] << 7);
     c8e:	eb 80       	ldd	r14, Y+3	; 0x03
     c90:	cc 81       	ldd	r28, Y+4	; 0x04

        if (IS_PIN_DIGITAL(pin)) {
     c92:	8e ef       	ldi	r24, 0xFE	; 254
     c94:	81 0f       	add	r24, r17
     c96:	82 31       	cpi	r24, 0x12	; 18
     c98:	08 f0       	brcs	.+2      	; 0xc9c <_Z13sysexCallbackhhPh+0x238>
     c9a:	59 c1       	rjmp	.+690    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
          if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
     c9c:	e1 2f       	mov	r30, r17
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	e7 52       	subi	r30, 0x27	; 39
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	20 81       	ld	r18, Z
     ca6:	2c 30       	cpi	r18, 0x0C	; 12
     ca8:	60 f4       	brcc	.+24     	; 0xcc2 <_Z13sysexCallbackhhPh+0x25e>
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	c9 01       	movw	r24, r18
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	83 51       	subi	r24, 0x13	; 19
     cb8:	9e 4f       	sbci	r25, 0xFE	; 254
     cba:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Servo8attachedEv>
     cbe:	81 11       	cpse	r24, r1
     cc0:	42 c1       	rjmp	.+644    	; 0xf46 <_Z13sysexCallbackhhPh+0x4e2>
    case SERVO_CONFIG:
      if (argc > 4) {
        // these vars are here for clarity, they'll optimized away by the compiler
        byte pin = argv[0];
        int minPulse = argv[1] + (argv[2] << 7);
        int maxPulse = argv[3] + (argv[4] << 7);
     cc2:	60 e8       	ldi	r22, 0x80	; 128
     cc4:	c6 9f       	mul	r28, r22
     cc6:	a0 01       	movw	r20, r0
     cc8:	11 24       	eor	r1, r1
     cca:	4e 0d       	add	r20, r14
     ccc:	51 1d       	adc	r21, r1
      break;
    case SERVO_CONFIG:
      if (argc > 4) {
        // these vars are here for clarity, they'll optimized away by the compiler
        byte pin = argv[0];
        int minPulse = argv[1] + (argv[2] << 7);
     cce:	80 e8       	ldi	r24, 0x80	; 128
     cd0:	08 9f       	mul	r16, r24
     cd2:	b0 01       	movw	r22, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	6f 0d       	add	r22, r15
     cd8:	71 1d       	adc	r23, r1

        if (IS_PIN_DIGITAL(pin)) {
          if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
            detachServo(pin);
          }
          attachServo(pin, minPulse, maxPulse);
     cda:	81 2f       	mov	r24, r17
     cdc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z11attachServohii>
          setPinModeCallback(pin, PIN_MODE_SERVO);
     ce0:	64 e0       	ldi	r22, 0x04	; 4
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	81 2f       	mov	r24, r17
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
        if (IS_PIN_DIGITAL(pin)) {
          if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
            detachServo(pin);
          }
          attachServo(pin, minPulse, maxPulse);
          setPinModeCallback(pin, PIN_MODE_SERVO);
     cf2:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_Z18setPinModeCallbackhi>
        }
      }
      break;
    case SAMPLING_INTERVAL:
      if (argc > 1) {
     cf6:	62 30       	cpi	r22, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <_Z13sysexCallbackhhPh+0x298>
     cfa:	29 c1       	rjmp	.+594    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        samplingInterval = argv[0] + (argv[1] << 7);
     cfc:	28 81       	ld	r18, Y
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	30 e8       	ldi	r19, 0x80	; 128
     d02:	83 9f       	mul	r24, r19
     d04:	c0 01       	movw	r24, r0
     d06:	11 24       	eor	r1, r1
     d08:	82 0f       	add	r24, r18
     d0a:	91 1d       	adc	r25, r1
        if (samplingInterval < MINIMUM_SAMPLING_INTERVAL) {
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	11 f4       	brne	.+4      	; 0xd14 <_Z13sysexCallbackhhPh+0x2b0>
          samplingInterval = MINIMUM_SAMPLING_INTERVAL;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <samplingInterval+0x1>
     d18:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <samplingInterval>
     d1c:	18 c1       	rjmp	.+560    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
      } else {
        //Firmata.sendString("Not enough data");
      }
      break;
    case EXTENDED_ANALOG:
      if (argc > 1) {
     d1e:	62 30       	cpi	r22, 0x02	; 2
     d20:	08 f4       	brcc	.+2      	; 0xd24 <_Z13sysexCallbackhhPh+0x2c0>
     d22:	15 c1       	rjmp	.+554    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        int val = argv[1];
     d24:	69 81       	ldd	r22, Y+1	; 0x01
     d26:	70 e0       	ldi	r23, 0x00	; 0
        if (argc > 2) val |= (argv[2] << 7);
     d28:	12 30       	cpi	r17, 0x02	; 2
     d2a:	91 f0       	breq	.+36     	; 0xd50 <_Z13sysexCallbackhhPh+0x2ec>
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	20 e8       	ldi	r18, 0x80	; 128
     d30:	82 9f       	mul	r24, r18
     d32:	c0 01       	movw	r24, r0
     d34:	11 24       	eor	r1, r1
     d36:	68 2b       	or	r22, r24
     d38:	79 2b       	or	r23, r25
        if (argc > 3) val |= (argv[3] << 14);
     d3a:	13 30       	cpi	r17, 0x03	; 3
     d3c:	49 f0       	breq	.+18     	; 0xd50 <_Z13sysexCallbackhhPh+0x2ec>
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 e4       	ldi	r25, 0x40	; 64
     d44:	89 9f       	mul	r24, r25
     d46:	90 2d       	mov	r25, r0
     d48:	88 27       	eor	r24, r24
     d4a:	11 24       	eor	r1, r1
     d4c:	68 2b       	or	r22, r24
     d4e:	79 2b       	or	r23, r25
        analogWriteCallback(argv[0], val);
     d50:	88 81       	ld	r24, Y
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
    case EXTENDED_ANALOG:
      if (argc > 1) {
        int val = argv[1];
        if (argc > 2) val |= (argv[2] << 7);
        if (argc > 3) val |= (argv[3] << 14);
        analogWriteCallback(argv[0], val);
     d5e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_Z19analogWriteCallbackhi>
      }
      break;
    case CAPABILITY_QUERY:
      Firmata.write(START_SYSEX);
     d62:	60 ef       	ldi	r22, 0xF0	; 240
     d64:	88 e9       	ldi	r24, 0x98	; 152
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
      Firmata.write(CAPABILITY_RESPONSE);
     d6c:	6c e6       	ldi	r22, 0x6C	; 108
     d6e:	88 e9       	ldi	r24, 0x98	; 152
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     d76:	ce ef       	ldi	r28, 0xFE	; 254
     d78:	84 ef       	ldi	r24, 0xF4	; 244
     d7a:	8c 0f       	add	r24, r28
          Firmata.write((byte)PIN_MODE_PULLUP);
          Firmata.write(1);
          Firmata.write((byte)OUTPUT);
          Firmata.write(1);
        }
        if (IS_PIN_ANALOG(pin)) {
     d7c:	86 30       	cpi	r24, 0x06	; 6
     d7e:	58 f4       	brcc	.+22     	; 0xd96 <_Z13sysexCallbackhhPh+0x332>
          Firmata.write(PIN_MODE_ANALOG);
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	88 e9       	ldi	r24, 0x98	; 152
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(10); // 10 = 10-bit resolution
     d8a:	6a e0       	ldi	r22, 0x0A	; 10
     d8c:	88 e9       	ldi	r24, 0x98	; 152
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <_Z13sysexCallbackhhPh+0x34c>
        }
        if (IS_PIN_PWM(pin)) {
     d96:	c1 30       	cpi	r28, 0x01	; 1
     d98:	59 f4       	brne	.+22     	; 0xdb0 <_Z13sysexCallbackhhPh+0x34c>
          Firmata.write(PIN_MODE_PWM);
     d9a:	63 e0       	ldi	r22, 0x03	; 3
     d9c:	88 e9       	ldi	r24, 0x98	; 152
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(DEFAULT_PWM_RESOLUTION);
     da4:	68 e0       	ldi	r22, 0x08	; 8
     da6:	88 e9       	ldi	r24, 0x98	; 152
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     dae:	08 c0       	rjmp	.+16     	; 0xdc0 <_Z13sysexCallbackhhPh+0x35c>
     db0:	8d ef       	ldi	r24, 0xFD	; 253
     db2:	8c 0f       	add	r24, r28
        }
        if (IS_PIN_ANALOG(pin)) {
          Firmata.write(PIN_MODE_ANALOG);
          Firmata.write(10); // 10 = 10-bit resolution
        }
        if (IS_PIN_PWM(pin)) {
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	88 f3       	brcs	.-30     	; 0xd9a <_Z13sysexCallbackhhPh+0x336>
     db8:	89 ef       	ldi	r24, 0xF9	; 249
     dba:	8c 0f       	add	r24, r28
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	68 f3       	brcs	.-38     	; 0xd9a <_Z13sysexCallbackhhPh+0x336>
          Firmata.write(PIN_MODE_PWM);
          Firmata.write(DEFAULT_PWM_RESOLUTION);
        }
        if (IS_PIN_DIGITAL(pin)) {
     dc0:	c2 31       	cpi	r28, 0x12	; 18
     dc2:	50 f4       	brcc	.+20     	; 0xdd8 <_Z13sysexCallbackhhPh+0x374>
          Firmata.write(PIN_MODE_SERVO);
     dc4:	64 e0       	ldi	r22, 0x04	; 4
     dc6:	88 e9       	ldi	r24, 0x98	; 152
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(14);
     dce:	6e e0       	ldi	r22, 0x0E	; 14
     dd0:	88 e9       	ldi	r24, 0x98	; 152
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     dd8:	80 ef       	ldi	r24, 0xF0	; 240
     dda:	8c 0f       	add	r24, r28
        }
        if (IS_PIN_I2C(pin)) {
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	50 f4       	brcc	.+20     	; 0xdf4 <_Z13sysexCallbackhhPh+0x390>
          Firmata.write(PIN_MODE_I2C);
     de0:	66 e0       	ldi	r22, 0x06	; 6
     de2:	88 e9       	ldi	r24, 0x98	; 152
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(1);  // TODO: could assign a number to map to SCL or SDA
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	88 e9       	ldi	r24, 0x98	; 152
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
        }
#ifdef FIRMATA_SERIAL_FEATURE
        serialFeature.handleCapability(pin);
#endif
        Firmata.write(127);
     df4:	6f e7       	ldi	r22, 0x7F	; 127
     df6:	88 e9       	ldi	r24, 0x98	; 152
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     dfe:	cf 5f       	subi	r28, 0xFF	; 255
      }
      break;
    case CAPABILITY_QUERY:
      Firmata.write(START_SYSEX);
      Firmata.write(CAPABILITY_RESPONSE);
      for (byte pin = 0; pin < TOTAL_PINS; pin++) {
     e00:	c2 31       	cpi	r28, 0x12	; 18
     e02:	b9 f1       	breq	.+110    	; 0xe72 <_Z13sysexCallbackhhPh+0x40e>
        if (IS_PIN_DIGITAL(pin)) {
     e04:	c2 31       	cpi	r28, 0x12	; 18
     e06:	08 f0       	brcs	.+2      	; 0xe0a <_Z13sysexCallbackhhPh+0x3a6>
     e08:	b7 cf       	rjmp	.-146    	; 0xd78 <_Z13sysexCallbackhhPh+0x314>
          Firmata.write((byte)INPUT);
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	88 e9       	ldi	r24, 0x98	; 152
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(1);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	88 e9       	ldi	r24, 0x98	; 152
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write((byte)PIN_MODE_PULLUP);
     e1e:	6b e0       	ldi	r22, 0x0B	; 11
     e20:	88 e9       	ldi	r24, 0x98	; 152
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(1);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	88 e9       	ldi	r24, 0x98	; 152
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write((byte)OUTPUT);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	88 e9       	ldi	r24, 0x98	; 152
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write(1);
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	88 e9       	ldi	r24, 0x98	; 152
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     e46:	98 cf       	rjmp	.-208    	; 0xd78 <_Z13sysexCallbackhhPh+0x314>
        Firmata.write(127);
      }
      Firmata.write(END_SYSEX);
      break;
    case PIN_STATE_QUERY:
      if (argc > 0) {
     e48:	66 23       	and	r22, r22
     e4a:	09 f4       	brne	.+2      	; 0xe4e <_Z13sysexCallbackhhPh+0x3ea>
     e4c:	80 c0       	rjmp	.+256    	; 0xf4e <_Z13sysexCallbackhhPh+0x4ea>
        byte pin = argv[0];
     e4e:	c8 81       	ld	r28, Y
        Firmata.write(START_SYSEX);
     e50:	60 ef       	ldi	r22, 0xF0	; 240
     e52:	88 e9       	ldi	r24, 0x98	; 152
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
        Firmata.write(PIN_STATE_RESPONSE);
     e5a:	6e e6       	ldi	r22, 0x6E	; 110
     e5c:	88 e9       	ldi	r24, 0x98	; 152
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
        Firmata.write(pin);
     e64:	6c 2f       	mov	r22, r28
     e66:	88 e9       	ldi	r24, 0x98	; 152
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
        if (pin < TOTAL_PINS) {
     e6e:	c4 31       	cpi	r28, 0x14	; 20
     e70:	58 f0       	brcs	.+22     	; 0xe88 <_Z13sysexCallbackhhPh+0x424>
#ifdef FIRMATA_SERIAL_FEATURE
        serialFeature.handleCapability(pin);
#endif
        Firmata.write(127);
      }
      Firmata.write(END_SYSEX);
     e72:	67 ef       	ldi	r22, 0xF7	; 247
     e74:	88 e9       	ldi	r24, 0x98	; 152
     e76:	92 e0       	ldi	r25, 0x02	; 2
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
#ifdef FIRMATA_SERIAL_FEATURE
        serialFeature.handleCapability(pin);
#endif
        Firmata.write(127);
      }
      Firmata.write(END_SYSEX);
     e84:	0c 94 87 0c 	jmp	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
        byte pin = argv[0];
        Firmata.write(START_SYSEX);
        Firmata.write(PIN_STATE_RESPONSE);
        Firmata.write(pin);
        if (pin < TOTAL_PINS) {
          Firmata.write(Firmata.getPinMode(pin));
     e88:	6c 2f       	mov	r22, r28
     e8a:	88 e9       	ldi	r24, 0x98	; 152
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
     e92:	68 2f       	mov	r22, r24
     e94:	88 e9       	ldi	r24, 0x98	; 152
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          Firmata.write((byte)Firmata.getPinState(pin) & 0x7F);
     e9c:	6c 2f       	mov	r22, r28
     e9e:	88 e9       	ldi	r24, 0x98	; 152
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     ea6:	68 2f       	mov	r22, r24
     ea8:	6f 77       	andi	r22, 0x7F	; 127
     eaa:	88 e9       	ldi	r24, 0x98	; 152
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          if (Firmata.getPinState(pin) & 0xFF80) Firmata.write((byte)(Firmata.getPinState(pin) >> 7) & 0x7F);
     eb2:	6c 2f       	mov	r22, r28
     eb4:	88 e9       	ldi	r24, 0x98	; 152
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     ebc:	80 78       	andi	r24, 0x80	; 128
     ebe:	89 2b       	or	r24, r25
     ec0:	79 f0       	breq	.+30     	; 0xee0 <_Z13sysexCallbackhhPh+0x47c>
     ec2:	6c 2f       	mov	r22, r28
     ec4:	88 e9       	ldi	r24, 0x98	; 152
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     ecc:	88 0f       	add	r24, r24
     ece:	89 2f       	mov	r24, r25
     ed0:	88 1f       	adc	r24, r24
     ed2:	99 0b       	sbc	r25, r25
     ed4:	68 2f       	mov	r22, r24
     ed6:	6f 77       	andi	r22, 0x7F	; 127
     ed8:	88 e9       	ldi	r24, 0x98	; 152
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
          if (Firmata.getPinState(pin) & 0xC000) Firmata.write((byte)(Firmata.getPinState(pin) >> 14) & 0x7F);
     ee0:	6c 2f       	mov	r22, r28
     ee2:	88 e9       	ldi	r24, 0x98	; 152
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     eea:	88 27       	eor	r24, r24
     eec:	90 7c       	andi	r25, 0xC0	; 192
     eee:	89 2b       	or	r24, r25
     ef0:	09 f4       	brne	.+2      	; 0xef4 <_Z13sysexCallbackhhPh+0x490>
     ef2:	bf cf       	rjmp	.-130    	; 0xe72 <_Z13sysexCallbackhhPh+0x40e>
     ef4:	6c 2f       	mov	r22, r28
     ef6:	88 e9       	ldi	r24, 0x98	; 152
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN12FirmataClass11getPinStateEh>
     efe:	99 0f       	add	r25, r25
     f00:	88 0b       	sbc	r24, r24
     f02:	99 0f       	add	r25, r25
     f04:	98 2f       	mov	r25, r24
     f06:	88 1f       	adc	r24, r24
     f08:	68 2f       	mov	r22, r24
     f0a:	6f 77       	andi	r22, 0x7F	; 127
     f0c:	88 e9       	ldi	r24, 0x98	; 152
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     f14:	ae cf       	rjmp	.-164    	; 0xe72 <_Z13sysexCallbackhhPh+0x40e>
        }
        Firmata.write(END_SYSEX);
      }
      break;
    case ANALOG_MAPPING_QUERY:
      Firmata.write(START_SYSEX);
     f16:	60 ef       	ldi	r22, 0xF0	; 240
     f18:	88 e9       	ldi	r24, 0x98	; 152
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
      Firmata.write(ANALOG_MAPPING_RESPONSE);
     f20:	6a e6       	ldi	r22, 0x6A	; 106
     f22:	88 e9       	ldi	r24, 0x98	; 152
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     f2a:	c2 ef       	ldi	r28, 0xF2	; 242
      for (byte pin = 0; pin < TOTAL_PINS; pin++) {
        Firmata.write(IS_PIN_ANALOG(pin) ? PIN_TO_ANALOG(pin) : 127);
     f2c:	c6 30       	cpi	r28, 0x06	; 6
     f2e:	10 f4       	brcc	.+4      	; 0xf34 <_Z13sysexCallbackhhPh+0x4d0>
     f30:	6c 2f       	mov	r22, r28
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <_Z13sysexCallbackhhPh+0x4d2>
     f34:	6f e7       	ldi	r22, 0x7F	; 127
     f36:	88 e9       	ldi	r24, 0x98	; 152
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12FirmataClass5writeEh>
     f3e:	cf 5f       	subi	r28, 0xFF	; 255
      }
      break;
    case ANALOG_MAPPING_QUERY:
      Firmata.write(START_SYSEX);
      Firmata.write(ANALOG_MAPPING_RESPONSE);
      for (byte pin = 0; pin < TOTAL_PINS; pin++) {
     f40:	c6 30       	cpi	r28, 0x06	; 6
     f42:	a1 f7       	brne	.-24     	; 0xf2c <_Z13sysexCallbackhhPh+0x4c8>
     f44:	96 cf       	rjmp	.-212    	; 0xe72 <_Z13sysexCallbackhhPh+0x40e>
        int minPulse = argv[1] + (argv[2] << 7);
        int maxPulse = argv[3] + (argv[4] << 7);

        if (IS_PIN_DIGITAL(pin)) {
          if (servoPinMap[pin] < MAX_SERVOS && servos[servoPinMap[pin]].attached()) {
            detachServo(pin);
     f46:	81 2f       	mov	r24, r17
     f48:	0e 94 33 02 	call	0x466	; 0x466 <_Z11detachServoh>
     f4c:	ba ce       	rjmp	.-652    	; 0xcc2 <_Z13sysexCallbackhhPh+0x25e>
#ifdef FIRMATA_SERIAL_FEATURE
      serialFeature.handleSysex(command, argc, argv);
#endif
      break;
  }
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <loop>:

/*==============================================================================
 * LOOP()
 *============================================================================*/
void loop()
{
     f5c:	8f 92       	push	r8
     f5e:	9f 92       	push	r9
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
  byte pin, analogPin;

  /* DIGITALREAD - as fast as possible, check for changes and output them to the
   * FTDI buffer using Serial.print()  */
  checkDigitalInputs();
     f72:	0e 94 2b 04 	call	0x856	; 0x856 <_Z18checkDigitalInputsv>

  /* STREAMREAD - processing incoming messagse as soon as possible, while still
   * checking digital inputs.  */
  while (Firmata.available())
     f76:	88 e9       	ldi	r24, 0x98	; 152
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN12FirmataClass9availableEv>
     f7e:	89 2b       	or	r24, r25
     f80:	29 f0       	breq	.+10     	; 0xf8c <loop+0x30>
    Firmata.processInput();
     f82:	88 e9       	ldi	r24, 0x98	; 152
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12FirmataClass12processInputEv>
     f8a:	f5 cf       	rjmp	.-22     	; 0xf76 <loop+0x1a>

  // TODO - ensure that Stream buffer doesn't go over 60 bytes

  currentMillis = millis();
     f8c:	0e 94 a2 08 	call	0x1144	; 0x1144 <millis>
     f90:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <currentMillis>
     f94:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <currentMillis+0x1>
     f98:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <currentMillis+0x2>
     f9c:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <currentMillis+0x3>
  if (currentMillis - previousMillis > samplingInterval) {
     fa0:	c0 90 7c 02 	lds	r12, 0x027C	; 0x80027c <previousMillis>
     fa4:	d0 90 7d 02 	lds	r13, 0x027D	; 0x80027d <previousMillis+0x1>
     fa8:	e0 90 7e 02 	lds	r14, 0x027E	; 0x80027e <previousMillis+0x2>
     fac:	f0 90 7f 02 	lds	r15, 0x027F	; 0x80027f <previousMillis+0x3>
     fb0:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <samplingInterval>
     fb4:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <samplingInterval+0x1>
     fb8:	4a 01       	movw	r8, r20
     fba:	a1 2c       	mov	r10, r1
     fbc:	b1 2c       	mov	r11, r1
     fbe:	8b 01       	movw	r16, r22
     fc0:	9c 01       	movw	r18, r24
     fc2:	0c 19       	sub	r16, r12
     fc4:	1d 09       	sbc	r17, r13
     fc6:	2e 09       	sbc	r18, r14
     fc8:	3f 09       	sbc	r19, r15
     fca:	80 16       	cp	r8, r16
     fcc:	91 06       	cpc	r9, r17
     fce:	a2 06       	cpc	r10, r18
     fd0:	b3 06       	cpc	r11, r19
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <loop+0x7a>
     fd4:	51 c0       	rjmp	.+162    	; 0x1078 <loop+0x11c>
    previousMillis += samplingInterval;
     fd6:	d5 01       	movw	r26, r10
     fd8:	c4 01       	movw	r24, r8
     fda:	8c 0d       	add	r24, r12
     fdc:	9d 1d       	adc	r25, r13
     fde:	ae 1d       	adc	r26, r14
     fe0:	bf 1d       	adc	r27, r15
     fe2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <previousMillis>
     fe6:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <previousMillis+0x1>
     fea:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <previousMillis+0x2>
     fee:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <previousMillis+0x3>
     ff2:	c2 ef       	ldi	r28, 0xF2	; 242
     ff4:	6e e0       	ldi	r22, 0x0E	; 14
     ff6:	6c 0f       	add	r22, r28
    /* ANALOGREAD - do all analogReads() at the configured sampling interval */
    for (pin = 0; pin < TOTAL_PINS; pin++) {
      if (IS_PIN_ANALOG(pin) && Firmata.getPinMode(pin) == PIN_MODE_ANALOG) {
     ff8:	c6 30       	cpi	r28, 0x06	; 6
     ffa:	d8 f4       	brcc	.+54     	; 0x1032 <loop+0xd6>
     ffc:	88 e9       	ldi	r24, 0x98	; 152
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN12FirmataClass10getPinModeEh>
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	a9 f4       	brne	.+42     	; 0x1032 <loop+0xd6>
        analogPin = PIN_TO_ANALOG(pin);
        if (analogInputsToReport & (1 << analogPin)) {
    1008:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <analogInputsToReport>
    100c:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <analogInputsToReport+0x1>
    1010:	0c 2e       	mov	r0, r28
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <loop+0xbc>
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <loop+0xb8>
    101c:	80 ff       	sbrs	r24, 0
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <loop+0xd6>
          Firmata.sendAnalog(analogPin, analogRead(analogPin));
    1020:	8c 2f       	mov	r24, r28
    1022:	0e 94 55 09 	call	0x12aa	; 0x12aa <analogRead>
    1026:	ac 01       	movw	r20, r24
    1028:	6c 2f       	mov	r22, r28
    102a:	88 e9       	ldi	r24, 0x98	; 152
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN12FirmataClass10sendAnalogEhi>
    1032:	cf 5f       	subi	r28, 0xFF	; 255

  currentMillis = millis();
  if (currentMillis - previousMillis > samplingInterval) {
    previousMillis += samplingInterval;
    /* ANALOGREAD - do all analogReads() at the configured sampling interval */
    for (pin = 0; pin < TOTAL_PINS; pin++) {
    1034:	c6 30       	cpi	r28, 0x06	; 6
    1036:	f1 f6       	brne	.-68     	; 0xff4 <loop+0x98>
          Firmata.sendAnalog(analogPin, analogRead(analogPin));
        }
      }
    }
    // report i2c data for all device with read continuous mode enabled
    if (queryIndex > -1) {
    1038:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <queryIndex>
    103c:	87 fd       	sbrc	r24, 7
    103e:	1c c0       	rjmp	.+56     	; 0x1078 <loop+0x11c>
    1040:	c0 e0       	ldi	r28, 0x00	; 0
      for (byte i = 0; i < queryIndex + 1; i++) {
        readAndReportData(query[i].addr, query[i].reg, query[i].bytes, query[i].stopTX);
    1042:	15 e0       	ldi	r17, 0x05	; 5
        }
      }
    }
    // report i2c data for all device with read continuous mode enabled
    if (queryIndex > -1) {
      for (byte i = 0; i < queryIndex + 1; i++) {
    1044:	2c 2f       	mov	r18, r28
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <queryIndex>
    104c:	08 2e       	mov	r0, r24
    104e:	00 0c       	add	r0, r0
    1050:	99 0b       	sbc	r25, r25
    1052:	82 17       	cp	r24, r18
    1054:	93 07       	cpc	r25, r19
    1056:	84 f0       	brlt	.+32     	; 0x1078 <loop+0x11c>
        readAndReportData(query[i].addr, query[i].reg, query[i].bytes, query[i].stopTX);
    1058:	12 9f       	mul	r17, r18
    105a:	f0 01       	movw	r30, r0
    105c:	13 9f       	mul	r17, r19
    105e:	f0 0d       	add	r31, r0
    1060:	11 24       	eor	r1, r1
    1062:	ec 5a       	subi	r30, 0xAC	; 172
    1064:	fd 4f       	sbci	r31, 0xFD	; 253
    1066:	61 81       	ldd	r22, Z+1	; 0x01
    1068:	72 81       	ldd	r23, Z+2	; 0x02
    106a:	24 81       	ldd	r18, Z+4	; 0x04
    106c:	43 81       	ldd	r20, Z+3	; 0x03
    106e:	80 81       	ld	r24, Z
    1070:	0e 94 be 04 	call	0x97c	; 0x97c <_Z17readAndReportDatahihh>
        }
      }
    }
    // report i2c data for all device with read continuous mode enabled
    if (queryIndex > -1) {
      for (byte i = 0; i < queryIndex + 1; i++) {
    1074:	cf 5f       	subi	r28, 0xFF	; 255
    1076:	e6 cf       	rjmp	.-52     	; 0x1044 <loop+0xe8>
  }

#ifdef FIRMATA_SERIAL_FEATURE
  serialFeature.update();
#endif
}
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	08 95       	ret

00001090 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1090:	08 95       	ret

00001092 <main>:

int main(void)
{
	init();
    1092:	0e 94 1a 09 	call	0x1234	; 0x1234 <init>

	initVariant();
    1096:	0e 94 48 08 	call	0x1090	; 0x1090 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    109a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    109e:	c4 ee       	ldi	r28, 0xE4	; 228
    10a0:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    10a2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <loop>
		if (serialEventRun) serialEventRun();
    10a6:	20 97       	sbiw	r28, 0x00	; 0
    10a8:	e1 f3       	breq	.-8      	; 0x10a2 <main+0x10>
    10aa:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_Z14serialEventRunv>
    10ae:	f9 cf       	rjmp	.-14     	; 0x10a2 <main+0x10>

000010b0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    10b0:	1f 92       	push	r1
    10b2:	0f 92       	push	r0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	0f 92       	push	r0
    10b8:	11 24       	eor	r1, r1
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    10c6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <timer0_millis>
    10ca:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <timer0_millis+0x1>
    10ce:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <timer0_millis+0x2>
    10d2:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    10d6:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    10da:	23 e0       	ldi	r18, 0x03	; 3
    10dc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    10de:	2d 37       	cpi	r18, 0x7D	; 125
    10e0:	20 f4       	brcc	.+8      	; 0x10ea <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	b1 1d       	adc	r27, r1
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    10ea:	26 e8       	ldi	r18, 0x86	; 134
    10ec:	23 0f       	add	r18, r19
		m += 1;
    10ee:	02 96       	adiw	r24, 0x02	; 2
    10f0:	a1 1d       	adc	r26, r1
    10f2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    10f4:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <timer0_fract>
	timer0_millis = m;
    10f8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <timer0_millis>
    10fc:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <timer0_millis+0x1>
    1100:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <timer0_millis+0x2>
    1104:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <timer0_millis+0x3>
	timer0_overflow_count++;
    1108:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer0_overflow_count>
    110c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <timer0_overflow_count+0x1>
    1110:	a0 91 96 02 	lds	r26, 0x0296	; 0x800296 <timer0_overflow_count+0x2>
    1114:	b0 91 97 02 	lds	r27, 0x0297	; 0x800297 <timer0_overflow_count+0x3>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	a1 1d       	adc	r26, r1
    111c:	b1 1d       	adc	r27, r1
    111e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timer0_overflow_count>
    1122:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timer0_overflow_count+0x1>
    1126:	a0 93 96 02 	sts	0x0296, r26	; 0x800296 <timer0_overflow_count+0x2>
    112a:	b0 93 97 02 	sts	0x0297, r27	; 0x800297 <timer0_overflow_count+0x3>
}
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1144:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1146:	f8 94       	cli
	m = timer0_millis;
    1148:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <timer0_millis>
    114c:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <timer0_millis+0x1>
    1150:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <timer0_millis+0x2>
    1154:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <timer0_millis+0x3>
	SREG = oldSREG;
    1158:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    115a:	08 95       	ret

0000115c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    115c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    115e:	f8 94       	cli
	m = timer0_overflow_count;
    1160:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer0_overflow_count>
    1164:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <timer0_overflow_count+0x1>
    1168:	a0 91 96 02 	lds	r26, 0x0296	; 0x800296 <timer0_overflow_count+0x2>
    116c:	b0 91 97 02 	lds	r27, 0x0297	; 0x800297 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1170:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1172:	a8 9b       	sbis	0x15, 0	; 21
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <micros+0x24>
    1176:	2f 3f       	cpi	r18, 0xFF	; 255
    1178:	19 f0       	breq	.+6      	; 0x1180 <micros+0x24>
		m++;
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	a1 1d       	adc	r26, r1
    117e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1180:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1182:	ba 2f       	mov	r27, r26
    1184:	a9 2f       	mov	r26, r25
    1186:	98 2f       	mov	r25, r24
    1188:	88 27       	eor	r24, r24
    118a:	82 0f       	add	r24, r18
    118c:	91 1d       	adc	r25, r1
    118e:	a1 1d       	adc	r26, r1
    1190:	b1 1d       	adc	r27, r1
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	42 e0       	ldi	r20, 0x02	; 2
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	4a 95       	dec	r20
    11a2:	d1 f7       	brne	.-12     	; 0x1198 <micros+0x3c>
}
    11a4:	08 95       	ret

000011a6 <delay>:

void delay(unsigned long ms)
{
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	6b 01       	movw	r12, r22
    11b8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    11ba:	0e 94 ae 08 	call	0x115c	; 0x115c <micros>
    11be:	4b 01       	movw	r8, r22
    11c0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    11c2:	c1 14       	cp	r12, r1
    11c4:	d1 04       	cpc	r13, r1
    11c6:	e1 04       	cpc	r14, r1
    11c8:	f1 04       	cpc	r15, r1
    11ca:	01 f1       	breq	.+64     	; 0x120c <delay+0x66>
		yield();
    11cc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    11d0:	0e 94 ae 08 	call	0x115c	; 0x115c <micros>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	88 19       	sub	r24, r8
    11da:	99 09       	sbc	r25, r9
    11dc:	aa 09       	sbc	r26, r10
    11de:	bb 09       	sbc	r27, r11
    11e0:	88 3e       	cpi	r24, 0xE8	; 232
    11e2:	93 40       	sbci	r25, 0x03	; 3
    11e4:	a1 05       	cpc	r26, r1
    11e6:	b1 05       	cpc	r27, r1
    11e8:	60 f3       	brcs	.-40     	; 0x11c2 <delay+0x1c>
			ms--;
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	c2 1a       	sub	r12, r18
    11ee:	d1 08       	sbc	r13, r1
    11f0:	e1 08       	sbc	r14, r1
    11f2:	f1 08       	sbc	r15, r1
			start += 1000;
    11f4:	88 ee       	ldi	r24, 0xE8	; 232
    11f6:	88 0e       	add	r8, r24
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	98 1e       	adc	r9, r24
    11fc:	a1 1c       	adc	r10, r1
    11fe:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1200:	c1 14       	cp	r12, r1
    1202:	d1 04       	cpc	r13, r1
    1204:	e1 04       	cpc	r14, r1
    1206:	f1 04       	cpc	r15, r1
    1208:	19 f7       	brne	.-58     	; 0x11d0 <delay+0x2a>
    120a:	db cf       	rjmp	.-74     	; 0x11c2 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	08 95       	ret

0000121e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	91 05       	cpc	r25, r1
    1222:	38 f0       	brcs	.+14     	; 0x1232 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    122c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <delayMicroseconds+0x10>
    1232:	08 95       	ret

00001234 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1234:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1236:	84 b5       	in	r24, 0x24	; 36
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    123c:	84 b5       	in	r24, 0x24	; 36
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1242:	85 b5       	in	r24, 0x25	; 37
    1244:	82 60       	ori	r24, 0x02	; 2
    1246:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1248:	85 b5       	in	r24, 0x25	; 37
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    124e:	ee e6       	ldi	r30, 0x6E	; 110
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	81 60       	ori	r24, 0x01	; 1
    1256:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1258:	e1 e8       	ldi	r30, 0x81	; 129
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    125e:	80 81       	ld	r24, Z
    1260:	82 60       	ori	r24, 0x02	; 2
    1262:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    126a:	e0 e8       	ldi	r30, 0x80	; 128
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1274:	e1 eb       	ldi	r30, 0xB1	; 177
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    127e:	e0 eb       	ldi	r30, 0xB0	; 176
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1288:	ea e7       	ldi	r30, 0x7A	; 122
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	84 60       	ori	r24, 0x04	; 4
    1290:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1292:	80 81       	ld	r24, Z
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1298:	80 81       	ld	r24, Z
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    129e:	80 81       	ld	r24, Z
    12a0:	80 68       	ori	r24, 0x80	; 128
    12a2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12a8:	08 95       	ret

000012aa <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    12aa:	8e 30       	cpi	r24, 0x0E	; 14
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <analogRead+0x6>
    12ae:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    12b0:	87 70       	andi	r24, 0x07	; 7
    12b2:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <analog_reference>
    12b6:	90 e4       	ldi	r25, 0x40	; 64
    12b8:	29 9f       	mul	r18, r25
    12ba:	90 01       	movw	r18, r0
    12bc:	11 24       	eor	r1, r1
    12be:	82 2b       	or	r24, r18
    12c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    12c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    12ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12d2:	86 fd       	sbrc	r24, 6
    12d4:	fc cf       	rjmp	.-8      	; 0x12ce <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    12d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    12da:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    12de:	90 e0       	ldi	r25, 0x00	; 0
}
    12e0:	92 2b       	or	r25, r18
    12e2:	08 95       	ret

000012e4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	18 2f       	mov	r17, r24
    12ec:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
	if (val == 0)
    12f4:	20 97       	sbiw	r28, 0x00	; 0
    12f6:	11 f4       	brne	.+4      	; 0x12fc <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <analogWrite+0x20>
	}
	else if (val == 255)
    12fc:	cf 3f       	cpi	r28, 0xFF	; 255
    12fe:	d1 05       	cpc	r29, r1
    1300:	39 f4       	brne	.+14     	; 0x1310 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    130c:	0c 94 36 0a 	jmp	0x146c	; 0x146c <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1310:	e1 2f       	mov	r30, r17
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	ec 55       	subi	r30, 0x5C	; 92
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	e4 91       	lpm	r30, Z
    131a:	e3 30       	cpi	r30, 0x03	; 3
    131c:	f9 f0       	breq	.+62     	; 0x135c <analogWrite+0x78>
    131e:	48 f4       	brcc	.+18     	; 0x1332 <analogWrite+0x4e>
    1320:	e1 30       	cpi	r30, 0x01	; 1
    1322:	b9 f0       	breq	.+46     	; 0x1352 <analogWrite+0x6e>
    1324:	e2 30       	cpi	r30, 0x02	; 2
    1326:	a1 f5       	brne	.+104    	; 0x1390 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1328:	84 b5       	in	r24, 0x24	; 36
    132a:	80 62       	ori	r24, 0x20	; 32
    132c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    132e:	c8 bd       	out	0x28, r28	; 40
				break;
    1330:	34 c0       	rjmp	.+104    	; 0x139a <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1332:	e7 30       	cpi	r30, 0x07	; 7
    1334:	e9 f0       	breq	.+58     	; 0x1370 <analogWrite+0x8c>
    1336:	e8 30       	cpi	r30, 0x08	; 8
    1338:	19 f1       	breq	.+70     	; 0x1380 <analogWrite+0x9c>
    133a:	e4 30       	cpi	r30, 0x04	; 4
    133c:	49 f5       	brne	.+82     	; 0x1390 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    133e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1342:	80 62       	ori	r24, 0x20	; 32
    1344:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    1348:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    134c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    1350:	24 c0       	rjmp	.+72     	; 0x139a <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1352:	84 b5       	in	r24, 0x24	; 36
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1358:	c7 bd       	out	0x27, r28	; 39
				break;
    135a:	1f c0       	rjmp	.+62     	; 0x139a <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    135c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1366:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    136a:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    136e:	15 c0       	rjmp	.+42     	; 0x139a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1370:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1374:	80 68       	ori	r24, 0x80	; 128
    1376:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    137a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    137e:	0d c0       	rjmp	.+26     	; 0x139a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1380:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1384:	80 62       	ori	r24, 0x20	; 32
    1386:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    138a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    138e:	05 c0       	rjmp	.+10     	; 0x139a <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1390:	c0 38       	cpi	r28, 0x80	; 128
    1392:	d1 05       	cpc	r29, r1
    1394:	0c f0       	brlt	.+2      	; 0x1398 <analogWrite+0xb4>
    1396:	b5 cf       	rjmp	.-150    	; 0x1302 <analogWrite+0x1e>
    1398:	af cf       	rjmp	.-162    	; 0x12f8 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	08 95       	ret

000013a2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <turnOffPWM+0x24>
    13a6:	28 f4       	brcc	.+10     	; 0x13b2 <turnOffPWM+0x10>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	99 f0       	breq	.+38     	; 0x13d2 <turnOffPWM+0x30>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <turnOffPWM+0x36>
    13b0:	08 95       	ret
    13b2:	87 30       	cpi	r24, 0x07	; 7
    13b4:	a9 f0       	breq	.+42     	; 0x13e0 <turnOffPWM+0x3e>
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	b9 f0       	breq	.+46     	; 0x13e8 <turnOffPWM+0x46>
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	d1 f4       	brne	.+52     	; 0x13f2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13c2:	8f 7d       	andi	r24, 0xDF	; 223
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13ca:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13d0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13d2:	84 b5       	in	r24, 0x24	; 36
    13d4:	8f 77       	andi	r24, 0x7F	; 127
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13d8:	84 b5       	in	r24, 0x24	; 36
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	84 bd       	out	0x24, r24	; 36
    13de:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13e0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13e4:	8f 77       	andi	r24, 0x7F	; 127
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13e8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13ec:	8f 7d       	andi	r24, 0xDF	; 223
    13ee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13f2:	08 95       	ret

000013f4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	fc 01       	movw	r30, r24
    13fc:	e8 54       	subi	r30, 0x48	; 72
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1402:	fc 01       	movw	r30, r24
    1404:	e4 53       	subi	r30, 0x34	; 52
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    140a:	88 23       	and	r24, r24
    140c:	61 f1       	breq	.+88     	; 0x1466 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	fc 01       	movw	r30, r24
    1416:	e6 51       	subi	r30, 0x16	; 22
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	c5 91       	lpm	r28, Z+
    141c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    141e:	fc 01       	movw	r30, r24
    1420:	e0 52       	subi	r30, 0x20	; 32
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	a5 91       	lpm	r26, Z+
    1426:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1428:	61 11       	cpse	r22, r1
    142a:	09 c0       	rjmp	.+18     	; 0x143e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    142c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    142e:	f8 94       	cli
		*reg &= ~bit;
    1430:	88 81       	ld	r24, Y
    1432:	20 95       	com	r18
    1434:	82 23       	and	r24, r18
    1436:	88 83       	st	Y, r24
		*out &= ~bit;
    1438:	ec 91       	ld	r30, X
    143a:	2e 23       	and	r18, r30
    143c:	0b c0       	rjmp	.+22     	; 0x1454 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    143e:	62 30       	cpi	r22, 0x02	; 2
    1440:	61 f4       	brne	.+24     	; 0x145a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1442:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1444:	f8 94       	cli
		*reg &= ~bit;
    1446:	38 81       	ld	r19, Y
    1448:	82 2f       	mov	r24, r18
    144a:	80 95       	com	r24
    144c:	83 23       	and	r24, r19
    144e:	88 83       	st	Y, r24
		*out |= bit;
    1450:	ec 91       	ld	r30, X
    1452:	2e 2b       	or	r18, r30
    1454:	2c 93       	st	X, r18
		SREG = oldSREG;
    1456:	9f bf       	out	0x3f, r25	; 63
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    145a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    145c:	f8 94       	cli
		*reg |= bit;
    145e:	e8 81       	ld	r30, Y
    1460:	2e 2b       	or	r18, r30
    1462:	28 83       	st	Y, r18
		SREG = oldSREG;
    1464:	8f bf       	out	0x3f, r24	; 63
	}
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f9 01       	movw	r30, r18
    1478:	ec 55       	subi	r30, 0x5C	; 92
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    147e:	f9 01       	movw	r30, r18
    1480:	e8 54       	subi	r30, 0x48	; 72
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1486:	f9 01       	movw	r30, r18
    1488:	e4 53       	subi	r30, 0x34	; 52
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    148e:	cc 23       	and	r28, r28
    1490:	c9 f0       	breq	.+50     	; 0x14c4 <digitalWrite+0x58>
    1492:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1494:	81 11       	cpse	r24, r1
    1496:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <turnOffPWM>

	out = portOutputRegister(port);
    149a:	ec 2f       	mov	r30, r28
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e0 52       	subi	r30, 0x20	; 32
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	a5 91       	lpm	r26, Z+
    14a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    14aa:	8f b7       	in	r24, 0x3f	; 63
	cli();
    14ac:	f8 94       	cli

	if (val == LOW) {
    14ae:	11 11       	cpse	r17, r1
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <digitalWrite+0x50>
		*out &= ~bit;
    14b2:	9c 91       	ld	r25, X
    14b4:	ed 2f       	mov	r30, r29
    14b6:	e0 95       	com	r30
    14b8:	e9 23       	and	r30, r25
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <digitalWrite+0x54>
	} else {
		*out |= bit;
    14bc:	ec 91       	ld	r30, X
    14be:	ed 2b       	or	r30, r29
    14c0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    14c2:	8f bf       	out	0x3f, r24	; 63
}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	08 95       	ret

000014cc <_ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:
/**
 * Initialize the default Serial transport at the default baud of 57600.
 */
void FirmataClass::begin(void)
{
  begin(57600);
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	8c 01       	movw	r16, r24
    14d6:	eb 01       	movw	r28, r22
    14d8:	dc 01       	movw	r26, r24
    14da:	8d 91       	ld	r24, X+
    14dc:	9c 91       	ld	r25, X
    14de:	dc 01       	movw	r26, r24
    14e0:	ed 91       	ld	r30, X+
    14e2:	fc 91       	ld	r31, X
    14e4:	6f 77       	andi	r22, 0x7F	; 127
    14e6:	01 90       	ld	r0, Z+
    14e8:	f0 81       	ld	r31, Z
    14ea:	e0 2d       	mov	r30, r0
    14ec:	09 95       	icall
    14ee:	f8 01       	movw	r30, r16
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	dc 01       	movw	r26, r24
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	cc 0f       	add	r28, r28
    14fc:	cd 2f       	mov	r28, r29
    14fe:	cc 1f       	adc	r28, r28
    1500:	dd 0b       	sbc	r29, r29
    1502:	6c 2f       	mov	r22, r28
    1504:	6f 77       	andi	r22, 0x7F	; 127
    1506:	01 90       	ld	r0, Z+
    1508:	f0 81       	ld	r31, Z
    150a:	e0 2d       	mov	r30, r0
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	09 94       	ijmp

00001516 <_ZN12FirmataClass10startSysexEv>:
    1516:	dc 01       	movw	r26, r24
    1518:	8d 91       	ld	r24, X+
    151a:	9c 91       	ld	r25, X
    151c:	dc 01       	movw	r26, r24
    151e:	ed 91       	ld	r30, X+
    1520:	fc 91       	ld	r31, X
    1522:	01 90       	ld	r0, Z+
    1524:	f0 81       	ld	r31, Z
    1526:	e0 2d       	mov	r30, r0
    1528:	60 ef       	ldi	r22, 0xF0	; 240
    152a:	09 94       	ijmp

0000152c <_ZN12FirmataClass8endSysexEv>:
    152c:	dc 01       	movw	r26, r24
    152e:	8d 91       	ld	r24, X+
    1530:	9c 91       	ld	r25, X
    1532:	dc 01       	movw	r26, r24
    1534:	ed 91       	ld	r30, X+
    1536:	fc 91       	ld	r31, X
    1538:	01 90       	ld	r0, Z+
    153a:	f0 81       	ld	r31, Z
    153c:	e0 2d       	mov	r30, r0
    153e:	67 ef       	ldi	r22, 0xF7	; 247
    1540:	09 94       	ijmp

00001542 <_ZN12FirmataClass12printVersionEv>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
    1548:	88 81       	ld	r24, Y
    154a:	99 81       	ldd	r25, Y+1	; 0x01
    154c:	dc 01       	movw	r26, r24
    154e:	ed 91       	ld	r30, X+
    1550:	fc 91       	ld	r31, X
    1552:	01 90       	ld	r0, Z+
    1554:	f0 81       	ld	r31, Z
    1556:	e0 2d       	mov	r30, r0
    1558:	69 ef       	ldi	r22, 0xF9	; 249
    155a:	09 95       	icall
    155c:	88 81       	ld	r24, Y
    155e:	99 81       	ldd	r25, Y+1	; 0x01
    1560:	dc 01       	movw	r26, r24
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	01 90       	ld	r0, Z+
    1568:	f0 81       	ld	r31, Z
    156a:	e0 2d       	mov	r30, r0
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	09 95       	icall
    1570:	88 81       	ld	r24, Y
    1572:	99 81       	ldd	r25, Y+1	; 0x01
    1574:	dc 01       	movw	r26, r24
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	01 90       	ld	r0, Z+
    157c:	f0 81       	ld	r31, Z
    157e:	e0 2d       	mov	r30, r0
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	09 94       	ijmp

00001588 <_ZN12FirmataClass20printFirmwareVersionEv>:
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	dc 01       	movw	r26, r24
    1590:	12 96       	adiw	r26, 0x02	; 2
    1592:	2c 91       	ld	r18, X
    1594:	22 23       	and	r18, r18
    1596:	d9 f1       	breq	.+118    	; 0x160e <_ZN12FirmataClass20printFirmwareVersionEv+0x86>
    1598:	ec 01       	movw	r28, r24
    159a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN12FirmataClass10startSysexEv>
    159e:	88 81       	ld	r24, Y
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	dc 01       	movw	r26, r24
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	01 90       	ld	r0, Z+
    15aa:	f0 81       	ld	r31, Z
    15ac:	e0 2d       	mov	r30, r0
    15ae:	69 e7       	ldi	r22, 0x79	; 121
    15b0:	09 95       	icall
    15b2:	88 81       	ld	r24, Y
    15b4:	99 81       	ldd	r25, Y+1	; 0x01
    15b6:	dc 01       	movw	r26, r24
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	ab 81       	ldd	r26, Y+3	; 0x03
    15be:	bc 81       	ldd	r27, Y+4	; 0x04
    15c0:	01 90       	ld	r0, Z+
    15c2:	f0 81       	ld	r31, Z
    15c4:	e0 2d       	mov	r30, r0
    15c6:	6c 91       	ld	r22, X
    15c8:	09 95       	icall
    15ca:	88 81       	ld	r24, Y
    15cc:	99 81       	ldd	r25, Y+1	; 0x01
    15ce:	dc 01       	movw	r26, r24
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	ab 81       	ldd	r26, Y+3	; 0x03
    15d6:	bc 81       	ldd	r27, Y+4	; 0x04
    15d8:	01 90       	ld	r0, Z+
    15da:	f0 81       	ld	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	6c 91       	ld	r22, X
    15e2:	09 95       	icall
    15e4:	12 e0       	ldi	r17, 0x02	; 2
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	18 17       	cp	r17, r24
    15ea:	58 f4       	brcc	.+22     	; 0x1602 <_ZN12FirmataClass20printFirmwareVersionEv+0x7a>
    15ec:	eb 81       	ldd	r30, Y+3	; 0x03
    15ee:	fc 81       	ldd	r31, Y+4	; 0x04
    15f0:	e1 0f       	add	r30, r17
    15f2:	f1 1d       	adc	r31, r1
    15f4:	60 81       	ld	r22, Z
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	ce 01       	movw	r24, r28
    15fa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN12FirmataClass23sendValueAsTwo7bitBytesEi>
    15fe:	1f 5f       	subi	r17, 0xFF	; 255
    1600:	f2 cf       	rjmp	.-28     	; 0x15e6 <_ZN12FirmataClass20printFirmwareVersionEv+0x5e>
    1602:	ce 01       	movw	r24, r28
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_ZN12FirmataClass8endSysexEv>
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	08 95       	ret

00001616 <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh>:
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	7c 01       	movw	r14, r24
    1628:	eb 01       	movw	r28, r22
    162a:	c4 2e       	mov	r12, r20
    162c:	d2 2e       	mov	r13, r18
    162e:	6a e3       	ldi	r22, 0x3A	; 58
    1630:	71 e0       	ldi	r23, 0x01	; 1
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <strstr>
    1638:	8c 01       	movw	r16, r24
    163a:	6f e2       	ldi	r22, 0x2F	; 47
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	ce 01       	movw	r24, r28
    1640:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <strrchr>
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	39 f4       	brne	.+14     	; 0x1656 <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh+0x40>
    1648:	6c e5       	ldi	r22, 0x5C	; 92
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <strrchr>
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	11 f0       	breq	.+4      	; 0x165a <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh+0x44>
    1656:	ec 01       	movw	r28, r24
    1658:	21 96       	adiw	r28, 0x01	; 1
    165a:	01 15       	cp	r16, r1
    165c:	11 05       	cpc	r17, r1
    165e:	51 f4       	brne	.+20     	; 0x1674 <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh+0x5e>
    1660:	fe 01       	movw	r30, r28
    1662:	01 90       	ld	r0, Z+
    1664:	00 20       	and	r0, r0
    1666:	e9 f7       	brne	.-6      	; 0x1662 <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh+0x4c>
    1668:	ec 1b       	sub	r30, r28
    166a:	ef 5f       	subi	r30, 0xFF	; 255
    166c:	d7 01       	movw	r26, r14
    166e:	12 96       	adiw	r26, 0x02	; 2
    1670:	ec 93       	st	X, r30
    1672:	05 c0       	rjmp	.+10     	; 0x167e <_ZN12FirmataClass25setFirmwareNameAndVersionEPKchh+0x68>
    1674:	0c 1b       	sub	r16, r28
    1676:	1d 0b       	sbc	r17, r29
    1678:	0e 5f       	subi	r16, 0xFE	; 254
    167a:	f7 01       	movw	r30, r14
    167c:	02 83       	std	Z+2, r16	; 0x02
    167e:	d7 01       	movw	r26, r14
    1680:	13 96       	adiw	r26, 0x03	; 3
    1682:	8d 91       	ld	r24, X+
    1684:	9c 91       	ld	r25, X
    1686:	14 97       	sbiw	r26, 0x04	; 4
    1688:	0e 94 10 17 	call	0x2e20	; 0x2e20 <free>
    168c:	f7 01       	movw	r30, r14
    168e:	02 81       	ldd	r16, Z+2	; 0x02
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	c8 01       	movw	r24, r16
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <malloc>
    169a:	d7 01       	movw	r26, r14
    169c:	14 96       	adiw	r26, 0x04	; 4
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	13 97       	sbiw	r26, 0x03	; 3
    16a4:	fc 01       	movw	r30, r24
    16a6:	e0 0f       	add	r30, r16
    16a8:	f1 1f       	adc	r31, r17
    16aa:	10 82       	st	Z, r1
    16ac:	fc 01       	movw	r30, r24
    16ae:	c0 82       	st	Z, r12
    16b0:	d1 82       	std	Z+1, r13	; 0x01
    16b2:	a8 01       	movw	r20, r16
    16b4:	42 50       	subi	r20, 0x02	; 2
    16b6:	51 09       	sbc	r21, r1
    16b8:	be 01       	movw	r22, r28
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <strncpy>

000016d0 <_ZN12FirmataClass9availableEv>:
    16d0:	dc 01       	movw	r26, r24
    16d2:	8d 91       	ld	r24, X+
    16d4:	9c 91       	ld	r25, X
    16d6:	dc 01       	movw	r26, r24
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	04 80       	ldd	r0, Z+4	; 0x04
    16de:	f5 81       	ldd	r31, Z+5	; 0x05
    16e0:	e0 2d       	mov	r30, r0
    16e2:	09 94       	ijmp

000016e4 <_ZN12FirmataClass19processSysexMessageEv>:
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	dc 01       	movw	r26, r24
    16f6:	18 96       	adiw	r26, 0x08	; 8
    16f8:	8c 91       	ld	r24, X
    16fa:	18 97       	sbiw	r26, 0x08	; 8
    16fc:	81 37       	cpi	r24, 0x71	; 113
    16fe:	71 f0       	breq	.+28     	; 0x171c <_ZN12FirmataClass19processSysexMessageEv+0x38>
    1700:	89 37       	cpi	r24, 0x79	; 121
    1702:	09 f0       	breq	.+2      	; 0x1706 <_ZN12FirmataClass19processSysexMessageEv+0x22>
    1704:	50 c0       	rjmp	.+160    	; 0x17a6 <_ZN12FirmataClass19processSysexMessageEv+0xc2>
    1706:	cd 01       	movw	r24, r26
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_ZN12FirmataClass20printFirmwareVersionEv>
    171c:	fd 01       	movw	r30, r26
    171e:	eb 56       	subi	r30, 0x6B	; 107
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	c0 80       	ld	r12, Z
    1724:	d1 80       	ldd	r13, Z+1	; 0x01
    1726:	c1 14       	cp	r12, r1
    1728:	d1 04       	cpc	r13, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <_ZN12FirmataClass19processSysexMessageEv+0x4a>
    172c:	54 c0       	rjmp	.+168    	; 0x17d6 <_ZN12FirmataClass19processSysexMessageEv+0xf2>
    172e:	ed 01       	movw	r28, r26
    1730:	c7 5b       	subi	r28, 0xB7	; 183
    1732:	df 4f       	sbci	r29, 0xFF	; 255
    1734:	28 81       	ld	r18, Y
    1736:	39 81       	ldd	r19, Y+1	; 0x01
    1738:	c9 01       	movw	r24, r18
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	97 fd       	sbrc	r25, 7
    173e:	c9 01       	movw	r24, r18
    1740:	ac 01       	movw	r20, r24
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	f4 2e       	mov	r15, r20
    1748:	bd 01       	movw	r22, r26
    174a:	67 5f       	subi	r22, 0xF7	; 247
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	ed 01       	movw	r28, r26
    1750:	28 96       	adiw	r28, 0x08	; 8
    1752:	8d 01       	movw	r16, r26
    1754:	06 5f       	subi	r16, 0xF6	; 246
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	ce 01       	movw	r24, r28
    175c:	3f 15       	cp	r19, r15
    175e:	80 f4       	brcc	.+32     	; 0x1780 <_ZN12FirmataClass19processSysexMessageEv+0x9c>
    1760:	fb 01       	movw	r30, r22
    1762:	20 81       	ld	r18, Z
    1764:	28 83       	st	Y, r18
    1766:	f8 01       	movw	r30, r16
    1768:	e0 80       	ld	r14, Z
    176a:	f0 e8       	ldi	r31, 0x80	; 128
    176c:	ef 9e       	mul	r14, r31
    176e:	20 19       	sub	r18, r0
    1770:	11 24       	eor	r1, r1
    1772:	29 93       	st	Y+, r18
    1774:	3f 5f       	subi	r19, 0xFF	; 255
    1776:	6e 5f       	subi	r22, 0xFE	; 254
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	0e 5f       	subi	r16, 0xFE	; 254
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	ee cf       	rjmp	.-36     	; 0x175c <_ZN12FirmataClass19processSysexMessageEv+0x78>
    1780:	a4 0f       	add	r26, r20
    1782:	b1 1d       	adc	r27, r1
    1784:	17 96       	adiw	r26, 0x07	; 7
    1786:	2c 91       	ld	r18, X
    1788:	17 97       	sbiw	r26, 0x07	; 7
    178a:	22 23       	and	r18, r18
    178c:	11 f0       	breq	.+4      	; 0x1792 <_ZN12FirmataClass19processSysexMessageEv+0xae>
    178e:	18 96       	adiw	r26, 0x08	; 8
    1790:	1c 92       	st	X, r1
    1792:	f6 01       	movw	r30, r12
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	09 94       	ijmp
    17a6:	fd 01       	movw	r30, r26
    17a8:	e9 56       	subi	r30, 0x69	; 105
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	01 90       	ld	r0, Z+
    17ae:	f0 81       	ld	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	30 97       	sbiw	r30, 0x00	; 0
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <_ZN12FirmataClass19processSysexMessageEv+0xf2>
    17b6:	ad 01       	movw	r20, r26
    17b8:	47 5f       	subi	r20, 0xF7	; 247
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	a7 5b       	subi	r26, 0xB7	; 183
    17be:	bf 4f       	sbci	r27, 0xFF	; 255
    17c0:	6c 91       	ld	r22, X
    17c2:	61 50       	subi	r22, 0x01	; 1
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	09 94       	ijmp
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	ff 90       	pop	r15
    17e0:	ef 90       	pop	r14
    17e2:	df 90       	pop	r13
    17e4:	cf 90       	pop	r12
    17e6:	08 95       	ret

000017e8 <_ZN12FirmataClass10sendAnalogEhi>:
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	ec 01       	movw	r28, r24
    17f2:	8a 01       	movw	r16, r20
    17f4:	88 81       	ld	r24, Y
    17f6:	99 81       	ldd	r25, Y+1	; 0x01
    17f8:	dc 01       	movw	r26, r24
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	6f 70       	andi	r22, 0x0F	; 15
    1800:	60 6e       	ori	r22, 0xE0	; 224
    1802:	01 90       	ld	r0, Z+
    1804:	f0 81       	ld	r31, Z
    1806:	e0 2d       	mov	r30, r0
    1808:	09 95       	icall
    180a:	b8 01       	movw	r22, r16
    180c:	ce 01       	movw	r24, r28
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_ZN12FirmataClass23sendValueAsTwo7bitBytesEi>

0000181a <_ZN12FirmataClass15sendDigitalPortEhi>:
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	8c 01       	movw	r16, r24
    1824:	ea 01       	movw	r28, r20
    1826:	dc 01       	movw	r26, r24
    1828:	8d 91       	ld	r24, X+
    182a:	9c 91       	ld	r25, X
    182c:	dc 01       	movw	r26, r24
    182e:	ed 91       	ld	r30, X+
    1830:	fc 91       	ld	r31, X
    1832:	6f 70       	andi	r22, 0x0F	; 15
    1834:	60 69       	ori	r22, 0x90	; 144
    1836:	01 90       	ld	r0, Z+
    1838:	f0 81       	ld	r31, Z
    183a:	e0 2d       	mov	r30, r0
    183c:	09 95       	icall
    183e:	f8 01       	movw	r30, r16
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	dc 01       	movw	r26, r24
    1846:	ed 91       	ld	r30, X+
    1848:	fc 91       	ld	r31, X
    184a:	6c 2f       	mov	r22, r28
    184c:	6f 77       	andi	r22, 0x7F	; 127
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	09 95       	icall
    1856:	f8 01       	movw	r30, r16
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	dc 01       	movw	r26, r24
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	be 01       	movw	r22, r28
    1864:	66 0f       	add	r22, r22
    1866:	67 2f       	mov	r22, r23
    1868:	66 1f       	adc	r22, r22
    186a:	77 0b       	sbc	r23, r23
    186c:	01 90       	ld	r0, Z+
    186e:	f0 81       	ld	r31, Z
    1870:	e0 2d       	mov	r30, r0
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	09 94       	ijmp

0000187c <_ZN12FirmataClass9sendSysexEhhPh>:
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 d0       	rcall	.+0      	; 0x188e <_ZN12FirmataClass9sendSysexEhhPh+0x12>
    188e:	1f 92       	push	r1
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	8c 01       	movw	r16, r24
    1896:	f4 2e       	mov	r15, r20
    1898:	2a 83       	std	Y+2, r18	; 0x02
    189a:	3b 83       	std	Y+3, r19	; 0x03
    189c:	69 83       	std	Y+1, r22	; 0x01
    189e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN12FirmataClass10startSysexEv>
    18a2:	d8 01       	movw	r26, r16
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	dc 01       	movw	r26, r24
    18aa:	ed 91       	ld	r30, X+
    18ac:	fc 91       	ld	r31, X
    18ae:	01 90       	ld	r0, Z+
    18b0:	f0 81       	ld	r31, Z
    18b2:	e0 2d       	mov	r30, r0
    18b4:	69 81       	ldd	r22, Y+1	; 0x01
    18b6:	09 95       	icall
    18b8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ba:	e2 2e       	mov	r14, r18
    18bc:	c2 2e       	mov	r12, r18
    18be:	3b 81       	ldd	r19, Y+3	; 0x03
    18c0:	d3 2e       	mov	r13, r19
    18c2:	8c 2d       	mov	r24, r12
    18c4:	8e 19       	sub	r24, r14
    18c6:	8f 15       	cp	r24, r15
    18c8:	40 f4       	brcc	.+16     	; 0x18da <_ZN12FirmataClass9sendSysexEhhPh+0x5e>
    18ca:	f6 01       	movw	r30, r12
    18cc:	61 91       	ld	r22, Z+
    18ce:	6f 01       	movw	r12, r30
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN12FirmataClass23sendValueAsTwo7bitBytesEi>
    18d8:	f4 cf       	rjmp	.-24     	; 0x18c2 <_ZN12FirmataClass9sendSysexEhhPh+0x46>
    18da:	c8 01       	movw	r24, r16
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_ZN12FirmataClass8endSysexEv>

000018f6 <_ZN12FirmataClass10sendStringEPKc>:
    18f6:	9b 01       	movw	r18, r22
    18f8:	fb 01       	movw	r30, r22
    18fa:	01 90       	ld	r0, Z+
    18fc:	00 20       	and	r0, r0
    18fe:	e9 f7       	brne	.-6      	; 0x18fa <_ZN12FirmataClass10sendStringEPKc+0x4>
    1900:	31 97       	sbiw	r30, 0x01	; 1
    1902:	af 01       	movw	r20, r30
    1904:	46 1b       	sub	r20, r22
    1906:	57 0b       	sbc	r21, r23
    1908:	61 e7       	ldi	r22, 0x71	; 113
    190a:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_ZN12FirmataClass9sendSysexEhhPh>

0000190e <_ZN12FirmataClass5writeEh>:
    190e:	dc 01       	movw	r26, r24
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	dc 01       	movw	r26, r24
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	01 90       	ld	r0, Z+
    191c:	f0 81       	ld	r31, Z
    191e:	e0 2d       	mov	r30, r0
    1920:	09 94       	ijmp

00001922 <_ZN12FirmataClass6attachEhPFvhiE>:
    1922:	60 3d       	cpi	r22, 0xD0	; 208
    1924:	c1 f0       	breq	.+48     	; 0x1956 <_ZN12FirmataClass6attachEhPFvhiE+0x34>
    1926:	28 f4       	brcc	.+10     	; 0x1932 <_ZN12FirmataClass6attachEhPFvhiE+0x10>
    1928:	60 39       	cpi	r22, 0x90	; 144
    192a:	69 f0       	breq	.+26     	; 0x1946 <_ZN12FirmataClass6attachEhPFvhiE+0x24>
    192c:	60 3c       	cpi	r22, 0xC0	; 192
    192e:	79 f0       	breq	.+30     	; 0x194e <_ZN12FirmataClass6attachEhPFvhiE+0x2c>
    1930:	08 95       	ret
    1932:	64 3f       	cpi	r22, 0xF4	; 244
    1934:	a1 f0       	breq	.+40     	; 0x195e <_ZN12FirmataClass6attachEhPFvhiE+0x3c>
    1936:	65 3f       	cpi	r22, 0xF5	; 245
    1938:	b1 f0       	breq	.+44     	; 0x1966 <_ZN12FirmataClass6attachEhPFvhiE+0x44>
    193a:	60 3e       	cpi	r22, 0xE0	; 224
    193c:	c9 f4       	brne	.+50     	; 0x1970 <_ZN12FirmataClass6attachEhPFvhiE+0x4e>
    193e:	fc 01       	movw	r30, r24
    1940:	e9 57       	subi	r30, 0x79	; 121
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	13 c0       	rjmp	.+38     	; 0x196c <_ZN12FirmataClass6attachEhPFvhiE+0x4a>
    1946:	fc 01       	movw	r30, r24
    1948:	e7 57       	subi	r30, 0x77	; 119
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	0f c0       	rjmp	.+30     	; 0x196c <_ZN12FirmataClass6attachEhPFvhiE+0x4a>
    194e:	fc 01       	movw	r30, r24
    1950:	e5 57       	subi	r30, 0x75	; 117
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	0b c0       	rjmp	.+22     	; 0x196c <_ZN12FirmataClass6attachEhPFvhiE+0x4a>
    1956:	fc 01       	movw	r30, r24
    1958:	e3 57       	subi	r30, 0x73	; 115
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	07 c0       	rjmp	.+14     	; 0x196c <_ZN12FirmataClass6attachEhPFvhiE+0x4a>
    195e:	fc 01       	movw	r30, r24
    1960:	e1 57       	subi	r30, 0x71	; 113
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	03 c0       	rjmp	.+6      	; 0x196c <_ZN12FirmataClass6attachEhPFvhiE+0x4a>
    1966:	fc 01       	movw	r30, r24
    1968:	ef 56       	subi	r30, 0x6F	; 111
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	51 83       	std	Z+1, r21	; 0x01
    196e:	40 83       	st	Z, r20
    1970:	08 95       	ret

00001972 <_ZN12FirmataClass6attachEhPFvvE>:
    1972:	6f 3f       	cpi	r22, 0xFF	; 255
    1974:	29 f4       	brne	.+10     	; 0x1980 <_ZN12FirmataClass6attachEhPFvvE+0xe>
    1976:	fc 01       	movw	r30, r24
    1978:	ed 56       	subi	r30, 0x6D	; 109
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	51 83       	std	Z+1, r21	; 0x01
    197e:	40 83       	st	Z, r20
    1980:	08 95       	ret

00001982 <_ZN12FirmataClass6attachEhPFvhhPhE>:
    1982:	fc 01       	movw	r30, r24
    1984:	e9 56       	subi	r30, 0x69	; 105
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	51 83       	std	Z+1, r21	; 0x01
    198a:	40 83       	st	Z, r20
    198c:	08 95       	ret

0000198e <_ZN12FirmataClass10getPinModeEh>:
    198e:	86 0f       	add	r24, r22
    1990:	91 1d       	adc	r25, r1
    1992:	fc 01       	movw	r30, r24
    1994:	e5 5b       	subi	r30, 0xB5	; 181
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	08 95       	ret

0000199c <_ZN12FirmataClass10setPinModeEhh>:
    199c:	86 0f       	add	r24, r22
    199e:	91 1d       	adc	r25, r1
    19a0:	fc 01       	movw	r30, r24
    19a2:	e5 5b       	subi	r30, 0xB5	; 181
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 37       	cpi	r24, 0x7F	; 127
    19aa:	09 f0       	breq	.+2      	; 0x19ae <_ZN12FirmataClass10setPinModeEhh+0x12>
    19ac:	40 83       	st	Z, r20
    19ae:	08 95       	ret

000019b0 <_ZN12FirmataClass11getPinStateEh>:
    19b0:	86 0f       	add	r24, r22
    19b2:	91 1d       	adc	r25, r1
    19b4:	86 0f       	add	r24, r22
    19b6:	91 1d       	adc	r25, r1
    19b8:	fc 01       	movw	r30, r24
    19ba:	e1 5a       	subi	r30, 0xA1	; 161
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	08 95       	ret

000019c4 <_ZN12FirmataClass11setPinStateEhi>:
    19c4:	86 0f       	add	r24, r22
    19c6:	91 1d       	adc	r25, r1
    19c8:	86 0f       	add	r24, r22
    19ca:	91 1d       	adc	r25, r1
    19cc:	fc 01       	movw	r30, r24
    19ce:	e1 5a       	subi	r30, 0xA1	; 161
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	51 83       	std	Z+1, r21	; 0x01
    19d4:	40 83       	st	Z, r20
    19d6:	08 95       	ret

000019d8 <_ZN12FirmataClass11systemResetEv>:
    19d8:	fc 01       	movw	r30, r24
    19da:	15 82       	std	Z+5, r1	; 0x05
    19dc:	16 82       	std	Z+6, r1	; 0x06
    19de:	17 82       	std	Z+7, r1	; 0x07
    19e0:	dc 01       	movw	r26, r24
    19e2:	18 96       	adiw	r26, 0x08	; 8
    19e4:	88 5b       	subi	r24, 0xB8	; 184
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	1d 92       	st	X+, r1
    19ea:	a8 17       	cp	r26, r24
    19ec:	b9 07       	cpc	r27, r25
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <_ZN12FirmataClass11systemResetEv+0x10>
    19f0:	1c 92       	st	X, r1
    19f2:	df 01       	movw	r26, r30
    19f4:	a7 5b       	subi	r26, 0xB7	; 183
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	1d 92       	st	X+, r1
    19fa:	1c 92       	st	X, r1
    19fc:	ed 56       	subi	r30, 0x6D	; 109
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	01 90       	ld	r0, Z+
    1a02:	f0 81       	ld	r31, Z
    1a04:	e0 2d       	mov	r30, r0
    1a06:	30 97       	sbiw	r30, 0x00	; 0
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <_ZN12FirmataClass11systemResetEv+0x34>
    1a0a:	09 94       	ijmp
    1a0c:	08 95       	ret

00001a0e <_ZN12FirmataClassC1Ev>:
    1a0e:	fc 01       	movw	r30, r24
    1a10:	12 82       	std	Z+2, r1	; 0x02
    1a12:	14 82       	std	Z+4, r1	; 0x04
    1a14:	13 82       	std	Z+3, r1	; 0x03
    1a16:	e7 56       	subi	r30, 0x67	; 103
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	10 82       	st	Z, r1
    1a1c:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_ZN12FirmataClass11systemResetEv>

00001a20 <_ZN12FirmataClass5parseEh>:
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ec 01       	movw	r28, r24
    1a26:	fc 01       	movw	r30, r24
    1a28:	e8 5b       	subi	r30, 0xB8	; 184
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 23       	and	r24, r24
    1a30:	a9 f0       	breq	.+42     	; 0x1a5c <_ZN12FirmataClass5parseEh+0x3c>
    1a32:	67 3f       	cpi	r22, 0xF7	; 247
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <_ZN12FirmataClass5parseEh+0x22>
    1a36:	10 82       	st	Z, r1
    1a38:	ce 01       	movw	r24, r28
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <_ZN12FirmataClass19processSysexMessageEv>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e7 5b       	subi	r30, 0xB7	; 183
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	20 81       	ld	r18, Z
    1a4a:	31 81       	ldd	r19, Z+1	; 0x01
    1a4c:	c2 0f       	add	r28, r18
    1a4e:	d3 1f       	adc	r29, r19
    1a50:	68 87       	std	Y+8, r22	; 0x08
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	31 83       	std	Z+1, r19	; 0x01
    1a58:	20 83       	st	Z, r18
    1a5a:	98 c0       	rjmp	.+304    	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <_ZN12FirmataClass5parseEh+0x44>
    1a62:	52 c0       	rjmp	.+164    	; 0x1b08 <_ZN12FirmataClass5parseEh+0xe8>
    1a64:	67 fd       	sbrc	r22, 7
    1a66:	50 c0       	rjmp	.+160    	; 0x1b08 <_ZN12FirmataClass5parseEh+0xe8>
    1a68:	81 50       	subi	r24, 0x01	; 1
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f1 1d       	adc	r31, r1
    1a72:	60 87       	std	Z+8, r22	; 0x08
    1a74:	81 11       	cpse	r24, r1
    1a76:	8a c0       	rjmp	.+276    	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1a78:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <_ZN12FirmataClass5parseEh+0x60>
    1a7e:	86 c0       	rjmp	.+268    	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1a80:	80 3d       	cpi	r24, 0xD0	; 208
    1a82:	a1 f1       	breq	.+104    	; 0x1aec <_ZN12FirmataClass5parseEh+0xcc>
    1a84:	40 f4       	brcc	.+16     	; 0x1a96 <_ZN12FirmataClass5parseEh+0x76>
    1a86:	80 39       	cpi	r24, 0x90	; 144
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <_ZN12FirmataClass5parseEh+0x8a>
    1a8a:	80 3c       	cpi	r24, 0xC0	; 192
    1a8c:	d9 f5       	brne	.+118    	; 0x1b04 <_ZN12FirmataClass5parseEh+0xe4>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e5 57       	subi	r30, 0x75	; 117
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	2e c0       	rjmp	.+92     	; 0x1af2 <_ZN12FirmataClass5parseEh+0xd2>
    1a96:	84 3f       	cpi	r24, 0xF4	; 244
    1a98:	c9 f0       	breq	.+50     	; 0x1acc <_ZN12FirmataClass5parseEh+0xac>
    1a9a:	85 3f       	cpi	r24, 0xF5	; 245
    1a9c:	d9 f0       	breq	.+54     	; 0x1ad4 <_ZN12FirmataClass5parseEh+0xb4>
    1a9e:	80 3e       	cpi	r24, 0xE0	; 224
    1aa0:	89 f5       	brne	.+98     	; 0x1b04 <_ZN12FirmataClass5parseEh+0xe4>
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e9 57       	subi	r30, 0x79	; 121
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <_ZN12FirmataClass5parseEh+0x90>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e7 57       	subi	r30, 0x77	; 119
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	f0 81       	ld	r31, Z
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	30 97       	sbiw	r30, 0x00	; 0
    1ab8:	29 f1       	breq	.+74     	; 0x1b04 <_ZN12FirmataClass5parseEh+0xe4>
    1aba:	88 85       	ldd	r24, Y+8	; 0x08
    1abc:	69 85       	ldd	r22, Y+9	; 0x09
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	90 e8       	ldi	r25, 0x80	; 128
    1ac2:	89 9f       	mul	r24, r25
    1ac4:	60 0d       	add	r22, r0
    1ac6:	71 1d       	adc	r23, r1
    1ac8:	11 24       	eor	r1, r1
    1aca:	1a c0       	rjmp	.+52     	; 0x1b00 <_ZN12FirmataClass5parseEh+0xe0>
    1acc:	fe 01       	movw	r30, r28
    1ace:	e1 57       	subi	r30, 0x71	; 113
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <_ZN12FirmataClass5parseEh+0xba>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ef 56       	subi	r30, 0x6F	; 111
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	01 90       	ld	r0, Z+
    1adc:	f0 81       	ld	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	30 97       	sbiw	r30, 0x00	; 0
    1ae2:	81 f0       	breq	.+32     	; 0x1b04 <_ZN12FirmataClass5parseEh+0xe4>
    1ae4:	68 85       	ldd	r22, Y+8	; 0x08
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	0b c0       	rjmp	.+22     	; 0x1b02 <_ZN12FirmataClass5parseEh+0xe2>
    1aec:	fe 01       	movw	r30, r28
    1aee:	e3 57       	subi	r30, 0x73	; 115
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	01 90       	ld	r0, Z+
    1af4:	f0 81       	ld	r31, Z
    1af6:	e0 2d       	mov	r30, r0
    1af8:	30 97       	sbiw	r30, 0x00	; 0
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <_ZN12FirmataClass5parseEh+0xe4>
    1afc:	68 85       	ldd	r22, Y+8	; 0x08
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	8f 81       	ldd	r24, Y+7	; 0x07
    1b02:	09 95       	icall
    1b04:	1e 82       	std	Y+6, r1	; 0x06
    1b06:	42 c0       	rjmp	.+132    	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b08:	86 2f       	mov	r24, r22
    1b0a:	60 3f       	cpi	r22, 0xF0	; 240
    1b0c:	28 f4       	brcc	.+10     	; 0x1b18 <_ZN12FirmataClass5parseEh+0xf8>
    1b0e:	80 7f       	andi	r24, 0xF0	; 240
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	6f 70       	andi	r22, 0x0F	; 15
    1b14:	6f 83       	std	Y+7, r22	; 0x07
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <_ZN12FirmataClass5parseEh+0xfa>
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	80 3f       	cpi	r24, 0xF0	; 240
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	49 f1       	breq	.+82     	; 0x1b72 <_ZN12FirmataClass5parseEh+0x152>
    1b20:	7c f4       	brge	.+30     	; 0x1b40 <_ZN12FirmataClass5parseEh+0x120>
    1b22:	80 3c       	cpi	r24, 0xC0	; 192
    1b24:	91 05       	cpc	r25, r1
    1b26:	09 f1       	breq	.+66     	; 0x1b6a <_ZN12FirmataClass5parseEh+0x14a>
    1b28:	24 f4       	brge	.+8      	; 0x1b32 <_ZN12FirmataClass5parseEh+0x112>
    1b2a:	80 39       	cpi	r24, 0x90	; 144
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	d9 f0       	breq	.+54     	; 0x1b66 <_ZN12FirmataClass5parseEh+0x146>
    1b30:	2d c0       	rjmp	.+90     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b32:	80 3d       	cpi	r24, 0xD0	; 208
    1b34:	91 05       	cpc	r25, r1
    1b36:	c9 f0       	breq	.+50     	; 0x1b6a <_ZN12FirmataClass5parseEh+0x14a>
    1b38:	80 3e       	cpi	r24, 0xE0	; 224
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	a1 f0       	breq	.+40     	; 0x1b66 <_ZN12FirmataClass5parseEh+0x146>
    1b3e:	26 c0       	rjmp	.+76     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b40:	89 3f       	cpi	r24, 0xF9	; 249
    1b42:	91 05       	cpc	r25, r1
    1b44:	e9 f0       	breq	.+58     	; 0x1b80 <_ZN12FirmataClass5parseEh+0x160>
    1b46:	3c f4       	brge	.+14     	; 0x1b56 <_ZN12FirmataClass5parseEh+0x136>
    1b48:	9c 01       	movw	r18, r24
    1b4a:	24 5f       	subi	r18, 0xF4	; 244
    1b4c:	31 09       	sbc	r19, r1
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	48 f0       	brcs	.+18     	; 0x1b66 <_ZN12FirmataClass5parseEh+0x146>
    1b54:	1b c0       	rjmp	.+54     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b56:	8f 3f       	cpi	r24, 0xFF	; 255
    1b58:	91 05       	cpc	r25, r1
    1b5a:	c1 f4       	brne	.+48     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_ZN12FirmataClass11systemResetEv>
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <_ZN12FirmataClass5parseEh+0x14c>
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	9d 83       	std	Y+5, r25	; 0x05
    1b6e:	8e 83       	std	Y+6, r24	; 0x06
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	80 83       	st	Z, r24
    1b76:	c7 5b       	subi	r28, 0xB7	; 183
    1b78:	df 4f       	sbci	r29, 0xFF	; 255
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	18 82       	st	Y, r1
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <_ZN12FirmataClass5parseEh+0x16c>
    1b80:	88 e9       	ldi	r24, 0x98	; 152
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <_ZN12FirmataClass12printVersionEv>
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	08 95       	ret

00001b92 <_ZN12FirmataClass12processInputEv>:
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	ec 01       	movw	r28, r24
    1b98:	88 81       	ld	r24, Y
    1b9a:	99 81       	ldd	r25, Y+1	; 0x01
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	06 80       	ldd	r0, Z+6	; 0x06
    1ba4:	f7 81       	ldd	r31, Z+7	; 0x07
    1ba6:	e0 2d       	mov	r30, r0
    1ba8:	09 95       	icall
    1baa:	8f 3f       	cpi	r24, 0xFF	; 255
    1bac:	bf ef       	ldi	r27, 0xFF	; 255
    1bae:	9b 07       	cpc	r25, r27
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <_ZN12FirmataClass12processInputEv+0x2c>
    1bb2:	68 2f       	mov	r22, r24
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <_ZN12FirmataClass5parseEh>
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <_ZN12FirmataClass14strobeBlinkPinEhiii>:
    1bc4:	4f 92       	push	r4
    1bc6:	5f 92       	push	r5
    1bc8:	6f 92       	push	r6
    1bca:	7f 92       	push	r7
    1bcc:	af 92       	push	r10
    1bce:	bf 92       	push	r11
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	d6 2f       	mov	r29, r22
    1be2:	5a 01       	movw	r10, r20
    1be4:	c0 e0       	ldi	r28, 0x00	; 0
    1be6:	68 01       	movw	r12, r16
    1be8:	11 0f       	add	r17, r17
    1bea:	ee 08       	sbc	r14, r14
    1bec:	ff 08       	sbc	r15, r15
    1bee:	29 01       	movw	r4, r18
    1bf0:	33 0f       	add	r19, r19
    1bf2:	66 08       	sbc	r6, r6
    1bf4:	77 08       	sbc	r7, r7
    1bf6:	8c 2f       	mov	r24, r28
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	8a 15       	cp	r24, r10
    1bfc:	9b 05       	cpc	r25, r11
    1bfe:	94 f4       	brge	.+36     	; 0x1c24 <_ZN12FirmataClass14strobeBlinkPinEhiii+0x60>
    1c00:	c7 01       	movw	r24, r14
    1c02:	b6 01       	movw	r22, r12
    1c04:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <delay>
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	8d 2f       	mov	r24, r29
    1c0c:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    1c10:	c3 01       	movw	r24, r6
    1c12:	b2 01       	movw	r22, r4
    1c14:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <delay>
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	8d 2f       	mov	r24, r29
    1c1c:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    1c20:	cf 5f       	subi	r28, 0xFF	; 255
    1c22:	e9 cf       	rjmp	.-46     	; 0x1bf6 <_ZN12FirmataClass14strobeBlinkPinEhiii+0x32>
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	7f 90       	pop	r7
    1c3a:	6f 90       	pop	r6
    1c3c:	5f 90       	pop	r5
    1c3e:	4f 90       	pop	r4
    1c40:	08 95       	ret

00001c42 <_ZN12FirmataClass12blinkVersionEv>:
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e7 56       	subi	r30, 0x67	; 103
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	20 81       	ld	r18, Z
    1c52:	21 11       	cpse	r18, r1
    1c54:	27 c0       	rjmp	.+78     	; 0x1ca4 <_ZN12FirmataClass12blinkVersionEv+0x62>
    1c56:	ec 01       	movw	r28, r24
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	8d e0       	ldi	r24, 0x0D	; 13
    1c5c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
    1c60:	02 ed       	ldi	r16, 0xD2	; 210
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	28 e2       	ldi	r18, 0x28	; 40
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	42 e0       	ldi	r20, 0x02	; 2
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	6d e0       	ldi	r22, 0x0D	; 13
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN12FirmataClass14strobeBlinkPinEhiii>
    1c74:	6a ef       	ldi	r22, 0xFA	; 250
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <delay>
    1c80:	28 e2       	ldi	r18, 0x28	; 40
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	45 e0       	ldi	r20, 0x05	; 5
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	6d e0       	ldi	r22, 0x0D	; 13
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN12FirmataClass14strobeBlinkPinEhiii>
    1c90:	6d e7       	ldi	r22, 0x7D	; 125
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <delay>
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <_ZN12FirmataClass5beginEl>:
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	26 e0       	ldi	r18, 0x06	; 6
    1cb6:	8a ea       	ldi	r24, 0xAA	; 170
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN14HardwareSerial5beginEmh>
    1cbe:	8a ea       	ldi	r24, 0xAA	; 170
    1cc0:	93 e0       	ldi	r25, 0x03	; 3
    1cc2:	99 83       	std	Y+1, r25	; 0x01
    1cc4:	88 83       	st	Y, r24
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN12FirmataClass12blinkVersionEv>
    1ccc:	ce 01       	movw	r24, r28
    1cce:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN12FirmataClass12printVersionEv>
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_ZN12FirmataClass20printFirmwareVersionEv>

00001cdc <_GLOBAL__sub_I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:
    digitalWrite(pin, LOW);
  }
}

// make one instance for the user to use
FirmataClass Firmata;
    1cdc:	88 e9       	ldi	r24, 0x98	; 152
    1cde:	92 e0       	ldi	r25, 0x02	; 2
    1ce0:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_ZN12FirmataClassC1Ev>

00001ce4 <__vector_11>:
}

int Servo::read() // return the value as degrees
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
}
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	0f 92       	push	r0
    1cec:	11 24       	eor	r1, r1
    1cee:	2f 93       	push	r18
    1cf0:	3f 93       	push	r19
    1cf2:	4f 93       	push	r20
    1cf4:	5f 93       	push	r21
    1cf6:	6f 93       	push	r22
    1cf8:	7f 93       	push	r23
    1cfa:	8f 93       	push	r24
    1cfc:	9f 93       	push	r25
    1cfe:	af 93       	push	r26
    1d00:	bf 93       	push	r27
    1d02:	ef 93       	push	r30
    1d04:	ff 93       	push	r31
    1d06:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1d0a:	87 ff       	sbrs	r24, 7
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <__vector_11+0x34>
    1d0e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d12:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d16:	1b c0       	rjmp	.+54     	; 0x1d4e <__vector_11+0x6a>
    1d18:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <_ZL7Channel>
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	00 0c       	add	r0, r0
    1d20:	33 0b       	sbc	r19, r19
    1d22:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <ServoCount>
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	28 17       	cp	r18, r24
    1d2a:	39 07       	cpc	r19, r25
    1d2c:	84 f4       	brge	.+32     	; 0x1d4e <__vector_11+0x6a>
    1d2e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1d32:	08 2e       	mov	r0, r24
    1d34:	00 0c       	add	r0, r0
    1d36:	99 0b       	sbc	r25, r25
    1d38:	fc 01       	movw	r30, r24
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	8e 0f       	add	r24, r30
    1d40:	9f 1f       	adc	r25, r31
    1d42:	fc 01       	movw	r30, r24
    1d44:	ec 5c       	subi	r30, 0xCC	; 204
    1d46:	fc 4f       	sbci	r31, 0xFC	; 252
    1d48:	80 81       	ld	r24, Z
    1d4a:	86 fd       	sbrc	r24, 6
    1d4c:	15 c0       	rjmp	.+42     	; 0x1d78 <__vector_11+0x94>
    1d4e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1d52:	8f 5f       	subi	r24, 0xFF	; 255
    1d54:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZL7Channel>
    1d58:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <_ZL7Channel>
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	00 0c       	add	r0, r0
    1d60:	33 0b       	sbc	r19, r19
    1d62:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <ServoCount>
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	28 17       	cp	r18, r24
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	c4 f4       	brge	.+48     	; 0x1d9e <__vector_11+0xba>
    1d6e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1d72:	8c 30       	cpi	r24, 0x0C	; 12
    1d74:	64 f1       	brlt	.+88     	; 0x1dce <__vector_11+0xea>
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <__vector_11+0xba>
    1d78:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1d7c:	08 2e       	mov	r0, r24
    1d7e:	00 0c       	add	r0, r0
    1d80:	99 0b       	sbc	r25, r25
    1d82:	fc 01       	movw	r30, r24
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	8e 0f       	add	r24, r30
    1d8a:	9f 1f       	adc	r25, r31
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	ec 5c       	subi	r30, 0xCC	; 204
    1d90:	fc 4f       	sbci	r31, 0xFC	; 252
    1d92:	80 81       	ld	r24, Z
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	8f 73       	andi	r24, 0x3F	; 63
    1d98:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    1d9c:	d8 cf       	rjmp	.-80     	; 0x1d4e <__vector_11+0x6a>
    1d9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1da2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1da6:	04 96       	adiw	r24, 0x04	; 4
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	9c 49       	sbci	r25, 0x9C	; 156
    1dac:	18 f4       	brcc	.+6      	; 0x1db4 <__vector_11+0xd0>
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	9c e9       	ldi	r25, 0x9C	; 156
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <__vector_11+0xda>
    1db4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1db8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1dbc:	04 96       	adiw	r24, 0x04	; 4
    1dbe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1dc2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZL7Channel>
    1dcc:	3b c0       	rjmp	.+118    	; 0x1e44 <__vector_11+0x160>
    1dce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1dd2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1dd6:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1dda:	08 2e       	mov	r0, r24
    1ddc:	00 0c       	add	r0, r0
    1dde:	99 0b       	sbc	r25, r25
    1de0:	fc 01       	movw	r30, r24
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	8e 0f       	add	r24, r30
    1de8:	9f 1f       	adc	r25, r31
    1dea:	fc 01       	movw	r30, r24
    1dec:	ec 5c       	subi	r30, 0xCC	; 204
    1dee:	fc 4f       	sbci	r31, 0xFC	; 252
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	92 81       	ldd	r25, Z+2	; 0x02
    1df4:	82 0f       	add	r24, r18
    1df6:	93 1f       	adc	r25, r19
    1df8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1dfc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e00:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1e04:	08 2e       	mov	r0, r24
    1e06:	00 0c       	add	r0, r0
    1e08:	99 0b       	sbc	r25, r25
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	8e 0f       	add	r24, r30
    1e12:	9f 1f       	adc	r25, r31
    1e14:	fc 01       	movw	r30, r24
    1e16:	ec 5c       	subi	r30, 0xCC	; 204
    1e18:	fc 4f       	sbci	r31, 0xFC	; 252
    1e1a:	80 81       	ld	r24, Z
    1e1c:	86 ff       	sbrs	r24, 6
    1e1e:	12 c0       	rjmp	.+36     	; 0x1e44 <__vector_11+0x160>
    1e20:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZL7Channel>
    1e24:	08 2e       	mov	r0, r24
    1e26:	00 0c       	add	r0, r0
    1e28:	99 0b       	sbc	r25, r25
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	8e 0f       	add	r24, r30
    1e32:	9f 1f       	adc	r25, r31
    1e34:	fc 01       	movw	r30, r24
    1e36:	ec 5c       	subi	r30, 0xCC	; 204
    1e38:	fc 4f       	sbci	r31, 0xFC	; 252
    1e3a:	80 81       	ld	r24, Z
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	8f 73       	andi	r24, 0x3F	; 63
    1e40:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <_ZN5ServoC1Ev>:
    1e66:	fc 01       	movw	r30, r24
    1e68:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <ServoCount>
    1e6c:	9c 30       	cpi	r25, 0x0C	; 12
    1e6e:	a0 f4       	brcc	.+40     	; 0x1e98 <_ZN5ServoC1Ev+0x32>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	89 0f       	add	r24, r25
    1e74:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <ServoCount>
    1e78:	90 83       	st	Z, r25
    1e7a:	89 2f       	mov	r24, r25
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	8e 0f       	add	r24, r30
    1e86:	9f 1f       	adc	r25, r31
    1e88:	fc 01       	movw	r30, r24
    1e8a:	ec 5c       	subi	r30, 0xCC	; 204
    1e8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e8e:	88 eb       	ldi	r24, 0xB8	; 184
    1e90:	9b e0       	ldi	r25, 0x0B	; 11
    1e92:	92 83       	std	Z+2, r25	; 0x02
    1e94:	81 83       	std	Z+1, r24	; 0x01
    1e96:	08 95       	ret
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	80 83       	st	Z, r24
    1e9c:	08 95       	ret

00001e9e <_ZN5Servo6attachEiii>:
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    1eae:	d6 2e       	mov	r13, r22
    1eb0:	7a 01       	movw	r14, r20
    1eb2:	89 01       	movw	r16, r18
    1eb4:	88 81       	ld	r24, Y
    1eb6:	8c 30       	cpi	r24, 0x0C	; 12
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <_ZN5Servo6attachEiii+0x1e>
    1eba:	6a c0       	rjmp	.+212    	; 0x1f90 <_ZN5Servo6attachEiii+0xf2>
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	8d 2d       	mov	r24, r13
    1ec0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pinMode>
    1ec4:	88 81       	ld	r24, Y
    1ec6:	e8 2f       	mov	r30, r24
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	9f 01       	movw	r18, r30
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	e2 0f       	add	r30, r18
    1ed2:	f3 1f       	adc	r31, r19
    1ed4:	ec 5c       	subi	r30, 0xCC	; 204
    1ed6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed8:	9d 2d       	mov	r25, r13
    1eda:	9f 73       	andi	r25, 0x3F	; 63
    1edc:	20 81       	ld	r18, Z
    1ede:	20 7c       	andi	r18, 0xC0	; 192
    1ee0:	d2 2e       	mov	r13, r18
    1ee2:	d9 2a       	or	r13, r25
    1ee4:	d0 82       	st	Z, r13
    1ee6:	60 e2       	ldi	r22, 0x20	; 32
    1ee8:	72 e0       	ldi	r23, 0x02	; 2
    1eea:	ab 01       	movw	r20, r22
    1eec:	4e 19       	sub	r20, r14
    1eee:	5f 09       	sbc	r21, r15
    1ef0:	57 ff       	sbrs	r21, 7
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <_ZN5Servo6attachEiii+0x5a>
    1ef4:	4d 5f       	subi	r20, 0xFD	; 253
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	55 95       	asr	r21
    1efe:	47 95       	ror	r20
    1f00:	49 83       	std	Y+1, r20	; 0x01
    1f02:	40 e6       	ldi	r20, 0x60	; 96
    1f04:	59 e0       	ldi	r21, 0x09	; 9
    1f06:	9a 01       	movw	r18, r20
    1f08:	20 1b       	sub	r18, r16
    1f0a:	31 0b       	sbc	r19, r17
    1f0c:	37 ff       	sbrs	r19, 7
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <_ZN5Servo6attachEiii+0x76>
    1f10:	2d 5f       	subi	r18, 0xFD	; 253
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	35 95       	asr	r19
    1f16:	27 95       	ror	r18
    1f18:	35 95       	asr	r19
    1f1a:	27 95       	ror	r18
    1f1c:	2a 83       	std	Y+2, r18	; 0x02
    1f1e:	2c e0       	ldi	r18, 0x0C	; 12
    1f20:	62 2f       	mov	r22, r18
    1f22:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodqi4>
    1f26:	28 9f       	mul	r18, r24
    1f28:	b0 01       	movw	r22, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	9a 01       	movw	r18, r20
    1f32:	26 0f       	add	r18, r22
    1f34:	37 1f       	adc	r19, r23
    1f36:	f9 01       	movw	r30, r18
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	2e 0f       	add	r18, r30
    1f3e:	3f 1f       	adc	r19, r31
    1f40:	f9 01       	movw	r30, r18
    1f42:	ec 5c       	subi	r30, 0xCC	; 204
    1f44:	fc 4f       	sbci	r31, 0xFC	; 252
    1f46:	90 81       	ld	r25, Z
    1f48:	96 fd       	sbrc	r25, 6
    1f4a:	16 c0       	rjmp	.+44     	; 0x1f78 <_ZN5Servo6attachEiii+0xda>
    1f4c:	4f 5f       	subi	r20, 0xFF	; 255
    1f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f50:	4c 30       	cpi	r20, 0x0C	; 12
    1f52:	51 05       	cpc	r21, r1
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <_ZN5Servo6attachEiii+0x92>
    1f56:	81 11       	cpse	r24, r1
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <_ZN5Servo6attachEiii+0xda>
    1f5a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f64:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1f68:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1f6c:	b1 9a       	sbi	0x16, 1	; 22
    1f6e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f72:	82 60       	ori	r24, 0x02	; 2
    1f74:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f78:	e8 81       	ld	r30, Y
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	e8 0f       	add	r30, r24
    1f84:	f9 1f       	adc	r31, r25
    1f86:	ec 5c       	subi	r30, 0xCC	; 204
    1f88:	fc 4f       	sbci	r31, 0xFC	; 252
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 64       	ori	r24, 0x40	; 64
    1f8e:	80 83       	st	Z, r24
    1f90:	88 81       	ld	r24, Y
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	08 95       	ret

00001fa2 <_ZN5Servo6attachEi>:
    1fa2:	20 e6       	ldi	r18, 0x60	; 96
    1fa4:	39 e0       	ldi	r19, 0x09	; 9
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	52 e0       	ldi	r21, 0x02	; 2
    1faa:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN5Servo6attachEiii>

00001fae <_ZN5Servo6detachEv>:
    1fae:	dc 01       	movw	r26, r24
    1fb0:	ec 91       	ld	r30, X
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	e8 0f       	add	r30, r24
    1fbc:	f9 1f       	adc	r31, r25
    1fbe:	ec 5c       	subi	r30, 0xCC	; 204
    1fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 7b       	andi	r24, 0xBF	; 191
    1fc6:	80 83       	st	Z, r24
    1fc8:	08 95       	ret

00001fca <_ZN5Servo17writeMicrosecondsEi>:
    1fca:	fc 01       	movw	r30, r24
    1fcc:	90 81       	ld	r25, Z
    1fce:	9c 30       	cpi	r25, 0x0C	; 12
    1fd0:	80 f5       	brcc	.+96     	; 0x2032 <_ZN5Servo17writeMicrosecondsEi+0x68>
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	28 e8       	ldi	r18, 0x88	; 136
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	28 1b       	sub	r18, r24
    1fda:	31 09       	sbc	r19, r1
    1fdc:	87 fd       	sbrc	r24, 7
    1fde:	33 95       	inc	r19
    1fe0:	22 0f       	add	r18, r18
    1fe2:	33 1f       	adc	r19, r19
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	62 17       	cp	r22, r18
    1fea:	73 07       	cpc	r23, r19
    1fec:	7c f0       	brlt	.+30     	; 0x200c <_ZN5Servo17writeMicrosecondsEi+0x42>
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	28 e5       	ldi	r18, 0x58	; 88
    1ff2:	32 e0       	ldi	r19, 0x02	; 2
    1ff4:	28 1b       	sub	r18, r24
    1ff6:	31 09       	sbc	r19, r1
    1ff8:	87 fd       	sbrc	r24, 7
    1ffa:	33 95       	inc	r19
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	62 17       	cp	r22, r18
    2006:	73 07       	cpc	r23, r19
    2008:	0c f4       	brge	.+2      	; 0x200c <_ZN5Servo17writeMicrosecondsEi+0x42>
    200a:	9b 01       	movw	r18, r22
    200c:	22 50       	subi	r18, 0x02	; 2
    200e:	31 09       	sbc	r19, r1
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	4f b7       	in	r20, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	89 2f       	mov	r24, r25
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	fc 01       	movw	r30, r24
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	8e 0f       	add	r24, r30
    2024:	9f 1f       	adc	r25, r31
    2026:	fc 01       	movw	r30, r24
    2028:	ec 5c       	subi	r30, 0xCC	; 204
    202a:	fc 4f       	sbci	r31, 0xFC	; 252
    202c:	32 83       	std	Z+2, r19	; 0x02
    202e:	21 83       	std	Z+1, r18	; 0x01
    2030:	4f bf       	out	0x3f, r20	; 63
    2032:	08 95       	ret

00002034 <_ZN5Servo5writeEi>:
    2034:	af 92       	push	r10
    2036:	bf 92       	push	r11
    2038:	cf 92       	push	r12
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	ec 01       	movw	r28, r24
    204a:	60 32       	cpi	r22, 0x20	; 32
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	78 07       	cpc	r23, r24
    2050:	0c f0       	brlt	.+2      	; 0x2054 <_ZN5Servo5writeEi+0x20>
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <_ZN5Servo5writeEi+0x9e>
    2054:	77 fd       	sbrc	r23, 7
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <_ZN5Servo5writeEi+0x30>
    2058:	65 3b       	cpi	r22, 0xB5	; 181
    205a:	71 05       	cpc	r23, r1
    205c:	2c f0       	brlt	.+10     	; 0x2068 <_ZN5Servo5writeEi+0x34>
    205e:	64 eb       	ldi	r22, 0xB4	; 180
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <_ZN5Servo5writeEi+0x34>
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	28 e8       	ldi	r18, 0x88	; 136
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	59 01       	movw	r10, r18
    2070:	a8 1a       	sub	r10, r24
    2072:	b1 08       	sbc	r11, r1
    2074:	87 fd       	sbrc	r24, 7
    2076:	b3 94       	inc	r11
    2078:	aa 0c       	add	r10, r10
    207a:	bb 1c       	adc	r11, r11
    207c:	aa 0c       	add	r10, r10
    207e:	bb 1c       	adc	r11, r11
    2080:	0b 2c       	mov	r0, r11
    2082:	00 0c       	add	r0, r0
    2084:	cc 08       	sbc	r12, r12
    2086:	dd 08       	sbc	r13, r13
    2088:	07 2e       	mov	r0, r23
    208a:	00 0c       	add	r0, r0
    208c:	88 0b       	sbc	r24, r24
    208e:	99 0b       	sbc	r25, r25
    2090:	2a 81       	ldd	r18, Y+2	; 0x02
    2092:	08 e5       	ldi	r16, 0x58	; 88
    2094:	12 e0       	ldi	r17, 0x02	; 2
    2096:	02 1b       	sub	r16, r18
    2098:	11 09       	sbc	r17, r1
    209a:	27 fd       	sbrc	r18, 7
    209c:	13 95       	inc	r17
    209e:	00 0f       	add	r16, r16
    20a0:	11 1f       	adc	r17, r17
    20a2:	00 0f       	add	r16, r16
    20a4:	11 1f       	adc	r17, r17
    20a6:	01 2e       	mov	r0, r17
    20a8:	00 0c       	add	r0, r0
    20aa:	22 0b       	sbc	r18, r18
    20ac:	33 0b       	sbc	r19, r19
    20ae:	3f 93       	push	r19
    20b0:	2f 93       	push	r18
    20b2:	1f 93       	push	r17
    20b4:	0f 93       	push	r16
    20b6:	14 eb       	ldi	r17, 0xB4	; 180
    20b8:	e1 2e       	mov	r14, r17
    20ba:	f1 2c       	mov	r15, r1
    20bc:	00 e0       	ldi	r16, 0x00	; 0
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	0e 94 9c 13 	call	0x2738	; 0x2738 <_Z3maplllll>
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	ce 01       	movw	r24, r28
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	bf 90       	pop	r11
    20e6:	af 90       	pop	r10
    20e8:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_ZN5Servo17writeMicrosecondsEi>

000020ec <_ZN5Servo8attachedEv>:
  return pulsewidth;
}

bool Servo::attached()
{
  return servos[this->servoIndex].Pin.isActive ;
    20ec:	fc 01       	movw	r30, r24
    20ee:	80 81       	ld	r24, Z
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	fc 01       	movw	r30, r24
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	8e 0f       	add	r24, r30
    20fa:	9f 1f       	adc	r25, r31
    20fc:	fc 01       	movw	r30, r24
    20fe:	ec 5c       	subi	r30, 0xCC	; 204
    2100:	fc 4f       	sbci	r31, 0xFC	; 252
    2102:	80 81       	ld	r24, Z
}
    2104:	86 fb       	bst	r24, 6
    2106:	88 27       	eor	r24, r24
    2108:	80 f9       	bld	r24, 0
    210a:	08 95       	ret

0000210c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    210c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_ZN7TwoWire14rxBufferLengthE>
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    2116:	82 1b       	sub	r24, r18
    2118:	91 09       	sbc	r25, r1
    211a:	08 95       	ret

0000211c <_ZN7TwoWire4readEv>:
    211c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    2120:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_ZN7TwoWire14rxBufferLengthE>
    2124:	98 17       	cp	r25, r24
    2126:	50 f4       	brcc	.+20     	; 0x213c <_ZN7TwoWire4readEv+0x20>
    2128:	e9 2f       	mov	r30, r25
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	e6 57       	subi	r30, 0x76	; 118
    212e:	fc 4f       	sbci	r31, 0xFC	; 252
    2130:	20 81       	ld	r18, Z
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	9f 5f       	subi	r25, 0xFF	; 255
    2136:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <_ZN7TwoWire4readEv+0x24>
    213c:	2f ef       	ldi	r18, 0xFF	; 255
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	c9 01       	movw	r24, r18
    2142:	08 95       	ret

00002144 <_ZN7TwoWire4peekEv>:
    2144:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    2148:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_ZN7TwoWire14rxBufferLengthE>
    214c:	e8 17       	cp	r30, r24
    214e:	30 f4       	brcc	.+12     	; 0x215c <_ZN7TwoWire4peekEv+0x18>
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	e6 57       	subi	r30, 0x76	; 118
    2154:	fc 4f       	sbci	r31, 0xFC	; 252
    2156:	80 81       	ld	r24, Z
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	08 95       	ret
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <_ZN7TwoWire5flushEv>:
    2162:	08 95       	ret

00002164 <_ZN7TwoWire5writeEPKhj>:
    2164:	cf 92       	push	r12
    2166:	df 92       	push	r13
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	7c 01       	movw	r14, r24
    2176:	26 2f       	mov	r18, r22
    2178:	97 2f       	mov	r25, r23
    217a:	8a 01       	movw	r16, r20
    217c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <_ZN7TwoWire12transmittingE>
    2180:	88 23       	and	r24, r24
    2182:	91 f0       	breq	.+36     	; 0x21a8 <_ZN7TwoWire5writeEPKhj+0x44>
    2184:	c6 2f       	mov	r28, r22
    2186:	d7 2f       	mov	r29, r23
    2188:	6e 01       	movw	r12, r28
    218a:	c4 0e       	add	r12, r20
    218c:	d5 1e       	adc	r13, r21
    218e:	cc 15       	cp	r28, r12
    2190:	dd 05       	cpc	r29, r13
    2192:	71 f0       	breq	.+28     	; 0x21b0 <_ZN7TwoWire5writeEPKhj+0x4c>
    2194:	69 91       	ld	r22, Y+
    2196:	d7 01       	movw	r26, r14
    2198:	ed 91       	ld	r30, X+
    219a:	fc 91       	ld	r31, X
    219c:	01 90       	ld	r0, Z+
    219e:	f0 81       	ld	r31, Z
    21a0:	e0 2d       	mov	r30, r0
    21a2:	c7 01       	movw	r24, r14
    21a4:	09 95       	icall
    21a6:	f3 cf       	rjmp	.-26     	; 0x218e <_ZN7TwoWire5writeEPKhj+0x2a>
    21a8:	64 2f       	mov	r22, r20
    21aa:	82 2f       	mov	r24, r18
    21ac:	0e 94 99 14 	call	0x2932	; 0x2932 <twi_transmit>
    21b0:	c8 01       	movw	r24, r16
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	08 95       	ret

000021c4 <_ZN7TwoWire5writeEh>:
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	1f 92       	push	r1
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	69 83       	std	Y+1, r22	; 0x01
    21d0:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <_ZN7TwoWire12transmittingE>
    21d4:	22 23       	and	r18, r18
    21d6:	d1 f0       	breq	.+52     	; 0x220c <_ZN7TwoWire5writeEh+0x48>
    21d8:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    21dc:	20 32       	cpi	r18, 0x20	; 32
    21de:	40 f0       	brcs	.+16     	; 0x21f0 <_ZN7TwoWire5writeEh+0x2c>
    21e0:	21 e0       	ldi	r18, 0x01	; 1
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	fc 01       	movw	r30, r24
    21e6:	33 83       	std	Z+3, r19	; 0x03
    21e8:	22 83       	std	Z+2, r18	; 0x02
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	15 c0       	rjmp	.+42     	; 0x221a <_ZN7TwoWire5writeEh+0x56>
    21f0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <_ZN7TwoWire13txBufferIndexE>
    21f4:	e8 2f       	mov	r30, r24
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	e9 59       	subi	r30, 0x99	; 153
    21fa:	fc 4f       	sbci	r31, 0xFC	; 252
    21fc:	99 81       	ldd	r25, Y+1	; 0x01
    21fe:	90 83       	st	Z, r25
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <_ZN7TwoWire13txBufferIndexE>
    2206:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <_ZN7TwoWire5writeEh+0x52>
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 99 14 	call	0x2932	; 0x2932 <twi_transmit>
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <_ZN7TwoWireC1Ev>:
    2222:	fc 01       	movw	r30, r24
    2224:	13 82       	std	Z+3, r1	; 0x03
    2226:	12 82       	std	Z+2, r1	; 0x02
    2228:	88 ee       	ldi	r24, 0xE8	; 232
    222a:	93 e0       	ldi	r25, 0x03	; 3
    222c:	a0 e0       	ldi	r26, 0x00	; 0
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	84 83       	std	Z+4, r24	; 0x04
    2232:	95 83       	std	Z+5, r25	; 0x05
    2234:	a6 83       	std	Z+6, r26	; 0x06
    2236:	b7 83       	std	Z+7, r27	; 0x07
    2238:	8d ea       	ldi	r24, 0xAD	; 173
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	08 95       	ret

00002242 <_ZN7TwoWire5beginEv>:
    2242:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    2246:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_ZN7TwoWire14rxBufferLengthE>
    224a:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZN7TwoWire13txBufferIndexE>
    224e:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    2252:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <twi_init>

00002256 <_ZN7TwoWire17beginTransmissionEh>:
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <_ZN7TwoWire12transmittingE>
    225c:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <_ZN7TwoWire9txAddressE>
    2260:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZN7TwoWire13txBufferIndexE>
    2264:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    2268:	08 95       	ret

0000226a <_ZN7TwoWire15endTransmissionEh>:
    226a:	0f 93       	push	r16
    226c:	06 2f       	mov	r16, r22
    226e:	21 e0       	ldi	r18, 0x01	; 1
    2270:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    2274:	67 e6       	ldi	r22, 0x67	; 103
    2276:	73 e0       	ldi	r23, 0x03	; 3
    2278:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_ZN7TwoWire9txAddressE>
    227c:	0e 94 43 14 	call	0x2886	; 0x2886 <twi_writeTo>
    2280:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <_ZN7TwoWire13txBufferIndexE>
    2284:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <_ZN7TwoWire14txBufferLengthE>
    2288:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire12transmittingE>
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <_ZN7TwoWire11requestFromEhhmhh>:
    2290:	4f 92       	push	r4
    2292:	5f 92       	push	r5
    2294:	6f 92       	push	r6
    2296:	7f 92       	push	r7
    2298:	af 92       	push	r10
    229a:	bf 92       	push	r11
    229c:	cf 92       	push	r12
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	5c 01       	movw	r10, r24
    22ac:	f6 2e       	mov	r15, r22
    22ae:	d4 2f       	mov	r29, r20
    22b0:	28 01       	movw	r4, r16
    22b2:	39 01       	movw	r6, r18
    22b4:	ee 20       	and	r14, r14
    22b6:	21 f1       	breq	.+72     	; 0x2300 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    22b8:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN7TwoWire17beginTransmissionEh>
    22bc:	ce 2d       	mov	r28, r14
    22be:	c4 30       	cpi	r28, 0x04	; 4
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22c2:	c3 e0       	ldi	r28, 0x03	; 3
    22c4:	c1 50       	subi	r28, 0x01	; 1
    22c6:	c0 f0       	brcs	.+48     	; 0x22f8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    22c8:	d5 01       	movw	r26, r10
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	b8 e0       	ldi	r27, 0x08	; 8
    22d0:	cb 9f       	mul	r28, r27
    22d2:	c0 01       	movw	r24, r0
    22d4:	11 24       	eor	r1, r1
    22d6:	a3 01       	movw	r20, r6
    22d8:	92 01       	movw	r18, r4
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    22dc:	56 95       	lsr	r21
    22de:	47 95       	ror	r20
    22e0:	37 95       	ror	r19
    22e2:	27 95       	ror	r18
    22e4:	8a 95       	dec	r24
    22e6:	d2 f7       	brpl	.-12     	; 0x22dc <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    22e8:	ca 01       	movw	r24, r20
    22ea:	b9 01       	movw	r22, r18
    22ec:	01 90       	ld	r0, Z+
    22ee:	f0 81       	ld	r31, Z
    22f0:	e0 2d       	mov	r30, r0
    22f2:	c5 01       	movw	r24, r10
    22f4:	09 95       	icall
    22f6:	e6 cf       	rjmp	.-52     	; 0x22c4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	c5 01       	movw	r24, r10
    22fc:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN7TwoWire15endTransmissionEh>
    2300:	4d 2f       	mov	r20, r29
    2302:	d1 32       	cpi	r29, 0x21	; 33
    2304:	08 f0       	brcs	.+2      	; 0x2308 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	2c 2d       	mov	r18, r12
    230a:	6a e8       	ldi	r22, 0x8A	; 138
    230c:	73 e0       	ldi	r23, 0x03	; 3
    230e:	8f 2d       	mov	r24, r15
    2310:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <twi_readFrom>
    2314:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <_ZN7TwoWire13rxBufferIndexE>
    2318:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <_ZN7TwoWire14rxBufferLengthE>
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	cf 90       	pop	r12
    232a:	bf 90       	pop	r11
    232c:	af 90       	pop	r10
    232e:	7f 90       	pop	r7
    2330:	6f 90       	pop	r6
    2332:	5f 90       	pop	r5
    2334:	4f 90       	pop	r4
    2336:	08 95       	ret

00002338 <_ZN7TwoWire11requestFromEhhh>:
    2338:	cf 92       	push	r12
    233a:	ef 92       	push	r14
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	c2 2e       	mov	r12, r18
    2342:	e1 2c       	mov	r14, r1
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	98 01       	movw	r18, r16
    234a:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN7TwoWire11requestFromEhhmhh>
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ef 90       	pop	r14
    2354:	cf 90       	pop	r12
    2356:	08 95       	ret

00002358 <_ZN7TwoWire11requestFromEhh>:
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_ZN7TwoWire11requestFromEhhh>

0000235e <_ZN7TwoWire15endTransmissionEv>:
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	0c 94 35 11 	jmp	0x226a	; 0x226a <_ZN7TwoWire15endTransmissionEh>

00002364 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2364:	88 e5       	ldi	r24, 0x58	; 88
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	0c 94 11 11 	jmp	0x2222	; 0x2222 <_ZN7TwoWireC1Ev>

0000236c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    236c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    236e:	91 8d       	ldd	r25, Z+25	; 0x19
    2370:	22 8d       	ldd	r18, Z+26	; 0x1a
    2372:	89 2f       	mov	r24, r25
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	80 5c       	subi	r24, 0xC0	; 192
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	82 1b       	sub	r24, r18
    237c:	91 09       	sbc	r25, r1
}
    237e:	8f 73       	andi	r24, 0x3F	; 63
    2380:	99 27       	eor	r25, r25
    2382:	08 95       	ret

00002384 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2384:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2386:	91 8d       	ldd	r25, Z+25	; 0x19
    2388:	82 8d       	ldd	r24, Z+26	; 0x1a
    238a:	98 17       	cp	r25, r24
    238c:	31 f0       	breq	.+12     	; 0x239a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    238e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2390:	e8 0f       	add	r30, r24
    2392:	f1 1d       	adc	r31, r1
    2394:	85 8d       	ldd	r24, Z+29	; 0x1d
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    239e:	08 95       	ret

000023a0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    23a0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    23a2:	91 8d       	ldd	r25, Z+25	; 0x19
    23a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    23a6:	98 17       	cp	r25, r24
    23a8:	61 f0       	breq	.+24     	; 0x23c2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    23aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ac:	df 01       	movw	r26, r30
    23ae:	a8 0f       	add	r26, r24
    23b0:	b1 1d       	adc	r27, r1
    23b2:	5d 96       	adiw	r26, 0x1d	; 29
    23b4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    23b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    23b8:	9f 5f       	subi	r25, 0xFF	; 255
    23ba:	9f 73       	andi	r25, 0x3F	; 63
    23bc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    23c6:	08 95       	ret

000023c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    23c8:	89 e3       	ldi	r24, 0x39	; 57
    23ca:	93 e1       	ldi	r25, 0x13	; 19
    23cc:	89 2b       	or	r24, r25
    23ce:	49 f0       	breq	.+18     	; 0x23e2 <_Z14serialEventRunv+0x1a>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	89 2b       	or	r24, r25
    23d6:	29 f0       	breq	.+10     	; 0x23e2 <_Z14serialEventRunv+0x1a>
    23d8:	0e 94 39 13 	call	0x2672	; 0x2672 <_Z17Serial0_availablev>
    23dc:	81 11       	cpse	r24, r1
    23de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    23e2:	08 95       	ret

000023e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    23e4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    23e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    23e8:	df 01       	movw	r26, r30
    23ea:	a8 0f       	add	r26, r24
    23ec:	b1 1d       	adc	r27, r1
    23ee:	a3 5a       	subi	r26, 0xA3	; 163
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    23f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	8f 73       	andi	r24, 0x3F	; 63
    23fc:	99 27       	eor	r25, r25
    23fe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2400:	a6 89       	ldd	r26, Z+22	; 0x16
    2402:	b7 89       	ldd	r27, Z+23	; 0x17
    2404:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2406:	a0 89       	ldd	r26, Z+16	; 0x10
    2408:	b1 89       	ldd	r27, Z+17	; 0x11
    240a:	8c 91       	ld	r24, X
    240c:	80 64       	ori	r24, 0x40	; 64
    240e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2410:	93 8d       	ldd	r25, Z+27	; 0x1b
    2412:	84 8d       	ldd	r24, Z+28	; 0x1c
    2414:	98 13       	cpse	r25, r24
    2416:	06 c0       	rjmp	.+12     	; 0x2424 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2418:	02 88       	ldd	r0, Z+18	; 0x12
    241a:	f3 89       	ldd	r31, Z+19	; 0x13
    241c:	e0 2d       	mov	r30, r0
    241e:	80 81       	ld	r24, Z
    2420:	8f 7d       	andi	r24, 0xDF	; 223
    2422:	80 83       	st	Z, r24
    2424:	08 95       	ret

00002426 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    242c:	88 8d       	ldd	r24, Y+24	; 0x18
    242e:	88 23       	and	r24, r24
    2430:	c9 f0       	breq	.+50     	; 0x2464 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2432:	ea 89       	ldd	r30, Y+18	; 0x12
    2434:	fb 89       	ldd	r31, Y+19	; 0x13
    2436:	80 81       	ld	r24, Z
    2438:	85 fd       	sbrc	r24, 5
    243a:	05 c0       	rjmp	.+10     	; 0x2446 <_ZN14HardwareSerial5flushEv+0x20>
    243c:	a8 89       	ldd	r26, Y+16	; 0x10
    243e:	b9 89       	ldd	r27, Y+17	; 0x11
    2440:	8c 91       	ld	r24, X
    2442:	86 fd       	sbrc	r24, 6
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	07 fc       	sbrc	r0, 7
    244a:	f5 cf       	rjmp	.-22     	; 0x2436 <_ZN14HardwareSerial5flushEv+0x10>
    244c:	80 81       	ld	r24, Z
    244e:	85 ff       	sbrs	r24, 5
    2450:	f2 cf       	rjmp	.-28     	; 0x2436 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2452:	a8 89       	ldd	r26, Y+16	; 0x10
    2454:	b9 89       	ldd	r27, Y+17	; 0x11
    2456:	8c 91       	ld	r24, X
    2458:	85 ff       	sbrs	r24, 5
    245a:	ed cf       	rjmp	.-38     	; 0x2436 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    245c:	ce 01       	movw	r24, r28
    245e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2462:	e7 cf       	rjmp	.-50     	; 0x2432 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	ec 01       	movw	r28, r24
  _written = true;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    247c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    247e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2480:	98 13       	cpse	r25, r24
    2482:	05 c0       	rjmp	.+10     	; 0x248e <_ZN14HardwareSerial5writeEh+0x24>
    2484:	e8 89       	ldd	r30, Y+16	; 0x10
    2486:	f9 89       	ldd	r31, Y+17	; 0x11
    2488:	80 81       	ld	r24, Z
    248a:	85 fd       	sbrc	r24, 5
    248c:	24 c0       	rjmp	.+72     	; 0x24d6 <_ZN14HardwareSerial5writeEh+0x6c>
    248e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2490:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	0f 5f       	subi	r16, 0xFF	; 255
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	0f 73       	andi	r16, 0x3F	; 63
    249a:	11 27       	eor	r17, r17
    249c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    249e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a0:	e8 12       	cpse	r14, r24
    24a2:	0c c0       	rjmp	.+24     	; 0x24bc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	07 fc       	sbrc	r0, 7
    24a8:	fa cf       	rjmp	.-12     	; 0x249e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    24aa:	e8 89       	ldd	r30, Y+16	; 0x10
    24ac:	f9 89       	ldd	r31, Y+17	; 0x11
    24ae:	80 81       	ld	r24, Z
    24b0:	85 ff       	sbrs	r24, 5
    24b2:	f5 cf       	rjmp	.-22     	; 0x249e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    24b4:	ce 01       	movw	r24, r28
    24b6:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    24ba:	f1 cf       	rjmp	.-30     	; 0x249e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    24bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24be:	fe 01       	movw	r30, r28
    24c0:	e8 0f       	add	r30, r24
    24c2:	f1 1d       	adc	r31, r1
    24c4:	e3 5a       	subi	r30, 0xA3	; 163
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    24ca:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    24cc:	ea 89       	ldd	r30, Y+18	; 0x12
    24ce:	fb 89       	ldd	r31, Y+19	; 0x13
    24d0:	80 81       	ld	r24, Z
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    24d6:	ee 89       	ldd	r30, Y+22	; 0x16
    24d8:	ff 89       	ldd	r31, Y+23	; 0x17
    24da:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    24dc:	e8 89       	ldd	r30, Y+16	; 0x10
    24de:	f9 89       	ldd	r31, Y+17	; 0x11
    24e0:	80 81       	ld	r24, Z
    24e2:	80 64       	ori	r24, 0x40	; 64
    24e4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	08 95       	ret

000024f8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    24f8:	cf 92       	push	r12
    24fa:	df 92       	push	r13
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	ec 01       	movw	r28, r24
    2508:	6a 01       	movw	r12, r20
    250a:	7b 01       	movw	r14, r22
    250c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    250e:	e8 89       	ldd	r30, Y+16	; 0x10
    2510:	f9 89       	ldd	r31, Y+17	; 0x11
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2516:	41 15       	cp	r20, r1
    2518:	51 4e       	sbci	r21, 0xE1	; 225
    251a:	61 05       	cpc	r22, r1
    251c:	71 05       	cpc	r23, r1
    251e:	b1 f0       	breq	.+44     	; 0x254c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	79 e0       	ldi	r23, 0x09	; 9
    2524:	8d e3       	ldi	r24, 0x3D	; 61
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a7 01       	movw	r20, r14
    252a:	96 01       	movw	r18, r12
    252c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__udivmodsi4>
    2530:	da 01       	movw	r26, r20
    2532:	c9 01       	movw	r24, r18
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	a1 09       	sbc	r26, r1
    2538:	b1 09       	sbc	r27, r1
    253a:	b6 95       	lsr	r27
    253c:	a7 95       	ror	r26
    253e:	97 95       	ror	r25
    2540:	87 95       	ror	r24
    2542:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2544:	41 15       	cp	r20, r1
    2546:	80 e1       	ldi	r24, 0x10	; 16
    2548:	58 07       	cpc	r21, r24
    254a:	a8 f0       	brcs	.+42     	; 0x2576 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    254c:	e8 89       	ldd	r30, Y+16	; 0x10
    254e:	f9 89       	ldd	r31, Y+17	; 0x11
    2550:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2552:	60 e8       	ldi	r22, 0x80	; 128
    2554:	74 e8       	ldi	r23, 0x84	; 132
    2556:	8e e1       	ldi	r24, 0x1E	; 30
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a7 01       	movw	r20, r14
    255c:	96 01       	movw	r18, r12
    255e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__udivmodsi4>
    2562:	ba 01       	movw	r22, r20
    2564:	a9 01       	movw	r20, r18
    2566:	41 50       	subi	r20, 0x01	; 1
    2568:	51 09       	sbc	r21, r1
    256a:	61 09       	sbc	r22, r1
    256c:	71 09       	sbc	r23, r1
    256e:	76 95       	lsr	r23
    2570:	67 95       	ror	r22
    2572:	57 95       	ror	r21
    2574:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2576:	ec 85       	ldd	r30, Y+12	; 0x0c
    2578:	fd 85       	ldd	r31, Y+13	; 0x0d
    257a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    257c:	ee 85       	ldd	r30, Y+14	; 0x0e
    257e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2580:	40 83       	st	Z, r20

  _written = false;
    2582:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2584:	ec 89       	ldd	r30, Y+20	; 0x14
    2586:	fd 89       	ldd	r31, Y+21	; 0x15
    2588:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    258a:	ea 89       	ldd	r30, Y+18	; 0x12
    258c:	fb 89       	ldd	r31, Y+19	; 0x13
    258e:	80 81       	ld	r24, Z
    2590:	80 61       	ori	r24, 0x10	; 16
    2592:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2594:	ea 89       	ldd	r30, Y+18	; 0x12
    2596:	fb 89       	ldd	r31, Y+19	; 0x13
    2598:	80 81       	ld	r24, Z
    259a:	88 60       	ori	r24, 0x08	; 8
    259c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    259e:	ea 89       	ldd	r30, Y+18	; 0x12
    25a0:	fb 89       	ldd	r31, Y+19	; 0x13
    25a2:	80 81       	ld	r24, Z
    25a4:	80 68       	ori	r24, 0x80	; 128
    25a6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    25a8:	ea 89       	ldd	r30, Y+18	; 0x12
    25aa:	fb 89       	ldd	r31, Y+19	; 0x13
    25ac:	80 81       	ld	r24, Z
    25ae:	8f 7d       	andi	r24, 0xDF	; 223
    25b0:	80 83       	st	Z, r24
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	df 90       	pop	r13
    25be:	cf 90       	pop	r12
    25c0:	08 95       	ret

000025c2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    25c2:	1f 92       	push	r1
    25c4:	0f 92       	push	r0
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	0f 92       	push	r0
    25ca:	11 24       	eor	r1, r1
    25cc:	2f 93       	push	r18
    25ce:	8f 93       	push	r24
    25d0:	9f 93       	push	r25
    25d2:	ef 93       	push	r30
    25d4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    25d6:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <Serial+0x10>
    25da:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <Serial+0x11>
    25de:	80 81       	ld	r24, Z
    25e0:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <Serial+0x16>
    25e4:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <Serial+0x17>
    25e8:	82 fd       	sbrc	r24, 2
    25ea:	12 c0       	rjmp	.+36     	; 0x2610 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    25ec:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    25ee:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <Serial+0x19>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    25f6:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <Serial+0x1a>
    25fa:	82 17       	cp	r24, r18
    25fc:	51 f0       	breq	.+20     	; 0x2612 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    25fe:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <Serial+0x19>
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	e6 55       	subi	r30, 0x56	; 86
    2606:	fc 4f       	sbci	r31, 0xFC	; 252
    2608:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    260a:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Serial+0x19>
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2610:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2612:	ff 91       	pop	r31
    2614:	ef 91       	pop	r30
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	2f 91       	pop	r18
    261c:	0f 90       	pop	r0
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	0f 90       	pop	r0
    2622:	1f 90       	pop	r1
    2624:	18 95       	reti

00002626 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2626:	1f 92       	push	r1
    2628:	0f 92       	push	r0
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	0f 92       	push	r0
    262e:	11 24       	eor	r1, r1
    2630:	2f 93       	push	r18
    2632:	3f 93       	push	r19
    2634:	4f 93       	push	r20
    2636:	5f 93       	push	r21
    2638:	6f 93       	push	r22
    263a:	7f 93       	push	r23
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
    2640:	af 93       	push	r26
    2642:	bf 93       	push	r27
    2644:	ef 93       	push	r30
    2646:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2648:	8a ea       	ldi	r24, 0xAA	; 170
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2650:	ff 91       	pop	r31
    2652:	ef 91       	pop	r30
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2672:	8a ea       	ldi	r24, 0xAA	; 170
    2674:	93 e0       	ldi	r25, 0x03	; 3
    2676:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN14HardwareSerial9availableEv>
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	89 2b       	or	r24, r25
    267e:	09 f4       	brne	.+2      	; 0x2682 <_Z17Serial0_availablev+0x10>
    2680:	20 e0       	ldi	r18, 0x00	; 0
}
    2682:	82 2f       	mov	r24, r18
    2684:	08 95       	ret

00002686 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2686:	ea ea       	ldi	r30, 0xAA	; 170
    2688:	f3 e0       	ldi	r31, 0x03	; 3
    268a:	13 82       	std	Z+3, r1	; 0x03
    268c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    268e:	88 ee       	ldi	r24, 0xE8	; 232
    2690:	93 e0       	ldi	r25, 0x03	; 3
    2692:	a0 e0       	ldi	r26, 0x00	; 0
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	84 83       	std	Z+4, r24	; 0x04
    2698:	95 83       	std	Z+5, r25	; 0x05
    269a:	a6 83       	std	Z+6, r26	; 0x06
    269c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    269e:	8d eb       	ldi	r24, 0xBD	; 189
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	85 ec       	ldi	r24, 0xC5	; 197
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	95 87       	std	Z+13, r25	; 0x0d
    26ac:	84 87       	std	Z+12, r24	; 0x0c
    26ae:	84 ec       	ldi	r24, 0xC4	; 196
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	97 87       	std	Z+15, r25	; 0x0f
    26b4:	86 87       	std	Z+14, r24	; 0x0e
    26b6:	80 ec       	ldi	r24, 0xC0	; 192
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	91 8b       	std	Z+17, r25	; 0x11
    26bc:	80 8b       	std	Z+16, r24	; 0x10
    26be:	81 ec       	ldi	r24, 0xC1	; 193
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	93 8b       	std	Z+19, r25	; 0x13
    26c4:	82 8b       	std	Z+18, r24	; 0x12
    26c6:	82 ec       	ldi	r24, 0xC2	; 194
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	95 8b       	std	Z+21, r25	; 0x15
    26cc:	84 8b       	std	Z+20, r24	; 0x14
    26ce:	86 ec       	ldi	r24, 0xC6	; 198
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	97 8b       	std	Z+23, r25	; 0x17
    26d4:	86 8b       	std	Z+22, r24	; 0x16
    26d6:	11 8e       	std	Z+25, r1	; 0x19
    26d8:	12 8e       	std	Z+26, r1	; 0x1a
    26da:	13 8e       	std	Z+27, r1	; 0x1b
    26dc:	14 8e       	std	Z+28, r1	; 0x1c
    26de:	08 95       	ret

000026e0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    26e0:	08 95       	ret

000026e2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	6c 01       	movw	r12, r24
    26f4:	7a 01       	movw	r14, r20
    26f6:	8b 01       	movw	r16, r22
  size_t n = 0;
    26f8:	c0 e0       	ldi	r28, 0x00	; 0
    26fa:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    26fc:	ce 15       	cp	r28, r14
    26fe:	df 05       	cpc	r29, r15
    2700:	89 f0       	breq	.+34     	; 0x2724 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    2702:	d8 01       	movw	r26, r16
    2704:	6d 91       	ld	r22, X+
    2706:	8d 01       	movw	r16, r26
    2708:	d6 01       	movw	r26, r12
    270a:	ed 91       	ld	r30, X+
    270c:	fc 91       	ld	r31, X
    270e:	01 90       	ld	r0, Z+
    2710:	f0 81       	ld	r31, Z
    2712:	e0 2d       	mov	r30, r0
    2714:	c6 01       	movw	r24, r12
    2716:	09 95       	icall
    2718:	89 2b       	or	r24, r25
    271a:	11 f4       	brne	.+4      	; 0x2720 <_ZN5Print5writeEPKhj+0x3e>
    271c:	7e 01       	movw	r14, r28
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <_ZN5Print5writeEPKhj+0x42>
    2720:	21 96       	adiw	r28, 0x01	; 1
    2722:	ec cf       	rjmp	.-40     	; 0x26fc <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    2724:	c7 01       	movw	r24, r14
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	df 90       	pop	r13
    2734:	cf 90       	pop	r12
    2736:	08 95       	ret

00002738 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    2738:	4f 92       	push	r4
    273a:	5f 92       	push	r5
    273c:	6f 92       	push	r6
    273e:	7f 92       	push	r7
    2740:	af 92       	push	r10
    2742:	bf 92       	push	r11
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	29 01       	movw	r4, r18
    275a:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	24 19       	sub	r18, r4
    2762:	35 09       	sbc	r19, r5
    2764:	46 09       	sbc	r20, r6
    2766:	57 09       	sbc	r21, r7
    2768:	89 89       	ldd	r24, Y+17	; 0x11
    276a:	9a 89       	ldd	r25, Y+18	; 0x12
    276c:	ab 89       	ldd	r26, Y+19	; 0x13
    276e:	bc 89       	ldd	r27, Y+20	; 0x14
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	6a 19       	sub	r22, r10
    2776:	7b 09       	sbc	r23, r11
    2778:	8c 09       	sbc	r24, r12
    277a:	9d 09       	sbc	r25, r13
    277c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsi3>
    2780:	a8 01       	movw	r20, r16
    2782:	97 01       	movw	r18, r14
    2784:	24 19       	sub	r18, r4
    2786:	35 09       	sbc	r19, r5
    2788:	46 09       	sbc	r20, r6
    278a:	57 09       	sbc	r21, r7
    278c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__divmodsi4>
    2790:	ca 01       	movw	r24, r20
    2792:	b9 01       	movw	r22, r18
    2794:	6a 0d       	add	r22, r10
    2796:	7b 1d       	adc	r23, r11
    2798:	8c 1d       	adc	r24, r12
    279a:	9d 1d       	adc	r25, r13
}
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	bf 90       	pop	r11
    27ae:	af 90       	pop	r10
    27b0:	7f 90       	pop	r7
    27b2:	6f 90       	pop	r6
    27b4:	5f 90       	pop	r5
    27b6:	4f 90       	pop	r4
    27b8:	08 95       	ret

000027ba <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27ba:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_sendStop>
    27c4:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_inRepStart>
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	82 e1       	ldi	r24, 0x12	; 18
    27cc:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	83 e1       	ldi	r24, 0x13	; 19
    27d4:	0e 94 36 0a 	call	0x146c	; 0x146c <digitalWrite>
    27d8:	e9 eb       	ldi	r30, 0xB9	; 185
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8e 7f       	andi	r24, 0xFE	; 254
    27e0:	80 83       	st	Z, r24
    27e2:	80 81       	ld	r24, Z
    27e4:	8d 7f       	andi	r24, 0xFD	; 253
    27e6:	80 83       	st	Z, r24
    27e8:	88 e4       	ldi	r24, 0x48	; 72
    27ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    27ee:	85 e4       	ldi	r24, 0x45	; 69
    27f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27f4:	08 95       	ret

000027f6 <twi_readFrom>:
    27f6:	41 32       	cpi	r20, 0x21	; 33
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <twi_readFrom+0x6>
    27fa:	43 c0       	rjmp	.+134    	; 0x2882 <twi_readFrom+0x8c>
    27fc:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <twi_state>
    2800:	91 11       	cpse	r25, r1
    2802:	fc cf       	rjmp	.-8      	; 0x27fc <twi_readFrom+0x6>
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <twi_state>
    280a:	20 93 b2 04 	sts	0x04B2, r18	; 0x8004b2 <twi_sendStop>
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <twi_error>
    2814:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <twi_masterBufferIndex>
    2818:	24 0f       	add	r18, r20
    281a:	20 93 8b 04 	sts	0x048B, r18	; 0x80048b <twi_masterBufferLength>
    281e:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <twi_slarw>
    2822:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <twi_slarw>
    2826:	88 0f       	add	r24, r24
    2828:	89 2b       	or	r24, r25
    282a:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <twi_slarw>
    282e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_inRepStart>
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	61 f4       	brne	.+24     	; 0x284e <twi_readFrom+0x58>
    2836:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_inRepStart>
    283a:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_slarw>
    283e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2842:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2846:	83 fd       	sbrc	r24, 3
    2848:	f8 cf       	rjmp	.-16     	; 0x283a <twi_readFrom+0x44>
    284a:	85 ec       	ldi	r24, 0xC5	; 197
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <twi_readFrom+0x5a>
    284e:	85 ee       	ldi	r24, 0xE5	; 229
    2850:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2854:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	e1 f3       	breq	.-8      	; 0x2854 <twi_readFrom+0x5e>
    285c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2860:	84 17       	cp	r24, r20
    2862:	10 f4       	brcc	.+4      	; 0x2868 <twi_readFrom+0x72>
    2864:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2868:	2d e8       	ldi	r18, 0x8D	; 141
    286a:	34 e0       	ldi	r19, 0x04	; 4
    286c:	fb 01       	movw	r30, r22
    286e:	d9 01       	movw	r26, r18
    2870:	8a 2f       	mov	r24, r26
    2872:	82 1b       	sub	r24, r18
    2874:	84 17       	cp	r24, r20
    2876:	18 f4       	brcc	.+6      	; 0x287e <twi_readFrom+0x88>
    2878:	8d 91       	ld	r24, X+
    287a:	81 93       	st	Z+, r24
    287c:	f9 cf       	rjmp	.-14     	; 0x2870 <twi_readFrom+0x7a>
    287e:	84 2f       	mov	r24, r20
    2880:	08 95       	ret
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	08 95       	ret

00002886 <twi_writeTo>:
    2886:	0f 93       	push	r16
    2888:	41 32       	cpi	r20, 0x21	; 33
    288a:	08 f0       	brcs	.+2      	; 0x288e <twi_writeTo+0x8>
    288c:	4a c0       	rjmp	.+148    	; 0x2922 <twi_writeTo+0x9c>
    288e:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <twi_state>
    2892:	91 11       	cpse	r25, r1
    2894:	fc cf       	rjmp	.-8      	; 0x288e <twi_writeTo+0x8>
    2896:	32 e0       	ldi	r19, 0x02	; 2
    2898:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <twi_state>
    289c:	00 93 b2 04 	sts	0x04B2, r16	; 0x8004b2 <twi_sendStop>
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <twi_error>
    28a6:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <twi_masterBufferIndex>
    28aa:	40 93 8b 04 	sts	0x048B, r20	; 0x80048b <twi_masterBufferLength>
    28ae:	fb 01       	movw	r30, r22
    28b0:	6d e8       	ldi	r22, 0x8D	; 141
    28b2:	74 e0       	ldi	r23, 0x04	; 4
    28b4:	db 01       	movw	r26, r22
    28b6:	3a 2f       	mov	r19, r26
    28b8:	36 1b       	sub	r19, r22
    28ba:	34 17       	cp	r19, r20
    28bc:	18 f4       	brcc	.+6      	; 0x28c4 <twi_writeTo+0x3e>
    28be:	31 91       	ld	r19, Z+
    28c0:	3d 93       	st	X+, r19
    28c2:	f9 cf       	rjmp	.-14     	; 0x28b6 <twi_writeTo+0x30>
    28c4:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <twi_slarw>
    28c8:	30 91 b3 04 	lds	r19, 0x04B3	; 0x8004b3 <twi_slarw>
    28cc:	88 0f       	add	r24, r24
    28ce:	83 2b       	or	r24, r19
    28d0:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <twi_slarw>
    28d4:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <twi_inRepStart>
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	61 f4       	brne	.+24     	; 0x28f4 <twi_writeTo+0x6e>
    28dc:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_inRepStart>
    28e0:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_slarw>
    28e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    28e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28ec:	83 fd       	sbrc	r24, 3
    28ee:	f8 cf       	rjmp	.-16     	; 0x28e0 <twi_writeTo+0x5a>
    28f0:	85 ec       	ldi	r24, 0xC5	; 197
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <twi_writeTo+0x70>
    28f4:	85 ee       	ldi	r24, 0xE5	; 229
    28f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28fa:	22 23       	and	r18, r18
    28fc:	21 f0       	breq	.+8      	; 0x2906 <twi_writeTo+0x80>
    28fe:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
    2902:	82 30       	cpi	r24, 0x02	; 2
    2904:	d1 f3       	breq	.-12     	; 0x28fa <twi_writeTo+0x74>
    2906:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_error>
    290a:	8f 3f       	cpi	r24, 0xFF	; 255
    290c:	79 f0       	breq	.+30     	; 0x292c <twi_writeTo+0xa6>
    290e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_error>
    2912:	80 32       	cpi	r24, 0x20	; 32
    2914:	41 f0       	breq	.+16     	; 0x2926 <twi_writeTo+0xa0>
    2916:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_error>
    291a:	80 33       	cpi	r24, 0x30	; 48
    291c:	31 f0       	breq	.+12     	; 0x292a <twi_writeTo+0xa4>
    291e:	94 e0       	ldi	r25, 0x04	; 4
    2920:	05 c0       	rjmp	.+10     	; 0x292c <twi_writeTo+0xa6>
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	03 c0       	rjmp	.+6      	; 0x292c <twi_writeTo+0xa6>
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	01 c0       	rjmp	.+2      	; 0x292c <twi_writeTo+0xa6>
    292a:	93 e0       	ldi	r25, 0x03	; 3
    292c:	89 2f       	mov	r24, r25
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <twi_transmit>:
    2932:	40 91 69 04 	lds	r20, 0x0469	; 0x800469 <twi_txBufferLength>
    2936:	26 2f       	mov	r18, r22
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	24 0f       	add	r18, r20
    293c:	31 1d       	adc	r19, r1
    293e:	21 32       	cpi	r18, 0x21	; 33
    2940:	31 05       	cpc	r19, r1
    2942:	dc f4       	brge	.+54     	; 0x297a <twi_transmit+0x48>
    2944:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <twi_state>
    2948:	24 30       	cpi	r18, 0x04	; 4
    294a:	c9 f4       	brne	.+50     	; 0x297e <twi_transmit+0x4c>
    294c:	fc 01       	movw	r30, r24
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	86 17       	cp	r24, r22
    2954:	58 f4       	brcc	.+22     	; 0x296c <twi_transmit+0x3a>
    2956:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <twi_txBufferLength>
    295a:	21 91       	ld	r18, Z+
    295c:	dc 01       	movw	r26, r24
    295e:	a5 59       	subi	r26, 0x95	; 149
    2960:	bb 4f       	sbci	r27, 0xFB	; 251
    2962:	a3 0f       	add	r26, r19
    2964:	b1 1d       	adc	r27, r1
    2966:	2c 93       	st	X, r18
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	f3 cf       	rjmp	.-26     	; 0x2952 <twi_transmit+0x20>
    296c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    2970:	68 0f       	add	r22, r24
    2972:	60 93 69 04 	sts	0x0469, r22	; 0x800469 <twi_txBufferLength>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	08 95       	ret
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	08 95       	ret
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	08 95       	ret

00002982 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2982:	85 ed       	ldi	r24, 0xD5	; 213
    2984:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2988:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    298c:	84 fd       	sbrc	r24, 4
    298e:	fc cf       	rjmp	.-8      	; 0x2988 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2990:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    2994:	08 95       	ret

00002996 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2996:	85 ec       	ldi	r24, 0xC5	; 197
    2998:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    299c:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    29a0:	08 95       	ret

000029a2 <__vector_24>:
}

ISR(TWI_vect)
{
    29a2:	1f 92       	push	r1
    29a4:	0f 92       	push	r0
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	0f 92       	push	r0
    29aa:	11 24       	eor	r1, r1
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	ef 93       	push	r30
    29c2:	ff 93       	push	r31
  switch(TW_STATUS){
    29c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    29c8:	88 7f       	andi	r24, 0xF8	; 248
    29ca:	80 36       	cpi	r24, 0x60	; 96
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <__vector_24+0x2e>
    29ce:	9e c0       	rjmp	.+316    	; 0x2b0c <__vector_24+0x16a>
    29d0:	78 f5       	brcc	.+94     	; 0x2a30 <__vector_24+0x8e>
    29d2:	88 32       	cpi	r24, 0x28	; 40
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__vector_24+0x36>
    29d6:	5d c0       	rjmp	.+186    	; 0x2a92 <__vector_24+0xf0>
    29d8:	90 f4       	brcc	.+36     	; 0x29fe <__vector_24+0x5c>
    29da:	80 31       	cpi	r24, 0x10	; 16
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <__vector_24+0x3e>
    29de:	56 c0       	rjmp	.+172    	; 0x2a8c <__vector_24+0xea>
    29e0:	38 f4       	brcc	.+14     	; 0x29f0 <__vector_24+0x4e>
    29e2:	88 23       	and	r24, r24
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_24+0x46>
    29e6:	f5 c0       	rjmp	.+490    	; 0x2bd2 <__vector_24+0x230>
    29e8:	88 30       	cpi	r24, 0x08	; 8
    29ea:	09 f4       	brne	.+2      	; 0x29ee <__vector_24+0x4c>
    29ec:	4f c0       	rjmp	.+158    	; 0x2a8c <__vector_24+0xea>
    29ee:	f5 c0       	rjmp	.+490    	; 0x2bda <__vector_24+0x238>
    29f0:	88 31       	cpi	r24, 0x18	; 24
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <__vector_24+0x54>
    29f4:	4e c0       	rjmp	.+156    	; 0x2a92 <__vector_24+0xf0>
    29f6:	80 32       	cpi	r24, 0x20	; 32
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__vector_24+0x5a>
    29fa:	5f c0       	rjmp	.+190    	; 0x2aba <__vector_24+0x118>
    29fc:	ee c0       	rjmp	.+476    	; 0x2bda <__vector_24+0x238>
    29fe:	80 34       	cpi	r24, 0x40	; 64
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <__vector_24+0x62>
    2a02:	6a c0       	rjmp	.+212    	; 0x2ad8 <__vector_24+0x136>
    2a04:	58 f4       	brcc	.+22     	; 0x2a1c <__vector_24+0x7a>
    2a06:	80 33       	cpi	r24, 0x30	; 48
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <__vector_24+0x6a>
    2a0a:	57 c0       	rjmp	.+174    	; 0x2aba <__vector_24+0x118>
    2a0c:	88 33       	cpi	r24, 0x38	; 56
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <__vector_24+0x70>
    2a10:	e4 c0       	rjmp	.+456    	; 0x2bda <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2a12:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_error>
      twi_releaseBus();
    2a16:	0e 94 cb 14 	call	0x2996	; 0x2996 <twi_releaseBus>
      break;
    2a1a:	df c0       	rjmp	.+446    	; 0x2bda <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2a1c:	80 35       	cpi	r24, 0x50	; 80
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_24+0x80>
    2a20:	4f c0       	rjmp	.+158    	; 0x2ac0 <__vector_24+0x11e>
    2a22:	88 35       	cpi	r24, 0x58	; 88
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <__vector_24+0x86>
    2a26:	5d c0       	rjmp	.+186    	; 0x2ae2 <__vector_24+0x140>
    2a28:	88 34       	cpi	r24, 0x48	; 72
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <__vector_24+0x8c>
    2a2c:	d6 c0       	rjmp	.+428    	; 0x2bda <__vector_24+0x238>
    2a2e:	d3 c0       	rjmp	.+422    	; 0x2bd6 <__vector_24+0x234>
    2a30:	88 39       	cpi	r24, 0x98	; 152
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <__vector_24+0x94>
    2a34:	c4 c0       	rjmp	.+392    	; 0x2bbe <__vector_24+0x21c>
    2a36:	a8 f4       	brcc	.+42     	; 0x2a62 <__vector_24+0xc0>
    2a38:	88 37       	cpi	r24, 0x78	; 120
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <__vector_24+0x9c>
    2a3c:	67 c0       	rjmp	.+206    	; 0x2b0c <__vector_24+0x16a>
    2a3e:	38 f4       	brcc	.+14     	; 0x2a4e <__vector_24+0xac>
    2a40:	88 36       	cpi	r24, 0x68	; 104
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <__vector_24+0xa4>
    2a44:	63 c0       	rjmp	.+198    	; 0x2b0c <__vector_24+0x16a>
    2a46:	80 37       	cpi	r24, 0x70	; 112
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <__vector_24+0xaa>
    2a4a:	60 c0       	rjmp	.+192    	; 0x2b0c <__vector_24+0x16a>
    2a4c:	c6 c0       	rjmp	.+396    	; 0x2bda <__vector_24+0x238>
    2a4e:	88 38       	cpi	r24, 0x88	; 136
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <__vector_24+0xb2>
    2a52:	b5 c0       	rjmp	.+362    	; 0x2bbe <__vector_24+0x21c>
    2a54:	80 39       	cpi	r24, 0x90	; 144
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__vector_24+0xb8>
    2a58:	5f c0       	rjmp	.+190    	; 0x2b18 <__vector_24+0x176>
    2a5a:	80 38       	cpi	r24, 0x80	; 128
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <__vector_24+0xbe>
    2a5e:	bd c0       	rjmp	.+378    	; 0x2bda <__vector_24+0x238>
    2a60:	5b c0       	rjmp	.+182    	; 0x2b18 <__vector_24+0x176>
    2a62:	80 3b       	cpi	r24, 0xB0	; 176
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <__vector_24+0xc6>
    2a66:	83 c0       	rjmp	.+262    	; 0x2b6e <__vector_24+0x1cc>
    2a68:	38 f4       	brcc	.+14     	; 0x2a78 <__vector_24+0xd6>
    2a6a:	80 3a       	cpi	r24, 0xA0	; 160
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <__vector_24+0xce>
    2a6e:	66 c0       	rjmp	.+204    	; 0x2b3c <__vector_24+0x19a>
    2a70:	88 3a       	cpi	r24, 0xA8	; 168
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <__vector_24+0xd4>
    2a74:	7c c0       	rjmp	.+248    	; 0x2b6e <__vector_24+0x1cc>
    2a76:	b1 c0       	rjmp	.+354    	; 0x2bda <__vector_24+0x238>
    2a78:	80 3c       	cpi	r24, 0xC0	; 192
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <__vector_24+0xdc>
    2a7c:	a4 c0       	rjmp	.+328    	; 0x2bc6 <__vector_24+0x224>
    2a7e:	88 3c       	cpi	r24, 0xC8	; 200
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <__vector_24+0xe2>
    2a82:	a1 c0       	rjmp	.+322    	; 0x2bc6 <__vector_24+0x224>
    2a84:	88 3b       	cpi	r24, 0xB8	; 184
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <__vector_24+0xe8>
    2a88:	87 c0       	rjmp	.+270    	; 0x2b98 <__vector_24+0x1f6>
    2a8a:	a7 c0       	rjmp	.+334    	; 0x2bda <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2a8c:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_slarw>
    2a90:	10 c0       	rjmp	.+32     	; 0x2ab2 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a92:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2a96:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_masterBufferLength>
    2a9a:	98 17       	cp	r25, r24
    2a9c:	70 f5       	brcc	.+92     	; 0x2afa <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a9e:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	8e 0f       	add	r24, r30
    2aa6:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	e3 57       	subi	r30, 0x73	; 115
    2aae:	fb 4f       	sbci	r31, 0xFB	; 251
    2ab0:	80 81       	ld	r24, Z
    2ab2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ab6:	85 ec       	ldi	r24, 0xC5	; 197
    2ab8:	83 c0       	rjmp	.+262    	; 0x2bc0 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2aba:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_error>
    2abe:	8b c0       	rjmp	.+278    	; 0x2bd6 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ac0:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8e 0f       	add	r24, r30
    2ac8:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    2acc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	e3 57       	subi	r30, 0x73	; 115
    2ad4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ad6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ad8:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2adc:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_masterBufferLength>
    2ae0:	6b c0       	rjmp	.+214    	; 0x2bb8 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ae2:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	8e 0f       	add	r24, r30
    2aea:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    2aee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	e3 57       	subi	r30, 0x73	; 115
    2af6:	fb 4f       	sbci	r31, 0xFB	; 251
    2af8:	80 83       	st	Z, r24
	if (twi_sendStop)
    2afa:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_sendStop>
    2afe:	81 11       	cpse	r24, r1
    2b00:	6a c0       	rjmp	.+212    	; 0x2bd6 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2b08:	84 ea       	ldi	r24, 0xA4	; 164
    2b0a:	5e c0       	rjmp	.+188    	; 0x2bc8 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2b12:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_rxBufferIndex>
    2b16:	cf cf       	rjmp	.-98     	; 0x2ab6 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b18:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_rxBufferIndex>
    2b1c:	80 32       	cpi	r24, 0x20	; 32
    2b1e:	08 f0       	brcs	.+2      	; 0x2b22 <__vector_24+0x180>
    2b20:	4e c0       	rjmp	.+156    	; 0x2bbe <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2b22:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <twi_rxBufferIndex>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8e 0f       	add	r24, r30
    2b2a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <twi_rxBufferIndex>
    2b2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	e7 5b       	subi	r30, 0xB7	; 183
    2b36:	fb 4f       	sbci	r31, 0xFB	; 251
    2b38:	80 83       	st	Z, r24
    2b3a:	bd cf       	rjmp	.-134    	; 0x2ab6 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2b3c:	0e 94 cb 14 	call	0x2996	; 0x2996 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b40:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_rxBufferIndex>
    2b44:	80 32       	cpi	r24, 0x20	; 32
    2b46:	30 f4       	brcc	.+12     	; 0x2b54 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2b48:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <twi_rxBufferIndex>
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	e7 5b       	subi	r30, 0xB7	; 183
    2b50:	fb 4f       	sbci	r31, 0xFB	; 251
    2b52:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2b54:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <twi_rxBufferIndex>
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <twi_onSlaveReceive>
    2b5e:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <twi_onSlaveReceive+0x1>
    2b62:	89 e4       	ldi	r24, 0x49	; 73
    2b64:	94 e0       	ldi	r25, 0x04	; 4
    2b66:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2b68:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_rxBufferIndex>
      break;
    2b6c:	36 c0       	rjmp	.+108    	; 0x2bda <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
    2b70:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b74:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b78:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b7c:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <twi_onSlaveTransmit>
    2b80:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <twi_onSlaveTransmit+0x1>
    2b84:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b86:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	05 c0       	rjmp	.+10     	; 0x2b98 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2b94:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2b98:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <twi_txBufferIndex>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	8e 0f       	add	r24, r30
    2ba0:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <twi_txBufferIndex>
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	e5 59       	subi	r30, 0x95	; 149
    2ba8:	fb 4f       	sbci	r31, 0xFB	; 251
    2baa:	80 81       	ld	r24, Z
    2bac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2bb0:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <twi_txBufferIndex>
    2bb4:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    2bb8:	98 17       	cp	r25, r24
    2bba:	08 f4       	brcc	.+2      	; 0x2bbe <__vector_24+0x21c>
    2bbc:	7c cf       	rjmp	.-264    	; 0x2ab6 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2bbe:	85 e8       	ldi	r24, 0x85	; 133
    2bc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bc6:	85 ec       	ldi	r24, 0xC5	; 197
    2bc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2bcc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
      break;
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2bd2:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_error>
      twi_stop();
    2bd6:	0e 94 c1 14 	call	0x2982	; 0x2982 <twi_stop>
      break;
  }
}
    2bda:	ff 91       	pop	r31
    2bdc:	ef 91       	pop	r30
    2bde:	bf 91       	pop	r27
    2be0:	af 91       	pop	r26
    2be2:	9f 91       	pop	r25
    2be4:	8f 91       	pop	r24
    2be6:	7f 91       	pop	r23
    2be8:	6f 91       	pop	r22
    2bea:	5f 91       	pop	r21
    2bec:	4f 91       	pop	r20
    2bee:	3f 91       	pop	r19
    2bf0:	2f 91       	pop	r18
    2bf2:	0f 90       	pop	r0
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti

00002bfc <__mulsi3>:
    2bfc:	db 01       	movw	r26, r22
    2bfe:	8f 93       	push	r24
    2c00:	9f 93       	push	r25
    2c02:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__muluhisi3>
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	a2 9f       	mul	r26, r18
    2c0c:	80 0d       	add	r24, r0
    2c0e:	91 1d       	adc	r25, r1
    2c10:	a3 9f       	mul	r26, r19
    2c12:	90 0d       	add	r25, r0
    2c14:	b2 9f       	mul	r27, r18
    2c16:	90 0d       	add	r25, r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	08 95       	ret

00002c1c <__udivmodqi4>:
    2c1c:	99 1b       	sub	r25, r25
    2c1e:	79 e0       	ldi	r23, 0x09	; 9
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <__udivmodqi4_ep>

00002c22 <__udivmodqi4_loop>:
    2c22:	99 1f       	adc	r25, r25
    2c24:	96 17       	cp	r25, r22
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <__udivmodqi4_ep>
    2c28:	96 1b       	sub	r25, r22

00002c2a <__udivmodqi4_ep>:
    2c2a:	88 1f       	adc	r24, r24
    2c2c:	7a 95       	dec	r23
    2c2e:	c9 f7       	brne	.-14     	; 0x2c22 <__udivmodqi4_loop>
    2c30:	80 95       	com	r24
    2c32:	08 95       	ret

00002c34 <__udivmodsi4>:
    2c34:	a1 e2       	ldi	r26, 0x21	; 33
    2c36:	1a 2e       	mov	r1, r26
    2c38:	aa 1b       	sub	r26, r26
    2c3a:	bb 1b       	sub	r27, r27
    2c3c:	fd 01       	movw	r30, r26
    2c3e:	0d c0       	rjmp	.+26     	; 0x2c5a <__udivmodsi4_ep>

00002c40 <__udivmodsi4_loop>:
    2c40:	aa 1f       	adc	r26, r26
    2c42:	bb 1f       	adc	r27, r27
    2c44:	ee 1f       	adc	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	a2 17       	cp	r26, r18
    2c4a:	b3 07       	cpc	r27, r19
    2c4c:	e4 07       	cpc	r30, r20
    2c4e:	f5 07       	cpc	r31, r21
    2c50:	20 f0       	brcs	.+8      	; 0x2c5a <__udivmodsi4_ep>
    2c52:	a2 1b       	sub	r26, r18
    2c54:	b3 0b       	sbc	r27, r19
    2c56:	e4 0b       	sbc	r30, r20
    2c58:	f5 0b       	sbc	r31, r21

00002c5a <__udivmodsi4_ep>:
    2c5a:	66 1f       	adc	r22, r22
    2c5c:	77 1f       	adc	r23, r23
    2c5e:	88 1f       	adc	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	1a 94       	dec	r1
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <__udivmodsi4_loop>
    2c66:	60 95       	com	r22
    2c68:	70 95       	com	r23
    2c6a:	80 95       	com	r24
    2c6c:	90 95       	com	r25
    2c6e:	9b 01       	movw	r18, r22
    2c70:	ac 01       	movw	r20, r24
    2c72:	bd 01       	movw	r22, r26
    2c74:	cf 01       	movw	r24, r30
    2c76:	08 95       	ret

00002c78 <__divmodsi4>:
    2c78:	05 2e       	mov	r0, r21
    2c7a:	97 fb       	bst	r25, 7
    2c7c:	1e f4       	brtc	.+6      	; 0x2c84 <__divmodsi4+0xc>
    2c7e:	00 94       	com	r0
    2c80:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__negsi2>
    2c84:	57 fd       	sbrc	r21, 7
    2c86:	07 d0       	rcall	.+14     	; 0x2c96 <__divmodsi4_neg2>
    2c88:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__udivmodsi4>
    2c8c:	07 fc       	sbrc	r0, 7
    2c8e:	03 d0       	rcall	.+6      	; 0x2c96 <__divmodsi4_neg2>
    2c90:	4e f4       	brtc	.+18     	; 0x2ca4 <__divmodsi4_exit>
    2c92:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__negsi2>

00002c96 <__divmodsi4_neg2>:
    2c96:	50 95       	com	r21
    2c98:	40 95       	com	r20
    2c9a:	30 95       	com	r19
    2c9c:	21 95       	neg	r18
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca2:	5f 4f       	sbci	r21, 0xFF	; 255

00002ca4 <__divmodsi4_exit>:
    2ca4:	08 95       	ret

00002ca6 <__negsi2>:
    2ca6:	90 95       	com	r25
    2ca8:	80 95       	com	r24
    2caa:	70 95       	com	r23
    2cac:	61 95       	neg	r22
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb4:	08 95       	ret

00002cb6 <__tablejump2__>:
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	05 90       	lpm	r0, Z+
    2cbc:	f4 91       	lpm	r31, Z
    2cbe:	e0 2d       	mov	r30, r0
    2cc0:	09 94       	ijmp

00002cc2 <__muluhisi3>:
    2cc2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__umulhisi3>
    2cc6:	a5 9f       	mul	r26, r21
    2cc8:	90 0d       	add	r25, r0
    2cca:	b4 9f       	mul	r27, r20
    2ccc:	90 0d       	add	r25, r0
    2cce:	a4 9f       	mul	r26, r20
    2cd0:	80 0d       	add	r24, r0
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	11 24       	eor	r1, r1
    2cd6:	08 95       	ret

00002cd8 <__umulhisi3>:
    2cd8:	a2 9f       	mul	r26, r18
    2cda:	b0 01       	movw	r22, r0
    2cdc:	b3 9f       	mul	r27, r19
    2cde:	c0 01       	movw	r24, r0
    2ce0:	a3 9f       	mul	r26, r19
    2ce2:	70 0d       	add	r23, r0
    2ce4:	81 1d       	adc	r24, r1
    2ce6:	11 24       	eor	r1, r1
    2ce8:	91 1d       	adc	r25, r1
    2cea:	b2 9f       	mul	r27, r18
    2cec:	70 0d       	add	r23, r0
    2cee:	81 1d       	adc	r24, r1
    2cf0:	11 24       	eor	r1, r1
    2cf2:	91 1d       	adc	r25, r1
    2cf4:	08 95       	ret

00002cf6 <malloc>:
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	10 f4       	brcc	.+4      	; 0x2d04 <malloc+0xe>
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <__flp>
    2d08:	f0 91 b8 04 	lds	r31, 0x04B8	; 0x8004b8 <__flp+0x1>
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	c0 e0       	ldi	r28, 0x00	; 0
    2d12:	d0 e0       	ldi	r29, 0x00	; 0
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	11 f1       	breq	.+68     	; 0x2d5c <malloc+0x66>
    2d18:	40 81       	ld	r20, Z
    2d1a:	51 81       	ldd	r21, Z+1	; 0x01
    2d1c:	48 17       	cp	r20, r24
    2d1e:	59 07       	cpc	r21, r25
    2d20:	c0 f0       	brcs	.+48     	; 0x2d52 <malloc+0x5c>
    2d22:	48 17       	cp	r20, r24
    2d24:	59 07       	cpc	r21, r25
    2d26:	61 f4       	brne	.+24     	; 0x2d40 <malloc+0x4a>
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 97       	sbiw	r28, 0x00	; 0
    2d2e:	19 f0       	breq	.+6      	; 0x2d36 <malloc+0x40>
    2d30:	9b 83       	std	Y+3, r25	; 0x03
    2d32:	8a 83       	std	Y+2, r24	; 0x02
    2d34:	2b c0       	rjmp	.+86     	; 0x2d8c <malloc+0x96>
    2d36:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <__flp+0x1>
    2d3a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <__flp>
    2d3e:	26 c0       	rjmp	.+76     	; 0x2d8c <malloc+0x96>
    2d40:	21 15       	cp	r18, r1
    2d42:	31 05       	cpc	r19, r1
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <malloc+0x56>
    2d46:	42 17       	cp	r20, r18
    2d48:	53 07       	cpc	r21, r19
    2d4a:	18 f4       	brcc	.+6      	; 0x2d52 <malloc+0x5c>
    2d4c:	9a 01       	movw	r18, r20
    2d4e:	be 01       	movw	r22, r28
    2d50:	df 01       	movw	r26, r30
    2d52:	ef 01       	movw	r28, r30
    2d54:	02 80       	ldd	r0, Z+2	; 0x02
    2d56:	f3 81       	ldd	r31, Z+3	; 0x03
    2d58:	e0 2d       	mov	r30, r0
    2d5a:	dc cf       	rjmp	.-72     	; 0x2d14 <malloc+0x1e>
    2d5c:	21 15       	cp	r18, r1
    2d5e:	31 05       	cpc	r19, r1
    2d60:	09 f1       	breq	.+66     	; 0x2da4 <malloc+0xae>
    2d62:	28 1b       	sub	r18, r24
    2d64:	39 0b       	sbc	r19, r25
    2d66:	24 30       	cpi	r18, 0x04	; 4
    2d68:	31 05       	cpc	r19, r1
    2d6a:	90 f4       	brcc	.+36     	; 0x2d90 <malloc+0x9a>
    2d6c:	12 96       	adiw	r26, 0x02	; 2
    2d6e:	8d 91       	ld	r24, X+
    2d70:	9c 91       	ld	r25, X
    2d72:	13 97       	sbiw	r26, 0x03	; 3
    2d74:	61 15       	cp	r22, r1
    2d76:	71 05       	cpc	r23, r1
    2d78:	21 f0       	breq	.+8      	; 0x2d82 <malloc+0x8c>
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	93 83       	std	Z+3, r25	; 0x03
    2d7e:	82 83       	std	Z+2, r24	; 0x02
    2d80:	04 c0       	rjmp	.+8      	; 0x2d8a <malloc+0x94>
    2d82:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <__flp+0x1>
    2d86:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <__flp>
    2d8a:	fd 01       	movw	r30, r26
    2d8c:	32 96       	adiw	r30, 0x02	; 2
    2d8e:	44 c0       	rjmp	.+136    	; 0x2e18 <malloc+0x122>
    2d90:	fd 01       	movw	r30, r26
    2d92:	e2 0f       	add	r30, r18
    2d94:	f3 1f       	adc	r31, r19
    2d96:	81 93       	st	Z+, r24
    2d98:	91 93       	st	Z+, r25
    2d9a:	22 50       	subi	r18, 0x02	; 2
    2d9c:	31 09       	sbc	r19, r1
    2d9e:	2d 93       	st	X+, r18
    2da0:	3c 93       	st	X, r19
    2da2:	3a c0       	rjmp	.+116    	; 0x2e18 <malloc+0x122>
    2da4:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <__brkval>
    2da8:	30 91 b6 04 	lds	r19, 0x04B6	; 0x8004b6 <__brkval+0x1>
    2dac:	23 2b       	or	r18, r19
    2dae:	41 f4       	brne	.+16     	; 0x2dc0 <malloc+0xca>
    2db0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2db4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2db8:	30 93 b6 04 	sts	0x04B6, r19	; 0x8004b6 <__brkval+0x1>
    2dbc:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <__brkval>
    2dc0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2dc4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2dc8:	21 15       	cp	r18, r1
    2dca:	31 05       	cpc	r19, r1
    2dcc:	41 f4       	brne	.+16     	; 0x2dde <malloc+0xe8>
    2dce:	2d b7       	in	r18, 0x3d	; 61
    2dd0:	3e b7       	in	r19, 0x3e	; 62
    2dd2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2dd6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2dda:	24 1b       	sub	r18, r20
    2ddc:	35 0b       	sbc	r19, r21
    2dde:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <__brkval>
    2de2:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <__brkval+0x1>
    2de6:	e2 17       	cp	r30, r18
    2de8:	f3 07       	cpc	r31, r19
    2dea:	a0 f4       	brcc	.+40     	; 0x2e14 <malloc+0x11e>
    2dec:	2e 1b       	sub	r18, r30
    2dee:	3f 0b       	sbc	r19, r31
    2df0:	28 17       	cp	r18, r24
    2df2:	39 07       	cpc	r19, r25
    2df4:	78 f0       	brcs	.+30     	; 0x2e14 <malloc+0x11e>
    2df6:	ac 01       	movw	r20, r24
    2df8:	4e 5f       	subi	r20, 0xFE	; 254
    2dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2dfc:	24 17       	cp	r18, r20
    2dfe:	35 07       	cpc	r19, r21
    2e00:	48 f0       	brcs	.+18     	; 0x2e14 <malloc+0x11e>
    2e02:	4e 0f       	add	r20, r30
    2e04:	5f 1f       	adc	r21, r31
    2e06:	50 93 b6 04 	sts	0x04B6, r21	; 0x8004b6 <__brkval+0x1>
    2e0a:	40 93 b5 04 	sts	0x04B5, r20	; 0x8004b5 <__brkval>
    2e0e:	81 93       	st	Z+, r24
    2e10:	91 93       	st	Z+, r25
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <malloc+0x122>
    2e14:	e0 e0       	ldi	r30, 0x00	; 0
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	cf 01       	movw	r24, r30
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <free>:
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <free+0xe>
    2e2c:	8c c0       	rjmp	.+280    	; 0x2f46 <free+0x126>
    2e2e:	fc 01       	movw	r30, r24
    2e30:	32 97       	sbiw	r30, 0x02	; 2
    2e32:	13 82       	std	Z+3, r1	; 0x03
    2e34:	12 82       	std	Z+2, r1	; 0x02
    2e36:	00 91 b7 04 	lds	r16, 0x04B7	; 0x8004b7 <__flp>
    2e3a:	10 91 b8 04 	lds	r17, 0x04B8	; 0x8004b8 <__flp+0x1>
    2e3e:	01 15       	cp	r16, r1
    2e40:	11 05       	cpc	r17, r1
    2e42:	81 f4       	brne	.+32     	; 0x2e64 <free+0x44>
    2e44:	20 81       	ld	r18, Z
    2e46:	31 81       	ldd	r19, Z+1	; 0x01
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <__brkval>
    2e50:	30 91 b6 04 	lds	r19, 0x04B6	; 0x8004b6 <__brkval+0x1>
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	79 f5       	brne	.+94     	; 0x2eb8 <free+0x98>
    2e5a:	f0 93 b6 04 	sts	0x04B6, r31	; 0x8004b6 <__brkval+0x1>
    2e5e:	e0 93 b5 04 	sts	0x04B5, r30	; 0x8004b5 <__brkval>
    2e62:	71 c0       	rjmp	.+226    	; 0x2f46 <free+0x126>
    2e64:	d8 01       	movw	r26, r16
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	50 e0       	ldi	r21, 0x00	; 0
    2e6a:	ae 17       	cp	r26, r30
    2e6c:	bf 07       	cpc	r27, r31
    2e6e:	50 f4       	brcc	.+20     	; 0x2e84 <free+0x64>
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	2d 91       	ld	r18, X+
    2e74:	3c 91       	ld	r19, X
    2e76:	13 97       	sbiw	r26, 0x03	; 3
    2e78:	ad 01       	movw	r20, r26
    2e7a:	21 15       	cp	r18, r1
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	09 f1       	breq	.+66     	; 0x2ec2 <free+0xa2>
    2e80:	d9 01       	movw	r26, r18
    2e82:	f3 cf       	rjmp	.-26     	; 0x2e6a <free+0x4a>
    2e84:	9d 01       	movw	r18, r26
    2e86:	da 01       	movw	r26, r20
    2e88:	33 83       	std	Z+3, r19	; 0x03
    2e8a:	22 83       	std	Z+2, r18	; 0x02
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	86 0f       	add	r24, r22
    2e92:	97 1f       	adc	r25, r23
    2e94:	82 17       	cp	r24, r18
    2e96:	93 07       	cpc	r25, r19
    2e98:	69 f4       	brne	.+26     	; 0x2eb4 <free+0x94>
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	28 81       	ld	r18, Y
    2e9e:	39 81       	ldd	r19, Y+1	; 0x01
    2ea0:	26 0f       	add	r18, r22
    2ea2:	37 1f       	adc	r19, r23
    2ea4:	2e 5f       	subi	r18, 0xFE	; 254
    2ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea8:	31 83       	std	Z+1, r19	; 0x01
    2eaa:	20 83       	st	Z, r18
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb0:	93 83       	std	Z+3, r25	; 0x03
    2eb2:	82 83       	std	Z+2, r24	; 0x02
    2eb4:	45 2b       	or	r20, r21
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <free+0xa2>
    2eb8:	f0 93 b8 04 	sts	0x04B8, r31	; 0x8004b8 <__flp+0x1>
    2ebc:	e0 93 b7 04 	sts	0x04B7, r30	; 0x8004b7 <__flp>
    2ec0:	42 c0       	rjmp	.+132    	; 0x2f46 <free+0x126>
    2ec2:	13 96       	adiw	r26, 0x03	; 3
    2ec4:	fc 93       	st	X, r31
    2ec6:	ee 93       	st	-X, r30
    2ec8:	12 97       	sbiw	r26, 0x02	; 2
    2eca:	ed 01       	movw	r28, r26
    2ecc:	49 91       	ld	r20, Y+
    2ece:	59 91       	ld	r21, Y+
    2ed0:	9e 01       	movw	r18, r28
    2ed2:	24 0f       	add	r18, r20
    2ed4:	35 1f       	adc	r19, r21
    2ed6:	e2 17       	cp	r30, r18
    2ed8:	f3 07       	cpc	r31, r19
    2eda:	71 f4       	brne	.+28     	; 0x2ef8 <free+0xd8>
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	84 0f       	add	r24, r20
    2ee2:	95 1f       	adc	r25, r21
    2ee4:	02 96       	adiw	r24, 0x02	; 2
    2ee6:	11 96       	adiw	r26, 0x01	; 1
    2ee8:	9c 93       	st	X, r25
    2eea:	8e 93       	st	-X, r24
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	13 96       	adiw	r26, 0x03	; 3
    2ef2:	9c 93       	st	X, r25
    2ef4:	8e 93       	st	-X, r24
    2ef6:	12 97       	sbiw	r26, 0x02	; 2
    2ef8:	e0 e0       	ldi	r30, 0x00	; 0
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	d8 01       	movw	r26, r16
    2efe:	12 96       	adiw	r26, 0x02	; 2
    2f00:	8d 91       	ld	r24, X+
    2f02:	9c 91       	ld	r25, X
    2f04:	13 97       	sbiw	r26, 0x03	; 3
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	19 f0       	breq	.+6      	; 0x2f10 <free+0xf0>
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	8c 01       	movw	r16, r24
    2f0e:	f6 cf       	rjmp	.-20     	; 0x2efc <free+0xdc>
    2f10:	8d 91       	ld	r24, X+
    2f12:	9c 91       	ld	r25, X
    2f14:	98 01       	movw	r18, r16
    2f16:	2e 5f       	subi	r18, 0xFE	; 254
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	82 0f       	add	r24, r18
    2f1c:	93 1f       	adc	r25, r19
    2f1e:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <__brkval>
    2f22:	30 91 b6 04 	lds	r19, 0x04B6	; 0x8004b6 <__brkval+0x1>
    2f26:	28 17       	cp	r18, r24
    2f28:	39 07       	cpc	r19, r25
    2f2a:	69 f4       	brne	.+26     	; 0x2f46 <free+0x126>
    2f2c:	30 97       	sbiw	r30, 0x00	; 0
    2f2e:	29 f4       	brne	.+10     	; 0x2f3a <free+0x11a>
    2f30:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <__flp+0x1>
    2f34:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <__flp>
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <free+0x11e>
    2f3a:	13 82       	std	Z+3, r1	; 0x03
    2f3c:	12 82       	std	Z+2, r1	; 0x02
    2f3e:	10 93 b6 04 	sts	0x04B6, r17	; 0x8004b6 <__brkval+0x1>
    2f42:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <__brkval>
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	08 95       	ret

00002f50 <strncpy>:
    2f50:	fb 01       	movw	r30, r22
    2f52:	dc 01       	movw	r26, r24
    2f54:	41 50       	subi	r20, 0x01	; 1
    2f56:	50 40       	sbci	r21, 0x00	; 0
    2f58:	48 f0       	brcs	.+18     	; 0x2f6c <strncpy+0x1c>
    2f5a:	01 90       	ld	r0, Z+
    2f5c:	0d 92       	st	X+, r0
    2f5e:	00 20       	and	r0, r0
    2f60:	c9 f7       	brne	.-14     	; 0x2f54 <strncpy+0x4>
    2f62:	01 c0       	rjmp	.+2      	; 0x2f66 <strncpy+0x16>
    2f64:	1d 92       	st	X+, r1
    2f66:	41 50       	subi	r20, 0x01	; 1
    2f68:	50 40       	sbci	r21, 0x00	; 0
    2f6a:	e0 f7       	brcc	.-8      	; 0x2f64 <strncpy+0x14>
    2f6c:	08 95       	ret

00002f6e <strrchr>:
    2f6e:	fc 01       	movw	r30, r24
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	01 90       	ld	r0, Z+
    2f76:	06 16       	cp	r0, r22
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <strrchr+0xe>
    2f7a:	cf 01       	movw	r24, r30
    2f7c:	00 20       	and	r0, r0
    2f7e:	d1 f7       	brne	.-12     	; 0x2f74 <strrchr+0x6>
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	08 95       	ret

00002f84 <strstr>:
    2f84:	fb 01       	movw	r30, r22
    2f86:	51 91       	ld	r21, Z+
    2f88:	55 23       	and	r21, r21
    2f8a:	a9 f0       	breq	.+42     	; 0x2fb6 <strstr+0x32>
    2f8c:	bf 01       	movw	r22, r30
    2f8e:	dc 01       	movw	r26, r24
    2f90:	4d 91       	ld	r20, X+
    2f92:	45 17       	cp	r20, r21
    2f94:	41 11       	cpse	r20, r1
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <strstr+0xc>
    2f98:	59 f4       	brne	.+22     	; 0x2fb0 <strstr+0x2c>
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	00 20       	and	r0, r0
    2fa0:	49 f0       	breq	.+18     	; 0x2fb4 <strstr+0x30>
    2fa2:	4d 91       	ld	r20, X+
    2fa4:	40 15       	cp	r20, r0
    2fa6:	41 11       	cpse	r20, r1
    2fa8:	c9 f3       	breq	.-14     	; 0x2f9c <strstr+0x18>
    2faa:	fb 01       	movw	r30, r22
    2fac:	41 11       	cpse	r20, r1
    2fae:	ef cf       	rjmp	.-34     	; 0x2f8e <strstr+0xa>
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	08 95       	ret

00002fb8 <_exit>:
    2fb8:	f8 94       	cli

00002fba <__stop_program>:
    2fba:	ff cf       	rjmp	.-2      	; 0x2fba <__stop_program>
